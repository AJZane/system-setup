module.exports=function(e){function t(o){if(i[o])return i[o].exports;var s=i[o]={i:o,l:!1,exports:{}};return e[o].call(s.exports,s,s.exports,t),s.l=!0,s.exports}var i={};return t.m=e,t.c=i,t.d=function(e,i,o){t.o(e,i)||Object.defineProperty(e,i,{configurable:!1,enumerable:!0,get:o})},t.n=function(e){var i=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(i,"a",i),i},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=62)}([function(e,t){e.exports=require("tslib")},function(e,t){e.exports=require("vscode")},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0);o.__exportStar(i(63),t),o.__exportStar(i(64),t),o.__exportStar(i(67),t),o.__exportStar(i(35),t),o.__exportStar(i(34),t),o.__exportStar(i(70),t),o.__exportStar(i(71),t)},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(9),a=i(4),c=i(26),h=i(13),l=i(29);t.GitUri=l.GitUri;const d=i(5),u=i(27),m=i(7);o.__exportStar(i(37),t),o.__exportStar(i(97),t),o.__exportStar(i(98),t);var g=i(15);t.getNameFromRemoteResource=g.getNameFromRemoteResource,t.RemoteProvider=g.RemoteProvider,t.RemoteResourceType=g.RemoteResourceType;var p=i(26);t.RemoteProviderFactory=p.RemoteProviderFactory,o.__exportStar(i(99),t);class f{constructor(e){this.uri=e}}class v{constructor(e){this.key=e,this.cache=new Map}get hasErrors(){return s.Iterables.every(this.cache.values(),e=>void 0!==e.errorMessage)}get(e){return this.cache.get(e)}set(e,t){this.cache.set(e,t)}}var C;!function(e){e[e.DocumentChanged=0]="DocumentChanged",e[e.DocumentClosed=1]="DocumentClosed"}(C||(C={}));var y;!function(e){e.Author="author",e.Changes="changes",e.ChangesOccurrences="changes-occurrences",e.Files="files",e.Message="message",e.Sha="sha"}(y=t.GitRepoSearchBy||(t.GitRepoSearchBy={}));var w;!function(e){e.GitCache="git-cache",e.Repositories="repositories"}(w=t.GitChangeReason||(t.GitChangeReason={}));class _ extends r.Disposable{constructor(){super(()=>this.dispose()),this._onDidBlameFail=new r.EventEmitter,this._onDidChange=new r.EventEmitter,this._suspended=!1,this._documentKeyMap=new Map,this._gitCache=new Map,this._repositoryTree=s.TernarySearchTree.forPaths(),this._trackedCache=new Map,this._versionedUriCache=new Map,this._disposable=r.Disposable.from(r.window.onDidChangeWindowState(this.onWindowStateChanged,this),r.workspace.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged,this),n.configuration.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(n.configuration.initializingChangeEvent),this._repositoriesLoadingPromise=this.onWorkspaceFoldersChanged()}get onDidBlameFail(){return this._onDidBlameFail.event}get onDidChange(){return this._onDidChange.event}dispose(){this._repositoryTree.forEach(e=>e.dispose()),this._disposable&&this._disposable.dispose(),this._cacheDisposable&&this._cacheDisposable.dispose(),this._cacheDisposable=void 0,this._documentKeyMap.clear(),this._gitCache.clear(),this._trackedCache.clear(),this._versionedUriCache.clear()}get UseCaching(){return this.config.advanced.caching.enabled}onAnyRepositoryChanged(){this._gitCache.clear(),this._trackedCache.clear()}onConfigurationChanged(e){const t=n.configuration.initializing(e),i=n.configuration.get();(t||n.configuration.changed(e,n.configuration.name("keymap").value))&&a.setCommandContext(a.CommandContext.KeyMap,i.keymap),(t||n.configuration.changed(e,n.configuration.name("advanced")("caching")("enabled").value))&&(i.advanced.caching.enabled?(this._cacheDisposable&&this._cacheDisposable.dispose(),this._cacheDisposable=r.Disposable.from(r.workspace.onDidChangeTextDocument(s.Functions.debounce(this.onTextDocumentChanged,50),this),r.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this))):(this._cacheDisposable&&this._cacheDisposable.dispose(),this._cacheDisposable=void 0,this._documentKeyMap.clear(),this._gitCache.clear())),this.config=i,!t&&n.configuration.changed(e,n.configuration.name("blame")("ignoreWhitespace").value,null)&&(this._gitCache.clear(),this.fireChange(w.GitCache))}onTextDocumentChanged(e){let t=this._documentKeyMap.get(e.document);void 0===t&&(t=this.getCacheEntryKey(e.document.uri),this._documentKeyMap.set(e.document,t));const i=this._gitCache.get(t);void 0===i||i.hasErrors||this._gitCache.delete(t)&&d.Logger.log(`Clear cache entry for '${t}', reason=${C[C.DocumentChanged]}`)}onTextDocumentClosed(e){this._documentKeyMap.delete(e);const t=this.getCacheEntryKey(e.uri);this._gitCache.delete(t)&&d.Logger.log(`Clear cache entry for '${t}', reason=${C[C.DocumentClosed]}`)}onWindowStateChanged(e){e.focused?this._repositoryTree.forEach(e=>e.resume()):this._repositoryTree.forEach(e=>e.suspend()),this._suspended=!e.focused}onWorkspaceFoldersChanged(e){return o.__awaiter(this,void 0,void 0,function*(){let t=!1;void 0===e&&(t=!0,e={added:r.workspace.workspaceFolders||[],removed:[]});for(const t of e.added){if(t.uri.scheme!==a.DocumentSchemes.File)continue;const e=yield this.repositorySearch(t);for(const t of e)this._repositoryTree.set(t.path,t)}for(const t of e.removed){if(t.uri.scheme!==a.DocumentSchemes.File)continue;const e=t.uri.fsPath,i=this._repositoryTree.findSuperstr(e),o=void 0!==i?[...s.Iterables.map(i.entries(),([t,i])=>[t,m.join(e,i)])]:[],r=this._repositoryTree.get(e);void 0!==r&&o.push([r,e]);for(const[e,t]of o)this._repositoryTree.delete(t),e.dispose()}yield a.setCommandContext(a.CommandContext.HasRepository,this._repositoryTree.any()),t||setTimeout(()=>this.fireChange(w.Repositories),1)})}repositorySearch(e){return o.__awaiter(this,void 0,void 0,function*(){const t=e.uri,i=[],o=this.onAnyRepositoryChanged.bind(this),a=yield this.getRepoPathCore(t.fsPath,!0);void 0!==a&&i.push(new h.Repository(e,a,!0,this,o,this._suspended));const c=n.configuration.get(n.configuration.name("advanced")("repositorySearchDepth").value,t);if(c<=0)return i;let l=Object.assign({},r.workspace.getConfiguration("files",t).get("exclude",{}),r.workspace.getConfiguration("search",t).get("exclude",{}));l=[...s.Iterables.filterMap(s.Objects.entries(l),([e,t])=>{if(t)return e.startsWith("**/")?e.substring(3):e})].reduce((e,t)=>(e[t]=!0,e),Object.create(null));const u=process.hrtime(),g=yield this.repositorySearchCore(t.fsPath,c,l),p=process.hrtime(u);d.Logger.log(`Searching (depth=${c}) for repositories in ${t.fsPath} took ${1e3*p[0]+Math.floor(p[1]/1e6)} ms`);for(let t of g){if(t=m.dirname(t),h.Git.normalizePath(t)===a)continue;const s=yield this.getRepoPathCore(t,!0);void 0!==s&&i.push(new h.Repository(e,s,!1,this,o,this._suspended))}return i})}repositorySearchCore(e,t,i,s=[]){return o.__awaiter(this,void 0,void 0,function*(){return new Promise((r,n)=>{u.readdir(e,(a,c)=>o.__awaiter(this,void 0,void 0,function*(){if(null!=a)return void n(a);if(0===c.length)return void r(s);const o=[],h=c.map(t=>{const r=m.resolve(e,t);return new Promise((e,n)=>{u.stat(r,(n,a)=>{".git"===t?s.push(r):null==n&&!0!==i[t]&&null!=a&&a.isDirectory()&&o.push(r),e()})})});if(yield Promise.all(h),t-- >0)for(const e of o)yield this.repositorySearchCore(e,t,i,s);r(s)}))})})}fireChange(e){this._onDidChange.fire({reason:e})}checkoutFile(e,t){return t=t||e.sha,d.Logger.log(`checkoutFile('${e.repoPath}', '${e.fsPath}', '${t}')`),h.Git.checkout(e.repoPath,e.fsPath,t)}fileExists(e,t){return o.__awaiter(this,void 0,void 0,function*(){return yield new Promise((i,o)=>u.exists(m.resolve(e,t),i))})}findNextCommit(e,t,i){return o.__awaiter(this,void 0,void 0,function*(){let o=yield this.getLogForFile(e,t,{maxCount:1,ref:i,reverse:!0}),r=o&&s.Iterables.first(o.commits.values());if(r)return r;const n=yield this.findNextFileName(e,t,i);return n&&(r=(o=yield this.getLogForFile(e,n,{maxCount:1,ref:i,reverse:!0}))&&s.Iterables.first(o.commits.values())),r})}findNextFileName(e,t,i){return o.__awaiter(this,void 0,void 0,function*(){return[t,e]=h.Git.splitPath(t,e),(yield this.fileExists(e,t))?t:yield this.findNextFileNameCore(e,t,i)})}findNextFileNameCore(e,t,i){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===i){const o=yield this.getLogCommit(e,t);if(void 0===o)return;i=o.sha}const o=yield this.getLogForRepo(e,{maxCount:1,ref:i});if(void 0===o)return;const r=s.Iterables.first(o.commits.values()).fileStatuses.find(e=>e.originalFileName===t);return void 0!==r?r.fileName:void 0})}findWorkingFileName(e,t){return o.__awaiter(this,void 0,void 0,function*(){let i;if(void 0===e||"string"==typeof e){if(i=e,void 0===t)throw new Error("Invalid fileName");[t]=h.Git.splitPath(t,i)}else{const o=e;if(i=o.repoPath,o.workingFileName&&(yield this.fileExists(i,o.workingFileName)))return o.workingFileName;t=o.fileName}for(;;){if(yield this.fileExists(i,t))return t;if(void 0===(t=yield this.findNextFileNameCore(i,t)))return}})}getActiveRepoPath(e){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===e){const e=this.getHighlanderRepoPath();if(void 0!==e)return e}if(void 0!==(e=e||r.window.activeTextEditor))return this.getRepoPath(e.document.uri)})}getHighlanderRepoPath(){const e=this._repositoryTree.highlander();if(void 0===e)return;const[t]=e;return t.path}getBlameability(e){return o.__awaiter(this,void 0,void 0,function*(){if(!this.UseCaching)return yield this.isTracked(e);const t=this.getCacheEntryKey(e),i=this._gitCache.get(t);return void 0===i?yield this.isTracked(e):!i.hasErrors})}getBlameForFile(e){return o.__awaiter(this,void 0,void 0,function*(){let t="blame";void 0!==e.sha&&(t+=`:${e.sha}`);let i;if(this.UseCaching){const o=this.getCacheEntryKey(e);if(void 0!==(i=this._gitCache.get(o))){const o=i.get(t);if(void 0!==o)return d.Logger.log(`getBlameForFile[Cached(${t})]('${e.repoPath}', '${e.fsPath}', '${e.sha}')`),o.item}d.Logger.log(`getBlameForFile[Not Cached(${t})]('${e.repoPath}', '${e.fsPath}', '${e.sha}')`),void 0===i&&(i=new v(o),this._gitCache.set(i.key,i))}else d.Logger.log(`getBlameForFile('${e.repoPath}', '${e.fsPath}', '${e.sha}')`);const o=this.getBlameForFileCore(e,i,t);return i&&(d.Logger.log(`Add blame cache for '${i.key}:${t}'`),i.set(t,{item:o})),o})}getBlameForFileCore(e,t,i){return o.__awaiter(this,void 0,void 0,function*(){if(!(yield this.isTracked(e)))return d.Logger.log(`Skipping blame; '${e.fsPath}' is not tracked`),t&&t.key&&this._onDidBlameFail.fire(t.key),yield _.emptyPromise;const[o,s]=h.Git.splitPath(e.fsPath,e.repoPath,!1);try{const r=yield h.Git.blame(s,o,e.sha,{ignoreWhitespace:this.config.blame.ignoreWhitespace});return h.GitBlameParser.parse(r,s,o)}catch(e){if(t){const o=e&&e.toString();return d.Logger.log(`Replace blame cache with empty promise for '${t.key}:${i}'`),t.set(i,{item:_.emptyPromise,errorMessage:o}),this._onDidBlameFail.fire(t.key),yield _.emptyPromise}return}})}getBlameForLine(e,t){return o.__awaiter(this,void 0,void 0,function*(){if(d.Logger.log(`getBlameForLine('${e.repoPath}', '${e.fsPath}', '${e.sha}', ${t})`),this.UseCaching){const i=yield this.getBlameForFile(e);if(void 0===i)return;let o=i.lines[t];if(void 0===o){if(i.lines.length!==t)return;o=i.lines[t-1]}const s=i.commits.get(o.sha);if(void 0===s)return;return{author:Object.assign({},i.authors.get(s.author),{lineCount:s.lines.length}),commit:s,line:o}}const i=e.fsPath;try{const o=yield h.Git.blame(e.repoPath,i,e.sha,{ignoreWhitespace:this.config.blame.ignoreWhitespace,startLine:t+1,endLine:t+1}),r=h.GitBlameParser.parse(o,e.repoPath,i);if(void 0===r)return;return{author:s.Iterables.first(r.authors.values()),commit:s.Iterables.first(r.commits.values()),line:r.lines[t]}}catch(e){return}})}getBlameForRange(e,t){return o.__awaiter(this,void 0,void 0,function*(){d.Logger.log(`getBlameForRange('${e.repoPath}', '${e.fsPath}', '${e.sha}', [${t.start.line}, ${t.end.line}])`);const i=yield this.getBlameForFile(e);if(void 0!==i)return this.getBlameForRangeSync(i,e,t)})}getBlameForRangeSync(e,t,i){if(d.Logger.log(`getBlameForRangeSync('${t.repoPath}', '${t.fsPath}', '${t.sha}', [${i.start.line}, ${i.end.line}])`),0===e.lines.length)return Object.assign({allLines:e.lines},e);if(0===i.start.line&&i.end.line===e.lines.length-1)return Object.assign({allLines:e.lines},e);const o=e.lines.slice(i.start.line,i.end.line+1),s=new Set(o.map(e=>e.sha)),r=new Map,n=new Map;for(const t of e.commits.values()){if(!s.has(t.sha))continue;const e=t.with({lines:t.lines.filter(e=>e.line>=i.start.line&&e.line<=i.end.line)});n.set(t.sha,e);let o=r.get(e.author);void 0===o&&(o={name:e.author,lineCount:0},r.set(o.name,o)),o.lineCount+=e.lines.length}return{authors:new Map([...r.entries()].sort((e,t)=>t[1].lineCount-e[1].lineCount)),commits:n,lines:o,allLines:e.lines}}getBranch(e){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return;d.Logger.log(`getBranch('${e}')`);const t=yield h.Git.revparse_currentBranch(e);if(void 0===t)return;const i=t.split("\n");return new h.GitBranch(e,i[0],!0,i[1])})}getBranches(e){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return[];d.Logger.log(`getBranches('${e}')`);const t=yield h.Git.branch(e,{all:!0});if(""===t){const t=yield this.getBranch(e);return void 0!==t?[t]:[]}return h.GitBranchParser.parse(t,e)||[]})}getCacheEntryKey(e){return h.Git.normalizePath("string"==typeof e?e:e.fsPath).toLowerCase()}getChangedFilesCount(e,t){return o.__awaiter(this,void 0,void 0,function*(){d.Logger.log(`getChangedFilesCount('${e}', '${t}')`);const i=yield h.Git.diff_shortstat(e,t);return h.GitDiffParser.parseShortStat(i)})}getConfig(e,t){return o.__awaiter(this,void 0,void 0,function*(){return d.Logger.log(`getConfig('${e}', '${t}')`),yield h.Git.config_get(e,t)})}getGitUriForVersionedFile(e){const t=this.getCacheEntryKey(e),i=this._versionedUriCache.get(t);return i&&i.uri}getDiffForFile(e,t,i){return o.__awaiter(this,void 0,void 0,function*(){void 0!==t&&void 0===i&&void 0!==e.sha&&(i=e.sha);let o="diff";void 0!==t&&(o+=`:${t}`),void 0!==i&&(o+=`:${i}`);let s;if(this.UseCaching){const r=this.getCacheEntryKey(e);if(void 0!==(s=this._gitCache.get(r))){const r=s.get(o);if(void 0!==r)return d.Logger.log(`getDiffForFile[Cached(${o})]('${e.repoPath}', '${e.fsPath}', '${t}', '${i}')`),r.item}d.Logger.log(`getDiffForFile[Not Cached(${o})]('${e.repoPath}', '${e.fsPath}', '${t}', '${i}')`),void 0===s&&(s=new v(r),this._gitCache.set(s.key,s))}else d.Logger.log(`getDiffForFile('${e.repoPath}', '${e.fsPath}', '${t}', '${i}')`);const r=this.getDiffForFileCore(e.repoPath,e.fsPath,t,i,{encoding:_.getEncoding(e)},s,o);return s&&(d.Logger.log(`Add log cache for '${s.key}:${o}'`),s.set(o,{item:r})),r})}getDiffForFileCore(e,t,i,s,r,n,a){return o.__awaiter(this,void 0,void 0,function*(){const[o,c]=h.Git.splitPath(t,e,!1);try{const e=yield h.Git.diff(c,o,i,s,r);return h.GitDiffParser.parse(e)}catch(e){if(n){const t=e&&e.toString();return d.Logger.log(`Replace diff cache with empty promise for '${n.key}:${a}'`),n.set(a,{item:_.emptyPromise,errorMessage:t}),yield _.emptyPromise}return}})}getDiffForLine(e,t,i,s){return o.__awaiter(this,void 0,void 0,function*(){d.Logger.log(`getDiffForLine('${e.repoPath}', '${e.fsPath}', ${t}, '${i}', '${s}')`);try{const o=yield this.getDiffForFile(e,i,s);if(void 0===o)return;const r=o.chunks.find(e=>e.currentPosition.start<=t&&e.currentPosition.end>=t);if(void 0===r)return;return r.lines[t-r.currentPosition.start+1]}catch(e){return}})}getDiffStatus(e,t,i,s={}){return o.__awaiter(this,void 0,void 0,function*(){d.Logger.log(`getDiffStatus('${e}', '${t}', '${i}', ${s.filter})`);try{const o=yield h.Git.diff_nameStatus(e,t,i,s);return h.GitDiffParser.parseNameStatus(o,e)}catch(e){return}})}getLogCommit(e,t,i,r){return o.__awaiter(this,void 0,void 0,function*(){let o=void 0;"string"==typeof i?o=i:void 0===r&&(r=i),r=r||{},d.Logger.log(`getLogCommit('${e}', '${t}', '${o}', ${r.firstIfMissing}, ${r.previous})`);const n=yield this.getLogForFile(e,t,{maxCount:r.previous?2:1,ref:o});if(void 0===n)return;const a=o&&n.commits.get(o);return void 0!==a||!o||r.firstIfMissing||h.Git.isResolveRequired(o)?a||s.Iterables.first(n.commits.values()):void 0})}getLogForRepo(e,t={}){return o.__awaiter(this,void 0,void 0,function*(){t=Object.assign({reverse:!1},t),d.Logger.log(`getLogForRepo('${e}', '${t.ref}', ${t.maxCount}, ${t.reverse})`);const i=null==t.maxCount?this.config.advanced.maxQuickHistory||0:t.maxCount;try{const o=yield h.Git.log(e,{maxCount:i,ref:t.ref,reverse:t.reverse}),s=h.GitLogParser.parse(o,h.GitCommitType.Branch,e,void 0,t.ref,i,t.reverse,void 0);if(void 0!==s){const i=Object.assign({},t);s.query=(t=>this.getLogForRepo(e,Object.assign({},i,{maxCount:t})))}return s}catch(e){return}})}getLogForRepoSearch(e,t,i,s={}){return o.__awaiter(this,void 0,void 0,function*(){d.Logger.log(`getLogForRepoSearch('${e}', '${t}', '${i}', ${s.maxCount})`);let o=null==s.maxCount?this.config.advanced.maxQuickHistory||0:s.maxCount,r=void 0;switch(i){case y.Author:r=[`--author=${t}`];break;case y.Changes:r=[`-G${t}`];break;case y.ChangesOccurrences:r=[`-S${t}`,"--pickaxe-regex"];break;case y.Files:r=["--",`${t}`];break;case y.Message:r=[`--grep=${t}`];break;case y.Sha:r=[t],o=1}try{const n=yield h.Git.log_search(e,r,{maxCount:o}),a=h.GitLogParser.parse(n,h.GitCommitType.Branch,e,void 0,void 0,o,!1,void 0);if(void 0!==a){const o=Object.assign({},s);a.query=(s=>this.getLogForRepoSearch(e,t,i,Object.assign({},o,{maxCount:s})))}return a}catch(e){return}})}getLogForFile(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){let o="log";void 0!==(i=Object.assign({reverse:!1,skipMerges:!1},i)).ref&&(o+=`:${i.ref}`),void 0!==i.maxCount&&(o+=`:n${i.maxCount}`);let s;if(this.UseCaching&&void 0===i.range&&!i.reverse){const r=this.getCacheEntryKey(t);if(void 0!==(s=this._gitCache.get(r))){const r=s.get(o);if(void 0!==r)return d.Logger.log(`getLogForFile[Cached(${o})]('${e}', '${t}', '${i.ref}', ${i.maxCount}, undefined, ${i.reverse}, ${i.skipMerges})`),r.item;if("log"!==o){const r=s.get("log");if(void 0!==r){if(void 0===i.ref)return d.Logger.log(`getLogForFile[Cached(~${o})]('${e}', '${t}', '', ${i.maxCount}, undefined, ${i.reverse}, ${i.skipMerges})`),r.item;d.Logger.log(`getLogForFile[? Cache(${o})]('${e}', '${t}', '${i.ref}', ${i.maxCount}, undefined, ${i.reverse}, ${i.skipMerges})`);const s=yield r.item;if(void 0!==s&&s.commits.has(i.ref))return d.Logger.log(`getLogForFile[Cached(${o})]('${e}', '${t}', '${i.ref}', ${i.maxCount}, undefined, ${i.reverse}, ${i.skipMerges})`),r.item}}}d.Logger.log(`getLogForFile[Not Cached(${o})]('${e}', '${t}', ${i.ref}, ${i.maxCount}, undefined, ${i.reverse}, ${i.skipMerges})`),void 0===s&&(s=new v(r),this._gitCache.set(s.key,s))}else d.Logger.log(`getLogForFile('${e}', '${t}', ${i.ref}, ${i.maxCount}, ${i.range&&`[${i.range.start.line}, ${i.range.end.line}]`}, ${i.reverse}, ${i.skipMerges})`);const r=this.getLogForFileCore(e,t,i,s,o);return s&&(d.Logger.log(`Add log cache for '${s.key}:${o}'`),s.set(o,{item:r})),r})}getLogForFileCore(e,t,i,s,r){return o.__awaiter(this,void 0,void 0,function*(){if(!(yield this.isTracked(t,e,i.ref)))return d.Logger.log(`Skipping log; '${t}' is not tracked`),yield _.emptyPromise;const[n,a]=h.Git.splitPath(t,e,!1);try{const{range:c}=i,l=o.__rest(i,["range"]),u=null==i.maxCount?this.config.advanced.maxQuickHistory||0:i.maxCount,m=yield h.Git.log_file(a,n,Object.assign({},l,{maxCount:u,startLine:c&&c.start.line+1,endLine:c&&c.end.line+1})),g=h.GitLogParser.parse(m,h.GitCommitType.File,a,n,l.ref,u,l.reverse,c);if(void 0!==g){const o=Object.assign({},i);g.query=(i=>this.getLogForFile(e,t,Object.assign({},o,{maxCount:i})))}return g}catch(e){if(s){const t=e&&e.toString();return d.Logger.log(`Replace log cache with empty promise for '${s.key}:${r}'`),s.set(r,{item:_.emptyPromise,errorMessage:t}),yield _.emptyPromise}return}})}hasRemote(e){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return!1;const t=yield this.getRepository(e);return void 0!==t&&t.hasRemote()})}hasRemotes(e){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return!1;const t=yield this.getRepository(e);return void 0!==t&&t.hasRemotes()})}getRemotes(e){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return[];d.Logger.log(`getRemotes('${e}')`);const t=yield this.getRepository(e);return void 0!==t?t.getRemotes():this.getRemotesCore(e)})}getRemotesCore(e,t){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return[];d.Logger.log(`getRemotesCore('${e}')`),t=t||c.RemoteProviderFactory.createMap(n.configuration.get(n.configuration.name("remotes").value,null));try{const i=yield h.Git.remote(e);return h.GitRemoteParser.parse(i,e,c.RemoteProviderFactory.factory(t))}catch(e){return d.Logger.error(e,"GitService.getRemotesCore"),[]}})}getRepoPath(e){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return yield this.getActiveRepoPath();if(e instanceof l.GitUri)return e.repoPath;const t=yield this.getRepository(e);if(void 0!==t)return t.path;const i=yield this.getRepoPathCore("string"==typeof e?e:e.fsPath,!1);if(void 0===i)return;if(void 0!==this._repositoryTree.get(i))return i;const s=this._repositoryTree.findSubstr(i),n=void 0===s?r.workspace.getWorkspaceFolder(r.Uri.file(i)):s.folder;if(void 0!==n){const e=new h.Repository(n,i,!1,this,this.onAnyRepositoryChanged.bind(this),this._suspended);this._repositoryTree.set(i,e),setTimeout(()=>o.__awaiter(this,void 0,void 0,function*(){yield a.setCommandContext(a.CommandContext.HasRepository,this._repositoryTree.any()),this.fireChange(w.Repositories)}),0)}return i})}getRepoPathCore(e,t){return o.__awaiter(this,void 0,void 0,function*(){try{return yield h.Git.revparse_toplevel(t?e:m.dirname(e))}catch(e){return void d.Logger.error(e,"GitService.getRepoPathCore")}})}getRepositories(){return o.__awaiter(this,void 0,void 0,function*(){return(yield this.getRepositoryTree()).values()})}getRepositoryTree(){return o.__awaiter(this,void 0,void 0,function*(){return void 0!==this._repositoriesLoadingPromise&&(yield this._repositoriesLoadingPromise,this._repositoriesLoadingPromise=void 0),this._repositoryTree})}getRepository(e){return o.__awaiter(this,void 0,void 0,function*(){const t=yield this.getRepositoryTree();let i;if("string"==typeof e){const o=t.get(e);if(void 0!==o)return o;i=e}else if(e instanceof l.GitUri){if(e.repoPath){const i=t.get(e.repoPath);if(void 0!==i)return i}i=e.fsPath}else i=e.fsPath;const o=t.findSubstr(i);if(void 0!==o&&(yield this.isTrackedCore(o.path,i)))return o})}getStashList(e){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return;d.Logger.log(`getStashList('${e}')`);const t=yield h.Git.stash_list(e);return h.GitStashParser.parse(t,e)})}getStatusForFile(e,t){return o.__awaiter(this,void 0,void 0,function*(){d.Logger.log(`getStatusForFile('${e}', '${t}')`);const i=h.Git.validateVersion(2,11)?2:1,o=yield h.Git.status_file(e,t,i),s=h.GitStatusParser.parse(o,e,i);if(void 0!==s&&s.files.length)return s.files[0]})}getStatusForRepo(e){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return;d.Logger.log(`getStatusForRepo('${e}')`);const t=h.Git.validateVersion(2,11)?2:1,i=yield h.Git.status(e,t);return h.GitStatusParser.parse(i,e,t)})}getTags(e){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return[];d.Logger.log(`getTags('${e}')`);const t=yield h.Git.tag(e);return h.GitTagParser.parse(t,e)||[]})}getVersionedFile(e,t,i){return o.__awaiter(this,void 0,void 0,function*(){if(d.Logger.log(`getVersionedFile('${e}', '${t}', '${i}')`),!i||h.Git.isUncommitted(i)&&!h.Git.isStagedUncommitted(i)){if(yield this.fileExists(e,t))return t;return}const o=yield h.Git.getVersionedFile(e,t,i);if(void 0===o)return;const s=this.getCacheEntryKey(o),n=new f(new l.GitUri(r.Uri.file(t),{sha:i,repoPath:e}));return this._versionedUriCache.set(s,n),o})}getVersionedFileText(e,t,i){return d.Logger.log(`getVersionedFileText('${e}', '${t}', ${i})`),h.Git.show(e,t,i,{encoding:_.getEncoding(e,t)})}hasGitUriForFile(e){if(void 0===e||void 0===e.document||void 0===e.document.uri)return!1;const t=this.getCacheEntryKey(e.document.uri);return this._versionedUriCache.has(t)}isEditorBlameable(e){return void 0!==e.viewColumn||this.isTrackable(e.document.uri)||this.hasGitUriForFile(e)}isTrackable(e){let t;return(t="string"==typeof e?e:e.scheme)===a.DocumentSchemes.File||t===a.DocumentSchemes.Git||t===a.DocumentSchemes.GitLensGit}isTracked(e,t,i){return o.__awaiter(this,void 0,void 0,function*(){if(i===_.deletedSha)return!1;let o,s;if("string"==typeof e)[s,t]=h.Git.splitPath(e,t),o=this.getCacheEntryKey(e);else{if(!this.isTrackable(e))return!1;s=e.fsPath,t=e.repoPath,i=e.sha,o=this.getCacheEntryKey(s)}void 0!==i&&(o+=`:${i}`),d.Logger.log(`isTracked('${s}', '${t}', '${i}')`);let r=this._trackedCache.get(o);return void 0!==r?"boolean"==typeof r?r:yield r:(r=this.isTrackedCore(void 0===t?"":t,s,i),this._trackedCache.set(o,r),r=yield r,this._trackedCache.set(o,r),r)})}isTrackedCore(e,t,i){return o.__awaiter(this,void 0,void 0,function*(){if(i===_.deletedSha)return!1;try{let o=!!(yield h.Git.ls_files(void 0===e?"":e,t));return o||void 0===i||(o=!!(yield h.Git.ls_files(void 0===e?"":e,t,{ref:i})))||(o=!!(yield h.Git.ls_files(void 0===e?"":e,t,{ref:`${i}^`}))),o}catch(e){return d.Logger.error(e,"GitService.isTrackedCore"),!1}})}getDiffTool(e){return o.__awaiter(this,void 0,void 0,function*(){return(yield h.Git.config_get("diff.guitool",e))||(yield h.Git.config_get("diff.tool",e))})}openDiffTool(e,t,i,s){return o.__awaiter(this,void 0,void 0,function*(){if(!s&&void 0===(s=yield this.getDiffTool(e)))throw new Error("No diff tool found");return d.Logger.log(`openDiffTool('${e}', '${t.fsPath}', ${i}, '${s}')`),h.Git.difftool_fileDiff(e,t.fsPath,s,i)})}openDirectoryDiff(e,t,i,s){return o.__awaiter(this,void 0,void 0,function*(){if(!s&&void 0===(s=yield this.getDiffTool(e)))throw new Error("No diff tool found");return d.Logger.log(`openDirectoryDiff('${e}', '${t}', '${i}', '${s}')`),h.Git.difftool_dirDiff(e,s,t,i)})}resolveReference(e,t,i){return o.__awaiter(this,void 0,void 0,function*(){return _.isResolveRequired(t)?(d.Logger.log(`resolveReference('${e}', '${t}', '${i&&i.toString()}')`),void 0===i?(yield h.Git.revparse(e,t))||t:(yield h.Git.log_resolve(e,h.Git.normalizePath(m.relative(e,i.fsPath)),t))||t):t})}stopWatchingFileSystem(){this._repositoryTree.forEach(e=>e.stopWatchingFileSystem())}stashApply(e,t,i=!1){return d.Logger.log(`stashApply('${e}', '${t}', ${i})`),h.Git.stash_apply(e,t,i)}stashDelete(e,t){return d.Logger.log(`stashDelete('${e}', '${t}')`),h.Git.stash_delete(e,t)}stashSave(e,t,i){if(d.Logger.log(`stashSave('${e}', '${t}', ${i})`),void 0===i)return h.Git.stash_save(e,t);const o=i.map(t=>h.Git.splitPath(t.fsPath,e)[0]);return h.Git.stash_push(e,o,t)}static getEncoding(e,t){const i="string"==typeof e?r.Uri.file(m.join(e,t)):e;return h.Git.getEncoding(r.workspace.getConfiguration("files",i).get("encoding"))}static initialize(e){return h.Git.getGitInfo(e)}static getGitPath(){return h.Git.gitInfo().path}static getGitVersion(){return h.Git.gitInfo().version}static isResolveRequired(e){return h.Git.isResolveRequired(e)}static isSha(e){return h.Git.isSha(e)}static isStagedUncommitted(e){return h.Git.isStagedUncommitted(e)}static isUncommitted(e){return h.Git.isUncommitted(e)}static normalizePath(e){return h.Git.normalizePath(e)}static shortenSha(e){if(void 0!==e)return e===_.deletedSha?"(deleted)":h.Git.isSha(e)||h.Git.isStagedUncommitted(e)?h.Git.shortenSha(e):e}static validateGitVersion(e,t){const[i,o]=this.getGitVersion().split(".");return parseInt(i,10)>=e&&parseInt(o,10)>=t}}_.emptyPromise=Promise.resolve(void 0),_.deletedSha="ffffffffffffffffffffffffffffffffffffffff",_.stagedUncommittedSha=h.Git.stagedUncommittedSha,_.uncommittedSha=h.Git.uncommittedSha,t.GitService=_},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(1);t.ExtensionId="gitlens",t.ExtensionKey=t.ExtensionId,t.ExtensionOutputChannelName="GitLens",t.ExtensionTerminalName="GitLens",t.QualifiedExtensionId=`eamodio.${t.ExtensionId}`,t.ApplicationInsightsKey="a9c302f8-6483-4d01-b92c-c159c799c679";var s;!function(e){e.CloseActiveEditor="workbench.action.closeActiveEditor",e.CloseAllEditors="workbench.action.closeAllEditors",e.CursorMove="cursorMove",e.Diff="vscode.diff",e.EditorScroll="editorScroll",e.ExecuteDocumentSymbolProvider="vscode.executeDocumentSymbolProvider",e.ExecuteCodeLensProvider="vscode.executeCodeLensProvider",e.Open="vscode.open",e.NextEditor="workbench.action.nextEditor",e.PreviewHtml="vscode.previewHtml",e.RevealLine="revealLine",e.SetContext="setContext",e.ShowReferences="editor.action.showReferences"}(s=t.BuiltInCommands||(t.BuiltInCommands={}));!function(e){e.ActiveHasRemote="gitlens:activeHasRemote",e.ActiveIsBlameable="gitlens:activeIsBlameable",e.ActiveFileIsTracked="gitlens:activeIsTracked",e.ActiveIsRevision="gitlens:activeIsRevision",e.AnnotationStatus="gitlens:annotationStatus",e.CanToggleCodeLens="gitlens:canToggleCodeLens",e.Enabled="gitlens:enabled",e.ExplorersCanCompare="gitlens:explorers:canCompare",e.GitExplorer="gitlens:gitExplorer",e.GitExplorerAutoRefresh="gitlens:gitExplorer:autoRefresh",e.GitExplorerView="gitlens:gitExplorer:view",e.HasRemotes="gitlens:hasRemotes",e.HasRepository="gitlens:hasRepository",e.Key="gitlens:key",e.KeyMap="gitlens:keymap",e.ResultsExplorer="gitlens:resultsExplorer",e.ResultsExplorerKeepResults="gitlens:resultsExplorer:keepResults"}(t.CommandContext||(t.CommandContext={})),t.setCommandContext=function(e,t){return o.commands.executeCommand(s.SetContext,e,t)};var r;!function(e){e.DebugConsole="debug",e.File="file",e.Git="git",e.GitLensGit="gitlens-git",e.Output="output"}(r=t.DocumentSchemes||(t.DocumentSchemes={})),t.isTextEditor=function(e){const t=e.document.uri.scheme;return t!==r.Output&&t!==r.DebugConsole};!function(e){e.ArrowBack="↩",e.ArrowDown="↓",e.ArrowDropRight="⤷",e.ArrowLeft="←",e.ArrowLeftRight="↔",e.ArrowRight="→",e.ArrowRightHollow="⇨",e.ArrowUp="↑",e.ArrowUpRight="↗",e.Asterisk="∗",e.Check="✓",e.Dash="—",e.Dot="•",e.DoubleArrowLeft="≪",e.DoubleArrowRight="⋘",e.Ellipsis="…",e.MiddleEllipsis="⋯",e.Pensil="✎",e.Space=" ",e.SquareWithBottomShadow="❏",e.SquareWithTopShadow="❐",e.ZeroWidthSpace="​"}(t.GlyphChars||(t.GlyphChars={}));(t.GlobalState||(t.GlobalState={})).GitLensVersion="gitlensVersion";!function(e){e.GitExplorerAutoRefresh="gitlens:gitExplorer:autoRefresh",e.GitExplorerView="gitlens:gitExplorer:view",e.ResultsExplorerKeepResults="gitlens:resultsExplorer:keepResults"}(t.WorkspaceState||(t.WorkspaceState={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(1),s=i(9),r=i(4),n=`[${r.ExtensionOutputChannelName}]`;var a;!function(e){e.Silent="silent",e.Errors="errors",e.Verbose="verbose"}(a=t.OutputLevel||(t.OutputLevel={}));class c{static configure(e){e.subscriptions.push(s.configuration.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(s.configuration.initializingChangeEvent)}static onConfigurationChanged(e){const t=s.configuration.initializing(e);let i=s.configuration.name("debug").value;(t||s.configuration.changed(e,i))&&(this.debug=s.configuration.get(i)),i=s.configuration.name("outputLevel").value,(t||s.configuration.changed(e,i))&&(this.level=s.configuration.get(i),this.level===a.Silent?void 0!==this.output&&(this.output.dispose(),this.output=void 0):this.output=this.output||o.window.createOutputChannel(r.ExtensionOutputChannelName))}static log(e,...t){this.debug&&console.log(this.timestamp,n,e,...t),void 0!==this.output&&this.level===a.Verbose&&this.output.appendLine((this.debug?[this.timestamp,e,...t]:[e,...t]).join(" "))}static error(e,t,...i){this.debug&&console.error(this.timestamp,n,t,e,...i),void 0!==this.output&&this.level!==a.Silent&&this.output.appendLine((this.debug?[this.timestamp,t,e,...i]:[t,e,...i]).join(" "))}static warn(e,...t){this.debug&&console.warn(this.timestamp,n,e,...t),void 0!==this.output&&this.level!==a.Silent&&this.output.appendLine((this.debug?[this.timestamp,e,...t]:[e,...t]).join(" "))}static get timestamp(){const e=new Date;return`[${e.toISOString().replace(/T/," ").replace(/\..+/,"")}:${("00"+e.getUTCMilliseconds()).slice(-3)}]`}}c.debug=!1,c.level=a.Silent,t.Logger=c},function(e,t,i){"use strict";function o(e){return void 0!==e&&(void 0!==e.id&&(void 0!==e.handle||void 0!==e.label||void 0!==e.resourceStates))}function s(e){return void 0!==e&&void 0!==e.resourceUri}Object.defineProperty(t,"__esModule",{value:!0});const r=i(0),n=i(1),a=i(19),c=i(3),h=i(5);!function(e){e.ClearFileAnnotations="gitlens.clearFileAnnotations",e.CloseUnchangedFiles="gitlens.closeUnchangedFiles",e.CopyMessageToClipboard="gitlens.copyMessageToClipboard",e.CopyShaToClipboard="gitlens.copyShaToClipboard",e.DiffDirectory="gitlens.diffDirectory",e.ExternalDiffAll="gitlens.externalDiffAll",e.DiffWith="gitlens.diffWith",e.DiffWithBranch="gitlens.diffWithBranch",e.DiffWithNext="gitlens.diffWithNext",e.DiffWithPrevious="gitlens.diffWithPrevious",e.DiffLineWithPrevious="gitlens.diffLineWithPrevious",e.DiffWithRevision="gitlens.diffWithRevision",e.DiffWithWorking="gitlens.diffWithWorking",e.DiffLineWithWorking="gitlens.diffLineWithWorking",e.ExternalDiff="gitlens.externalDiff",e.ExplorersOpenDirectoryDiff="gitlens.explorers.openDirectoryDiff",e.ExplorersOpenDirectoryDiffWithWorking="gitlens.explorers.openDirectoryDiffWithWorking",e.OpenChangedFiles="gitlens.openChangedFiles",e.OpenBranchesInRemote="gitlens.openBranchesInRemote",e.OpenBranchInRemote="gitlens.openBranchInRemote",e.OpenCommitInRemote="gitlens.openCommitInRemote",e.OpenFileInRemote="gitlens.openFileInRemote",e.OpenFileRevision="gitlens.openFileRevision",e.OpenInRemote="gitlens.openInRemote",e.OpenRepoInRemote="gitlens.openRepoInRemote",e.OpenWorkingFile="gitlens.openWorkingFile",e.ResetSuppressedWarnings="gitlens.resetSuppressedWarnings",e.ShowCommitSearch="gitlens.showCommitSearch",e.ShowFileBlame="gitlens.showFileBlame",e.ShowLastQuickPick="gitlens.showLastQuickPick",e.ShowLineBlame="gitlens.showLineBlame",e.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",e.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ShowQuickBranchHistory="gitlens.showQuickBranchHistory",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickRepoStatus="gitlens.showQuickRepoStatus",e.ShowQuickStashList="gitlens.showQuickStashList",e.StashApply="gitlens.stashApply",e.StashDelete="gitlens.stashDelete",e.StashSave="gitlens.stashSave",e.ToggleCodeLens="gitlens.toggleCodeLens",e.ToggleFileBlame="gitlens.toggleFileBlame",e.ToggleFileRecentChanges="gitlens.toggleFileRecentChanges",e.ToggleLineBlame="gitlens.toggleLineBlame"}(t.Commands||(t.Commands={})),t.getCommandUri=function(e,t){if(e instanceof n.Uri)return e;if(void 0!==t&&void 0!==t.document)return t.document.uri},t.isCommandViewContextWithBranch=function(e){return"view"===e.type&&e.node.branch&&e.node.branch instanceof c.GitBranch},t.isCommandViewContextWithCommit=function(e){return"view"===e.type&&e.node.commit&&e.node.commit instanceof c.GitCommit},t.isCommandViewContextWithRef=function(e){return"view"===e.type&&e.node instanceof a.ExplorerRefNode},t.isCommandViewContextWithRemote=function(e){return"view"===e.type&&e.node.remote&&e.node.remote instanceof c.GitRemote};class l extends n.Disposable{constructor(e){if(super(()=>this.dispose()),this.contextParsingOptions={editor:!1,uri:!1},"string"==typeof e)return void(this._disposable=n.commands.registerCommand(e,(...t)=>this._execute(e,...t),this));const t=e.map(e=>n.commands.registerCommand(e,(...t)=>this._execute(e,...t),this));this._disposable=n.Disposable.from(...t)}static getMarkdownCommandArgsCore(e,t){return`command:${e}?${encodeURIComponent(JSON.stringify(t))}`}dispose(){this._disposable&&this._disposable.dispose()}preExecute(e,...t){return r.__awaiter(this,void 0,void 0,function*(){return this.execute(...t)})}_execute(e,...t){const[i,o]=l.parseContext(e,this.contextParsingOptions,...t);return this.preExecute(i,...o)}static parseContext(e,t,...i){let r=void 0,c=i[0];if(t.editor&&(void 0===c||function(e){return void 0!==e&&void 0!==e.id&&(void 0!==e.edit||void 0!==e.document)}(c))&&(r=c,c=(i=i.slice(1))[0]),t.uri&&(void 0===c||c instanceof n.Uri)){const[t,...o]=i;return[{command:e,type:"uri",editor:r,uri:t},o]}if(c instanceof a.ExplorerNode){const[t,...o]=i;return[{command:e,type:"view",node:t,uri:t.uri},o]}if(s(c)){const t=[];let o=0;for(const e of i){if(!s(e))break;o++,t.push(e)}return[{command:e,type:"scm-states",scmResourceStates:t,uri:t[0].resourceUri},i.slice(o)]}if(o(c)){const t=[];let s=0;for(const e of i){if(!o(e))break;s++,t.push(e)}return[{command:e,type:"scm-groups",scmResourceGroups:t},i.slice(s)]}return[{command:e,type:"unknown",editor:r},i]}}t.Command=l;class d extends l{constructor(e){super(e),this.contextParsingOptions={editor:!0,uri:!0}}preExecute(e,...t){return r.__awaiter(this,void 0,void 0,function*(){return this.execute(e.editor,e.uri,...t)})}_execute(e,...t){return super._execute(e,n.window.activeTextEditor,...t)}}t.ActiveEditorCommand=d;let u=void 0;t.getLastCommand=function(){return u};t.ActiveEditorCachedCommand=class extends d{constructor(e){super(e)}_execute(e,...t){return u={command:e,args:t},super._execute(e,...t)}};t.EditorCommand=class extends n.Disposable{constructor(e){super(()=>this.dispose()),Array.isArray(e)||(e=[e]);const t=[];for(const i of e)t.push(n.commands.registerTextEditorCommand(i,(e,t,...o)=>this.executeCore(i,e,t,...o),this));this._disposable=n.Disposable.from(...t)}dispose(){this._disposable&&this._disposable.dispose()}executeCore(e,t,i,...o){return this.execute(t,i,...o)}},t.openEditor=function(e,t={}){return r.__awaiter(this,void 0,void 0,function*(){const{rethrow:i}=t,o=r.__rest(t,["rethrow"]);try{e instanceof c.GitUri&&(e=e.fileUri(!1));const t=yield n.workspace.openTextDocument(e);return n.window.showTextDocument(t,Object.assign({preserveFocus:!1,preview:!0,viewColumn:n.window.activeTextEditor&&n.window.activeTextEditor.viewColumn||1},o))}catch(e){if(i)throw e;return void h.Logger.error(e,"openEditor")}})}},function(e,t){e.exports=require("path")},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(1),s=i(4),r=i(3);!function(e){e.ActiveEditorChanged="active-editor-changed",e.AutoRefreshChanged="auto-refresh-changed",e.Command="command",e.ConfigurationChanged="configuration",e.NodeCommand="node-command",e.RepoChanged="repo-changed",e.ViewChanged="view-changed",e.VisibleEditorsChanged="visible-editors-changed"}(t.RefreshReason||(t.RefreshReason={}));var n;!function(e){e.Branch="gitlens:branch",e.BranchWithTracking="gitlens:branch:tracking",e.Branches="gitlens:branches",e.BranchesWithRemotes="gitlens:branches:remotes",e.CurrentBranch="gitlens:current-branch",e.CurrentBranchWithTracking="gitlens:current-branch:tracking",e.RemoteBranch="gitlens:remote-branch",e.Commit="gitlens:commit",e.CommitOnCurrentBranch="gitlens:commit:current",e.CommitFile="gitlens:commit-file",e.Commits="gitlens:commits",e.ComparisonResults="gitlens:comparison-results",e.FileHistory="gitlens:file-history",e.Folder="gitlens:folder",e.History="gitlens:history",e.Message="gitlens:message",e.Pager="gitlens:pager",e.Remote="gitlens:remote",e.Remotes="gitlens:remotes",e.Repositories="gitlens:repositories",e.Repository="gitlens:repository",e.Results="gitlens:results",e.SearchResults="gitlens:search-results",e.Stash="gitlens:stash",e.StashFile="gitlens:stash-file",e.Stashes="gitlens:stashes",e.Status="gitlens:status",e.StatusFile="gitlens:status-file",e.StatusFiles="gitlens:status-files",e.StatusFileCommits="gitlens:status-file-commits",e.StatusUpstream="gitlens:status-upstream",e.Tag="gitlens:tag",e.Tags="gitlens:tags"}(n=t.ResourceType||(t.ResourceType={}));class a extends o.Disposable{constructor(e){super(()=>this.dispose()),this.uri=e,this.supportsPaging=!1}dispose(){void 0!==this.disposable&&(this.disposable.dispose(),this.disposable=void 0),this.resetChildren()}getCommand(){}refresh(){}resetChildren(){void 0!==this.children&&(this.children.forEach(e=>e.dispose()),this.children=void 0)}}t.ExplorerNode=a;t.ExplorerRefNode=class extends a{get repoPath(){return this.uri.repoPath}};t.MessageNode=class extends a{constructor(e){super(new r.GitUri),this.message=e}getChildren(){return[]}getTreeItem(){const e=new o.TreeItem(this.message,o.TreeItemCollapsibleState.None);return e.contextValue=n.Message,e}};class c extends a{constructor(e,t,i){super(new r.GitUri),this.message=e,this.node=t,this.explorer=i,this.args={}}getChildren(){return[]}getTreeItem(){const e=new o.TreeItem(this.message,o.TreeItemCollapsibleState.None);return e.contextValue=n.Pager,e.command=this.getCommand(),e.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-unfold.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-unfold.svg")},e}getCommand(){return{title:"Refresh",command:this.explorer.getQualifiedCommand("refreshNode"),arguments:[this.node,this.args]}}}t.PagerNode=c;t.ShowAllNode=class extends c{constructor(e,t,i){super(`${e} ${s.GlyphChars.Space}${s.GlyphChars.Dash}${s.GlyphChars.Space} this may take a while`,t,i),this.args={maxCount:0}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(2),s=i(1),r=i(4);t.ExtensionKey=r.ExtensionKey;const n=i(25);var a;!function(e){e.DiffWithPrevious="gitlens.diffWithPrevious",e.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",e.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ToggleFileBlame="gitlens.toggleFileBlame"}(a=t.CodeLensCommand||(t.CodeLensCommand={}));!function(e){e.Document="document",e.Containers="containers",e.Blocks="blocks"}(t.CodeLensLocations||(t.CodeLensLocations={}));!function(e){e.Gutter="gutter",e.Line="line",e.OverviewRuler="overviewRuler"}(t.LineHighlightLocations||(t.LineHighlightLocations={}));!function(e){e.Bitbucket="Bitbucket",e.BitbucketServer="BitbucketServer",e.Custom="Custom",e.GitHub="GitHub",e.GitLab="GitLab"}(t.CustomRemoteType||(t.CustomRemoteType={}));var c;!function(e){e.Auto="auto",e.List="list",e.Tree="tree"}(c=t.ExplorerFilesLayout||(t.ExplorerFilesLayout={}));!function(e){e.Faces="wavatar",e.Geometric="identicon",e.Monster="monsterid",e.MysteryMan="mm",e.Retro="retro",e.Robot="robohash"}(t.GravatarDefault||(t.GravatarDefault={}));!function(e){e.Standard="standard",e.Chorded="chorded",e.None="none"}(t.KeyMap||(t.KeyMap={}));var h;!function(e){e.DiffWithPrevious="gitlens.diffWithPrevious",e.DiffWithWorking="gitlens.diffWithWorking",e.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",e.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ToggleCodeLens="gitlens.toggleCodeLens",e.ToggleFileBlame="gitlens.toggleFileBlame"}(h=t.StatusBarCommand||(t.StatusBarCommand={}));const l={annotations:{file:{gutter:{format:"",dateFormat:null,compact:!1,heatmap:{enabled:!1,location:"left"},hover:{details:!1,changes:!1,wholeLine:!1},separateLines:!1},hover:{details:!1,changes:!1,heatmap:{enabled:!1}},recentChanges:{hover:{details:!1,changes:!1}}},line:{hover:{details:!1,changes:!1},trailing:{format:"",dateFormat:null,hover:{details:!1,changes:!1,wholeLine:!1}}}},blame:{ignoreWhitespace:!1,file:{annotationType:"gutter",lineHighlight:{enabled:!1,locations:[]}},line:{enabled:!1,annotationType:"trailing"}},recentChanges:{file:{lineHighlight:{locations:[]}}},codeLens:{enabled:!1,recentChange:{enabled:!1,command:a.DiffWithPrevious},authors:{enabled:!1,command:a.DiffWithPrevious},locations:[],customLocationSymbols:[],perLanguageLocations:[],debug:!1},defaultDateFormat:null,gitExplorer:{autoRefresh:!1,enabled:!1,files:{layout:c.Auto,compact:!1,threshold:0},commitFormat:"",commitFileFormat:"",gravatars:!1,gravatarsDefault:"robohash",includeWorkingTree:!1,showTrackingBranch:!1,stashFormat:"",stashFileFormat:"",statusFileFormat:"",view:n.GitExplorerView.Auto},keymap:"standard",remotes:[],resultsExplorer:{files:{layout:c.Auto,compact:!1,threshold:0},commitFormat:"",commitFileFormat:"",gravatars:!1,gravatarsDefault:"robohash",showTrackingBranch:!1,stashFormat:"",stashFileFormat:"",statusFileFormat:""},statusBar:{enabled:!1,alignment:"left",command:h.DiffWithPrevious,format:"",dateFormat:null},strings:{codeLens:{unsavedChanges:{recentChangeAndAuthors:"",recentChangeOnly:"",authorsOnly:""}}},debug:!1,insiders:!1,outputLevel:"verbose",advanced:{caching:{enabled:!1,maxLines:0},git:"",maxQuickHistory:0,menus:{explorerContext:{fileDiff:!1,history:!1,remote:!1},editorContext:{blame:!1,copy:!1,details:!1,fileDiff:!1,history:!1,lineDiff:!1,remote:!1},editorTitle:{blame:!1,fileDiff:!1,history:!1,status:!1},editorTitleContext:{blame:!1,fileDiff:!1,history:!1,remote:!1}},messages:{suppressCommitHasNoPreviousCommitWarning:!1,suppressCommitNotFoundWarning:!1,suppressFileNotUnderSourceControlWarning:!1,suppressGitVersionWarning:!1,suppressLineUncommittedWarning:!1,suppressNoRepositoryWarning:!1,suppressUpdateNotice:!1,suppressWelcomeNotice:!1},quickPick:{closeOnFocusOut:!1},repositorySearchDepth:0,telemetry:{enabled:!1}}};class d{constructor(){this._onDidChange=new s.EventEmitter,this.initializingChangeEvent={affectsConfiguration:(e,t)=>!1}}static configure(e){e.subscriptions.push(s.workspace.onDidChangeConfiguration(t.configuration.onConfigurationChanged,t.configuration))}get onDidChange(){return this._onDidChange.event}onConfigurationChanged(e){e.affectsConfiguration(r.ExtensionKey,null)&&this._onDidChange.fire(e)}get(e,t){return s.workspace.getConfiguration(void 0===e?void 0:r.ExtensionKey,t).get(void 0===e?r.ExtensionKey:e)}changed(e,t,i){return e.affectsConfiguration(`${r.ExtensionKey}.${t}`,i)}initializing(e){return e===this.initializingChangeEvent}name(e){return o.Functions.propOf(l,e)}update(e,t,i){return s.workspace.getConfiguration(r.ExtensionKey).update(e,t,i)}}t.Configuration=d,t.configuration=new d},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(4),n=i(5),a=i(9);var c;!function(e){e.CommitHasNoPreviousCommitWarning="suppressCommitHasNoPreviousCommitWarning",e.CommitNotFoundWarning="suppressCommitNotFoundWarning",e.FileNotUnderSourceControlWarning="suppressFileNotUnderSourceControlWarning",e.GitVersionWarning="suppressGitVersionWarning",e.LineUncommittedWarning="suppressLineUncommittedWarning",e.NoRepositoryWarning="suppressNoRepositoryWarning",e.UpdateNotice="suppressUpdateNotice",e.WelcomeNotice="suppressWelcomeNotice"}(c=t.SuppressedMessages||(t.SuppressedMessages={}));class h{static showCommitHasNoPreviousCommitWarningMessage(e){return void 0===e?h.showMessage("info","Commit has no previous commit",c.CommitHasNoPreviousCommitWarning):h.showMessage("info",`Commit ${e.shortSha} (${e.author}, ${e.fromNow()}) has no previous commit`,c.CommitHasNoPreviousCommitWarning)}static showCommitNotFoundWarningMessage(e){return h.showMessage("warn",`${e}. The commit could not be found`,c.CommitNotFoundWarning)}static showFileNotUnderSourceControlWarningMessage(e){return h.showMessage("warn",`${e}. The file is probably not under source control`,c.FileNotUnderSourceControlWarning)}static showLineUncommittedWarningMessage(e){return h.showMessage("warn",`${e}. The line has uncommitted changes`,c.LineUncommittedWarning)}static showNoRepositoryWarningMessage(e){return h.showMessage("warn",`${e}. No repository could be found`,c.NoRepositoryWarning)}static showUnsupportedGitVersionErrorMessage(e){return h.showMessage("error",`GitLens requires a newer version of Git (>= 2.2.0) than is currently installed (${e}). Please install a more recent version of Git.`,c.GitVersionWarning)}static showUpdateMessage(e){return o.__awaiter(this,void 0,void 0,function*(){const t="View Release Notes",i=yield h.showMessage("info",`GitLens has been updated to v${e}`,c.UpdateNotice,void 0,t);return i===t&&s.commands.executeCommand(r.BuiltInCommands.Open,s.Uri.parse("https://marketplace.visualstudio.com/items/eamodio.gitlens/changelog")),i})}static showWelcomeMessage(){return o.__awaiter(this,void 0,void 0,function*(){const e=yield h.showMessage("info","Thank you for choosing GitLens! GitLens is powerful, feature rich, and highly configurable, so please be sure to view the docs and tailor it to suit your needs.",c.WelcomeNotice,null,"View Docs");return"View Docs"===e&&s.commands.executeCommand(r.BuiltInCommands.Open,s.Uri.parse("https://marketplace.visualstudio.com/items/eamodio.gitlens")),e})}static showMessage(e,t,i,r="Don't Show Again",...c){return o.__awaiter(this,void 0,void 0,function*(){if(n.Logger.log(`ShowMessage(${e}, '${t}', ${i}, ${r})`),a.configuration.get(a.configuration.name("advanced")("messages")(i).value))return void n.Logger.log(`ShowMessage(${e}, ${t}, ${i}, ${r}) skipped`);null!==r&&c.push(r);let o=void 0;switch(e){case"info":o=yield s.window.showInformationMessage(t,...c);break;case"warn":o=yield s.window.showWarningMessage(t,...c);break;case"error":o=yield s.window.showErrorMessage(t,...c)}if(null===r||o===r){n.Logger.log(`ShowMessage(${e}, '${t}', ${i}, ${r}) don't show again requested`);const c=a.configuration.name("advanced")("messages").value,h=a.configuration.get(c);if(h[i]=!0,yield a.configuration.update(c,h,s.ConfigurationTarget.Global),o===r)return}return n.Logger.log(`ShowMessage(${e}, '${t}', ${i}, ${r}) returned ${o}`),o})}}t.Messages=h},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1);o.__exportStar(i(6),t),o.__exportStar(i(100),t),o.__exportStar(i(101),t),o.__exportStar(i(103),t),o.__exportStar(i(104),t),o.__exportStar(i(105),t),o.__exportStar(i(115),t),o.__exportStar(i(116),t),o.__exportStar(i(117),t),o.__exportStar(i(118),t),o.__exportStar(i(119),t),o.__exportStar(i(120),t),o.__exportStar(i(121),t),o.__exportStar(i(122),t),o.__exportStar(i(123),t),o.__exportStar(i(124),t),o.__exportStar(i(125),t),o.__exportStar(i(126),t),o.__exportStar(i(127),t),o.__exportStar(i(128),t),o.__exportStar(i(129),t),o.__exportStar(i(130),t),o.__exportStar(i(131),t),o.__exportStar(i(132),t),o.__exportStar(i(133),t),o.__exportStar(i(134),t),o.__exportStar(i(135),t),o.__exportStar(i(136),t),o.__exportStar(i(137),t),o.__exportStar(i(138),t),o.__exportStar(i(139),t),o.__exportStar(i(140),t),o.__exportStar(i(141),t),o.__exportStar(i(142),t),o.__exportStar(i(143),t),o.__exportStar(i(144),t),o.__exportStar(i(145),t),o.__exportStar(i(146),t),o.__exportStar(i(147),t),o.__exportStar(i(148),t),o.__exportStar(i(149),t),o.__exportStar(i(150),t),o.__exportStar(i(151),t);const r=i(11);t.configureCommands=function(e,t,i,o,n){e.subscriptions.push(s.commands.registerTextEditorCommand("gitlens.computingFileAnnotations",()=>{})),e.subscriptions.push(new r.CloseUnchangedFilesCommand(t)),e.subscriptions.push(new r.OpenChangedFilesCommand(t)),e.subscriptions.push(new r.ExternalDiffCommand(t)),e.subscriptions.push(new r.CopyMessageToClipboardCommand(t)),e.subscriptions.push(new r.CopyShaToClipboardCommand(t)),e.subscriptions.push(new r.DiffDirectoryCommand(t)),e.subscriptions.push(new r.DiffLineWithPreviousCommand(t)),e.subscriptions.push(new r.DiffLineWithWorkingCommand(t)),e.subscriptions.push(new r.DiffWithCommand(t)),e.subscriptions.push(new r.DiffWithBranchCommand(t)),e.subscriptions.push(new r.DiffWithNextCommand(t)),e.subscriptions.push(new r.DiffWithPreviousCommand(t)),e.subscriptions.push(new r.DiffWithRevisionCommand(t)),e.subscriptions.push(new r.DiffWithWorkingCommand(t)),e.subscriptions.push(new r.OpenBranchesInRemoteCommand(t)),e.subscriptions.push(new r.OpenBranchInRemoteCommand(t)),e.subscriptions.push(new r.OpenCommitInRemoteCommand(t)),e.subscriptions.push(new r.OpenFileInRemoteCommand(t)),e.subscriptions.push(new r.OpenFileRevisionCommand(i,t)),e.subscriptions.push(new r.OpenInRemoteCommand),e.subscriptions.push(new r.OpenRepoInRemoteCommand(t)),e.subscriptions.push(new r.OpenWorkingFileCommand(i,t)),e.subscriptions.push(new r.ClearFileAnnotationsCommand(i)),e.subscriptions.push(new r.ShowFileBlameCommand(i)),e.subscriptions.push(new r.ShowLineBlameCommand(o)),e.subscriptions.push(new r.ToggleFileBlameCommand(i)),e.subscriptions.push(new r.ToggleFileRecentChangesCommand(i)),e.subscriptions.push(new r.ToggleLineBlameCommand(o)),e.subscriptions.push(new r.ResetSuppressedWarningsCommand),e.subscriptions.push(new r.ShowLastQuickPickCommand),e.subscriptions.push(new r.ShowQuickBranchHistoryCommand(t)),e.subscriptions.push(new r.ShowQuickCurrentBranchHistoryCommand(t)),e.subscriptions.push(new r.ShowQuickCommitDetailsCommand(t)),e.subscriptions.push(new r.ShowQuickCommitFileDetailsCommand(t)),e.subscriptions.push(new r.ShowCommitSearchCommand(t)),e.subscriptions.push(new r.ShowQuickFileHistoryCommand(t)),e.subscriptions.push(new r.ShowQuickRepoStatusCommand(t)),e.subscriptions.push(new r.ShowQuickStashListCommand(t)),e.subscriptions.push(new r.StashApplyCommand(t)),e.subscriptions.push(new r.StashDeleteCommand(t)),e.subscriptions.push(new r.StashSaveCommand(t)),e.subscriptions.push(new r.ToggleCodeLensCommand(n))}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0);o.__exportStar(i(16),t),o.__exportStar(i(106),t),o.__exportStar(i(45),t),o.__exportStar(i(107),t),o.__exportStar(i(108),t),o.__exportStar(i(109),t),o.__exportStar(i(110),t),o.__exportStar(i(111),t),o.__exportStar(i(21),t),o.__exportStar(i(112),t),o.__exportStar(i(113),t),o.__exportStar(i(114),t)},function(e,t,i){"use strict";function o(e,...t){return n.__awaiter(this,void 0,void 0,function*(){try{return yield s(e,...t)}catch(i){return r(i,e,...t)}})}function s(e,...t){return n.__awaiter(this,void 0,void 0,function*(){t.splice(0,0,"-c","core.quotepath=false","-c","color.ui=false");const i=e.encoding||"utf8",o=Object.assign({},e,{encoding:"utf8"===i?"utf8":"binary",env:Object.assign({},e.env||process.env,{GCM_INTERACTIVE:"NEVER",GCM_PRESERVE_CREDS:"TRUE"})}),s=`(${o.cwd}): git ${t.join(" ")}`;let r=w.get(s);void 0===r?(h.Logger.log(`Running${s}`),r=l.runCommand(p.path,t,o),w.set(s,r)):h.Logger.log(`Awaiting${s}`);let n;try{n=yield r}finally{w.delete(s),h.Logger.log(`Completed${s}`)}return"utf8"===i||"binary"===i?n:u.decode(Buffer.from(n,"binary"),i)})}function r(e,t,...i){const o=e&&e.toString();if(o)for(const e of y)if(e.test(o))return h.Logger.warn("git",...i,`  cwd='${t.cwd}'`,`\n  ${o.replace(/\r?\n|\r/g," ")}`),"";throw h.Logger.error(e,"git",...i,`  cwd='${t.cwd}'`,o&&`\n  ${o.replace(/\r?\n|\r/g," ")}`),e}Object.defineProperty(t,"__esModule",{value:!0});const n=i(0),a=i(2),c=i(79),h=i(5),l=i(36),d=i(27),u=i(81),m=i(7),g=i(82);n.__exportStar(i(37),t),n.__exportStar(i(90),t),n.__exportStar(i(91),t),n.__exportStar(i(38),t),n.__exportStar(i(92),t),n.__exportStar(i(93),t),n.__exportStar(i(94),t),n.__exportStar(i(95),t),n.__exportStar(i(96),t),n.__exportStar(i(15),t);let p;const f=["blame","--root","--incremental"],v=["log","--name-status","--full-history","-M","--format=%H -%nauthor %an%nauthor-email %ae%nauthor-date %at%nparents %P%nsummary %B%nfilename ?"],C=["stash","list","--name-status","--full-history","-M","--format=%H -%nauthor-date %at%nreflog-selector %gd%nsummary %B%nfilename ?"],y=[/Not a git repository/,/is outside repository/,/no such path/,/does not have any commits/,/Path \'.*?\' does not exist in/,/Path \'.*?\' exists on disk, but not in/,/no upstream configured for branch/,/ambiguous argument '.*?': unknown revision or path not in the working tree/],w=new Map;class _{static gitInfo(){return p}static getEncoding(e){return void 0!==e&&u.encodingExists(e)?e:"utf8"}static getGitInfo(e){return n.__awaiter(this,void 0,void 0,function*(){const t=process.hrtime();p=yield c.findGitPath(e);const i=process.hrtime(t);return h.Logger.log(`Git found: ${p.version} @ ${"git"===p.path?"PATH":p.path} in ${1e3*i[0]+Math.floor(i[1]/1e6)} ms`),p})}static getVersionedFile(e,t,i){return n.__awaiter(this,void 0,void 0,function*(){const o=yield _.show(e,t,i,{encoding:"binary"});if(void 0===o)return;_.isStagedUncommitted(i)&&(i="");const s=a.Strings.truncate(a.Strings.sanitizeForFileSystem(_.isSha(i)?_.shortenSha(i):i),50,""),r=m.extname(t);return new Promise((n,a)=>{g.file({prefix:`${m.basename(t,r)}-${s}__`,postfix:r},(s,r,c,l)=>{s?a(s):(h.Logger.log(`getVersionedFile[${r}]('${e}', '${t}', ${i})`),d.appendFile(r,o,{encoding:"binary"},e=>{e?a(e):n(r)}))})})})}static isResolveRequired(e){return _.isSha(e)&&!_.shaStrictRegex.test(e)}static isSha(e){return _.shaRegex.test(e)}static isStagedUncommitted(e){return void 0!==e&&_.stagedUncommittedRegex.test(e)}static isUncommitted(e){return void 0!==e&&_.uncommittedRegex.test(e)}static normalizePath(e){return e&&e.replace(/\\/g,"/")}static shortenSha(e){if(_.isStagedUncommitted(e))return"index";if(_.isUncommitted(e))return"";const t=e.indexOf("^");if(t>6){const i=e.substring(t).substring(0,5);return`${e.substring(0,8-i.length)}${i}`}return e.substring(0,8)}static splitPath(e,t,i=!0){if(t){e=this.normalizePath(e);const i=((t=this.normalizePath(t)).endsWith("/")?t:`${t}/`).toLowerCase();e.toLowerCase().startsWith(i)&&(e=e.substring(i.length))}else t=this.normalizePath(i?m.dirname(e):t),e=this.normalizePath(i?m.basename(e):e);return[e,t]}static validateVersion(e,t){const[i,o]=p.version.split(".");return parseInt(i,10)>=e&&parseInt(o,10)>=t}static blame(e,t,i,s={}){return n.__awaiter(this,void 0,void 0,function*(){const[r,n]=_.splitPath(t,e),a=[...f];s.ignoreWhitespace&&a.push("-w"),null!=s.startLine&&null!=s.endLine&&a.push(`-L ${s.startLine},${s.endLine}`);let c;return i&&(_.isStagedUncommitted(i)?(a.push("--contents"),a.push("-"),c=yield _.show(e,t,":")):a.push(i)),o({cwd:n,stdin:c},...a,"--",r)})}static branch(e,t={all:!1}){const i=["branch","-vv"];return t.all&&i.push("-a"),o({cwd:e},...i)}static checkout(e,t,i){const[s,r]=_.splitPath(t,e);return o({cwd:r},"checkout",i,"--",s)}static config_get(e,t){return n.__awaiter(this,void 0,void 0,function*(){try{return(yield s({cwd:t||""},"config","--get",e)).trim()}catch(e){return}})}static diff(e,t,i,s,r={}){const n=["diff","--diff-filter=M","-M","--no-ext-diff"];i&&n.push(_.isStagedUncommitted(i)?"--staged":i),s&&n.push(_.isStagedUncommitted(s)?"--staged":s);return o({cwd:e,encoding:"utf8"===r.encoding?"utf8":"binary"},...n,"--",t)}static diff_nameStatus(e,t,i,s={}){const r=["diff","--name-status","-M","--no-ext-diff"];return s&&s.filter&&r.push(`--diff-filter=${s.filter}`),t&&r.push(t),i&&r.push(i),o({cwd:e},...r)}static diff_shortstat(e,t){const i=["diff","--shortstat","--no-ext-diff"];return t&&i.push(t),o({cwd:e},...i)}static difftool_dirDiff(e,t,i,s){const r=["difftool","--dir-diff",`--tool=${t}`,i];return s&&r.push(s),o({cwd:e},...r)}static difftool_fileDiff(e,t,i,s){const r=["difftool","--no-prompt",`--tool=${i}`];return s&&r.push("--staged"),r.push("--"),r.push(t),o({cwd:e},...r)}static log(e,t){const i=[...v,"-m"];return t.maxCount&&!t.reverse&&i.push(`-n${t.maxCount}`),t.ref&&!_.isStagedUncommitted(t.ref)&&(t.reverse?(i.push("--reverse"),i.push("--ancestry-path"),i.push(`${t.ref}..HEAD`)):i.push(t.ref)),o({cwd:e},...i)}static log_file(e,t,i={reverse:!1,skipMerges:!1}){const[s,r]=_.splitPath(t,e),n=[...v,"--follow"];return i.maxCount&&!i.reverse&&n.push(`-n${i.maxCount}`),i.skipMerges||!i.ref||i.maxCount>2?n.push("--no-merges"):n.push("-m"),i.ref&&!_.isStagedUncommitted(i.ref)&&(i.reverse?(n.push("--reverse"),n.push("--ancestry-path"),n.push(`${i.ref}..HEAD`)):n.push(i.ref)),null!=i.startLine&&null!=i.endLine&&n.push(`-L ${i.startLine},${i.endLine}:${s}`),n.push("--"),n.push(s),o({cwd:r},...n)}static log_resolve(e,t,i){return n.__awaiter(this,void 0,void 0,function*(){try{return(yield s({cwd:e},"log","--full-history","-M","-n1","--no-merges","--format=%H",i,"--",t)).trim()}catch(e){return}})}static log_search(e,t=[],i={}){const s=[...v,"-m","-i"];return i.maxCount&&s.push(`-n${i.maxCount}`),o({cwd:e},...s,...t)}static log_shortstat(e,t){const i=["log","--shortstat","--oneline"];return t.ref&&!_.isStagedUncommitted(t.ref)&&i.push(t.ref),o({cwd:e},...i)}static ls_files(e,t,i={}){return n.__awaiter(this,void 0,void 0,function*(){const o=["ls-files"];i.ref&&!_.isStagedUncommitted(i.ref)&&o.push(`--with-tree=${i.ref}`);try{return(yield s({cwd:e},...o,t)).trim()}catch(e){return""}})}static remote(e){return o({cwd:e},"remote","-v")}static remote_url(e,t){return o({cwd:e},"remote","get-url",t)}static revparse(e,t){return n.__awaiter(this,void 0,void 0,function*(){try{return(yield s({cwd:e},"rev-parse",t)).trim()}catch(e){return}})}static revparse_currentBranch(e){return n.__awaiter(this,void 0,void 0,function*(){const t=["rev-parse","--abbrev-ref","--symbolic-full-name","@","@{u}"],i={cwd:e};try{return yield s(i,...t)}catch(e){const o=e&&e.toString();if(/HEAD does not point to a branch/.test(o))return;if(/no upstream configured for branch/.test(o))return e.message.split("\n")[0];if(/ambiguous argument '.*?': unknown revision or path not in the working tree/.test(o))try{return yield s(i,...["symbolic-ref","-q","--short","HEAD"])}catch(e){return}return r(e,i,...t)}})}static revparse_toplevel(e){return n.__awaiter(this,void 0,void 0,function*(){try{return(yield s({cwd:e},"rev-parse","--show-toplevel")).trim()}catch(e){return}})}static show(e,t,i,o={}){return n.__awaiter(this,void 0,void 0,function*(){const[n,a]=_.splitPath(t,e);if(_.isStagedUncommitted(i)&&(i=":"),_.isUncommitted(i))throw new Error(`sha=${i} is uncommitted`);const c={cwd:a,encoding:o.encoding||"utf8"},h=i.endsWith(":")?`${i}./${n}`:`${i}:./${n}`;try{return yield s(c,"show",h)}catch(e){const t=e&&e.toString();if(/Path \'.*?\' does not exist in/.test(t)||/Path \'.*?\' exists on disk, but not in /.test(t))return;return r(e,c,h)}})}static stash_apply(e,t,i){if(t)return o({cwd:e},"stash",i?"pop":"apply",t)}static stash_delete(e,t){if(t)return o({cwd:e},"stash","drop",t)}static stash_list(e){return o({cwd:e},...C)}static stash_push(e,t,i){const s=["stash","push","-u"];return i&&(s.push("-m"),s.push(i)),s.splice(s.length,0,"--",...t),o({cwd:e},...s)}static stash_save(e,t){const i=["stash","save","-u"];return t&&i.push(t),o({cwd:e},...i)}static status(e,t=1){const i=t>=2?`--porcelain=v${t}`:"--porcelain";return o({cwd:e,env:Object.assign({},process.env,{GIT_OPTIONAL_LOCKS:"0"})},"status",i,"--branch","-u")}static status_file(e,t,i=1){const[s,r]=_.splitPath(t,e),n=i>=2?`--porcelain=v${i}`:"--porcelain";return o({cwd:r,env:Object.assign({},process.env,{GIT_OPTIONAL_LOCKS:"0"})},"status",n,s)}static tag(e){return o({cwd:e},...["tag","-l"])}}_.shaRegex=/^[0-9a-f]{40}(\^[0-9]*?)??( -)?$/,_.shaStrictRegex=/^[0-9a-f]{40}$/,_.stagedUncommittedRegex=/^[0]{40}(\^[0-9]*?)??:$/,_.stagedUncommittedSha="0000000000000000000000000000000000000000:",_.uncommittedRegex=/^[0]{40}(\^[0-9]*?)??:??$/,_.uncommittedSha="0000000000000000000000000000000000000000",t.Git=_},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(4),n=i(5),a=Object.create(null);t.KeyNoopCommand=a,t.keys=["left","right",",",".","escape"];const c=[];let h;class l extends s.Disposable{constructor(e){super(()=>this.dispose()),this.mapping=e;for(const t in e)e[t]=e[t]||a}dispose(){return o.__awaiter(this,void 0,void 0,function*(){const e=c.indexOf(this.mapping);n.Logger.log("KeyboardScope.dispose",c.length,e),e===c.length-1?(c.pop(),yield this.updateKeyCommandsContext(c[c.length-1])):c.splice(e,1)})}begin(){return o.__awaiter(this,void 0,void 0,function*(){return c.push(this.mapping),yield this.updateKeyCommandsContext(this.mapping),this})}clearKeyCommand(e){return o.__awaiter(this,void 0,void 0,function*(){const t=c[c.length-1];t===this.mapping&&t[e]&&(n.Logger.log("KeyboardScope.clearKeyCommand",c.length,e),t[e]=void 0,yield r.setCommandContext(`${r.CommandContext.Key}:${e}`,!1))})}setKeyCommand(e,t){return o.__awaiter(this,void 0,void 0,function*(){const i=c[c.length-1];i===this.mapping&&(n.Logger.log("KeyboardScope.setKeyCommand",c.length,e,!!i[e]),i[e]?i[e]=t:(i[e]=t,yield r.setCommandContext(`${r.CommandContext.Key}:${e}`,!0)))})}updateKeyCommandsContext(e){return o.__awaiter(this,void 0,void 0,function*(){const i=[];for(const o of t.keys)i.push(r.setCommandContext(`${r.CommandContext.Key}:${o}`,!(!e||!e[o])));yield Promise.all(i)})}}t.KeyboardScope=l;t.Keyboard=class extends s.Disposable{static get instance(){return h}constructor(){super(()=>this.dispose()),h=this;const e=t.keys.map(e=>s.commands.registerCommand(`${r.ExtensionKey}.key.${e}`,()=>this.execute(e),this));this._disposable=s.Disposable.from(...e)}dispose(){this._disposable&&this._disposable.dispose()}beginScope(e){return o.__awaiter(this,void 0,void 0,function*(){return n.Logger.log("Keyboard.beginScope",c.length),yield new l(e?Object.assign(Object.create(null),e):Object.create(null)).begin()})}execute(e){return o.__awaiter(this,void 0,void 0,function*(){if(c.length)try{let t=c[c.length-1][e];if("function"==typeof t&&(t=yield t()),!t||"function"!=typeof t.onDidPressKey)return;return n.Logger.log("Keyboard.execute",e),yield t.onDidPressKey(e)}catch(e){return void n.Logger.error(e,"Keyboard.execute")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(4);var n;!function(e){e.Branch="branch",e.Branches="branches",e.Commit="commit",e.File="file",e.Repo="repo",e.Revision="revision"}(n=t.RemoteResourceType||(t.RemoteResourceType={})),t.getNameFromRemoteResource=function(e){switch(e.type){case n.Branch:return"Branch";case n.Branches:return"Branches";case n.Commit:return"Commit";case n.File:return"File";case n.Repo:return"Repository";case n.Revision:return"Revision";default:return""}};t.RemoteProvider=class{constructor(e,t,i="https",o,s=!1){this.domain=e,this.path=t,this.protocol=i,this.custom=s,this._name=o}get baseUrl(){return`${this.protocol}://${this.domain}/${this.path}`}formatName(e){return void 0!==this._name?this._name:`${e}${this.custom?` (${this.domain})`:""}`}splitPath(){const e=this.path.indexOf("/");return[this.path.substring(0,e),this.path.substring(e+1)]}getUrlForRepository(){return this.baseUrl}openUrl(e){return o.__awaiter(this,void 0,void 0,function*(){if(void 0!==e)return s.commands.executeCommand(r.BuiltInCommands.Open,s.Uri.parse(e))})}open(e){switch(e.type){case n.Branch:return this.openBranch(e.branch);case n.Branches:return this.openBranches();case n.Commit:return this.openCommit(e.sha);case n.File:return this.openFile(e.fileName,e.branch,void 0,e.range);case n.Repo:return this.openRepo();case n.Revision:return this.openFile(e.fileName,e.branch,e.sha,e.range)}}openRepo(){return this.openUrl(this.getUrlForRepository())}openBranches(){return this.openUrl(this.getUrlForBranches())}openBranch(e){return this.openUrl(this.getUrlForBranch(e))}openCommit(e){return this.openUrl(this.getUrlForCommit(e))}openFile(e,t,i,o){return this.openUrl(this.getUrlForFile(e,t,i,o))}}},function(e,t,i){"use strict";function o(){return h.configuration.get(h.configuration.name("advanced")("quickPick")("closeOnFocusOut").value)}Object.defineProperty(t,"__esModule",{value:!0});const s=i(0),r=i(2),n=i(1),a=i(45),c=i(11),h=i(9),l=i(4),d=i(14),u=i(32);t.getQuickPickIgnoreFocusOut=o,t.showQuickPickProgress=function(e,t){const i=new n.CancellationTokenSource;return function(e,t,i){s.__awaiter(this,void 0,void 0,function*(){const s=i&&(yield d.Keyboard.instance.beginScope(i));try{yield n.window.showQuickPick(function(e){return new Promise((t,i)=>{const o=e.token.onCancellationRequested(()=>{o.dispose(),t([])})})}(t),{placeHolder:e,ignoreFocusOut:o()},t.token)}catch(e){}finally{t.cancel(),s&&s.dispose()}})}(e,i,t),i};class m{constructor(e,t,i){void 0===t?(this.command=void 0,this.args=i):"string"==typeof t?(this.command=t,this.args=i):(this.command=t[0],this.args=t.slice(1)),Object.assign(this,e)}execute(){return void 0===this.command?Promise.resolve(void 0):n.commands.executeCommand(this.command,...this.args||[])}onDidPressKey(e){return this.execute()}}t.CommandQuickPickItem=m;t.MessageQuickPickItem=class extends m{constructor(e){super({label:e,description:""})}};t.KeyCommandQuickPickItem=class extends m{constructor(e,t){super({label:"",description:""},e,t)}};t.OpenFileCommandQuickPickItem=class extends m{constructor(e,t){super(t,void 0,void 0),this.uri=e}execute(e){return s.__awaiter(this,void 0,void 0,function*(){return c.openEditor(this.uri,e)})}onDidPressKey(e){return this.execute({preserveFocus:!0,preview:!1})}};t.OpenFilesCommandQuickPickItem=class extends m{constructor(e,t){super(t,void 0,void 0),this.uris=e}execute(e={preserveFocus:!1,preview:!1}){return s.__awaiter(this,void 0,void 0,function*(){for(const t of this.uris)yield c.openEditor(t,e)})}onDidPressKey(e){return s.__awaiter(this,void 0,void 0,function*(){return this.execute({preserveFocus:!0,preview:!1})})}};t.CommitQuickPickItem=class{constructor(e){this.commit=e;let t=e.message;const i=t.indexOf("\n");-1!==i&&(t=`${t.substring(0,i)}${l.GlyphChars.Space}$(ellipsis)`),e.isStash?(this.label=t,this.description="",this.detail=`${l.GlyphChars.Space} ${e.stashName||e.shortSha} ${r.Strings.pad(l.GlyphChars.Dot,1,1)} ${e.fromNow()} ${r.Strings.pad(l.GlyphChars.Dot,1,1)} ${e.getDiffStatus()}`):(this.label=t,this.description=`${r.Strings.pad("$(git-commit)",1,1)} ${e.shortSha}`,this.detail=`${l.GlyphChars.Space} ${e.author}, ${e.fromNow()}${e.isFile?"":` ${r.Strings.pad(l.GlyphChars.Dot,1,1)} ${e.getDiffStatus()}`}`)}};class g extends m{constructor(e,t,i={label:"Show in Results",description:`${r.Strings.pad(l.GlyphChars.Dash,2,2)} displays results in the GitLens Results view`}){super(i,void 0,void 0),this.results=e,this.resultsLabel=t}execute(e={preserveFocus:!1,preview:!1}){return s.__awaiter(this,void 0,void 0,function*(){u.ResultsExplorer.instance.showCommitsInResults(this.results,this.resultsLabel)})}}t.ShowCommitsInResultsQuickPickItem=g;t.ShowCommitsSearchInResultsQuickPickItem=class extends g{constructor(e,t,i){super(e,{label:t},i),this.results=e,this.search=t}};t.ShowBranchesAndTagsQuickPickItem=class extends m{constructor(e,t,i,o,s={label:"Show Branches and Tags",description:`${r.Strings.pad(l.GlyphChars.Dash,2,2)} displays branches and tags`}){super(s,void 0,void 0),this.repoPath=e,this.placeHolder=t,this.git=i,this.goBackCommand=o}execute(e={preserveFocus:!1,preview:!1}){return s.__awaiter(this,void 0,void 0,function*(){const e=a.BranchesAndTagsQuickPick.showProgress(this.placeHolder);try{const[t,i]=yield Promise.all([this.git.getBranches(this.repoPath),this.git.getTags(this.repoPath)]);if(e.token.isCancellationRequested)return;return a.BranchesAndTagsQuickPick.show(t,i,this.placeHolder,{progressCancellation:e,goBackCommand:this.goBackCommand})}finally{e.dispose()}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(24),a=i(18),c=i(9),h=i(4),l=i(3),d=i(156),u=i(157),m=i(14),g=i(5),p=i(158),f=i(7);var v;!function(e){e.Gutter="gutter",e.Hover="hover",e.RecentChanges="recentChanges"}(v=t.FileAnnotationType||(t.FileAnnotationType={}));var C;!function(e){e.User="User",e.BlameabilityChanged="BlameabilityChanged",e.ColumnChanged="ColumnChanged",e.Disposing="Disposing",e.DocumentChanged="DocumentChanged",e.DocumentClosed="DocumentClosed"}(C=t.AnnotationClearReason||(t.AnnotationClearReason={}));var y;!function(e){e.Computing="computing",e.Computed="computed"}(y||(y={})),t.Decorations={blameAnnotation:r.window.createTextEditorDecorationType({isWholeLine:!0,rangeBehavior:r.DecorationRangeBehavior.ClosedClosed,textDecoration:"none"}),blameHighlight:void 0,recentChangesAnnotation:void 0,recentChangesHighlight:void 0};t.AnnotationController=class extends r.Disposable{constructor(e,t,i){super(()=>this.dispose()),this.context=e,this.git=t,this.gitContextTracker=i,this._onDidToggleAnnotations=new r.EventEmitter,this._annotationProviders=new Map,this._keyboardScope=void 0,this._disposable=r.Disposable.from(c.configuration.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(c.configuration.initializingChangeEvent)}get onDidToggleAnnotations(){return this._onDidToggleAnnotations.event}dispose(){this._annotationProviders.forEach((e,t)=>o.__awaiter(this,void 0,void 0,function*(){return yield this.clearCore(t,C.Disposing)})),t.Decorations.blameAnnotation&&t.Decorations.blameAnnotation.dispose(),t.Decorations.blameHighlight&&t.Decorations.blameHighlight.dispose(),this._annotationsDisposable&&this._annotationsDisposable.dispose(),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){const i=c.configuration.initializing(e);let o;if(i||c.configuration.changed(e,c.configuration.name("blame")("file")("lineHighlight").value)){t.Decorations.blameHighlight&&t.Decorations.blameHighlight.dispose();const e=(o=c.configuration.get()).blame.file.lineHighlight;e.enabled?t.Decorations.blameHighlight=r.window.createTextEditorDecorationType({gutterIconSize:"contain",isWholeLine:!0,overviewRulerLane:r.OverviewRulerLane.Right,backgroundColor:e.locations.includes(c.LineHighlightLocations.Line)?new r.ThemeColor("gitlens.lineHighlightBackgroundColor"):void 0,overviewRulerColor:e.locations.includes(c.LineHighlightLocations.OverviewRuler)?new r.ThemeColor("gitlens.lineHighlightOverviewRulerColor"):void 0,dark:{gutterIconPath:e.locations.includes(c.LineHighlightLocations.Gutter)?this.context.asAbsolutePath("images/dark/highlight-gutter.svg"):void 0},light:{gutterIconPath:e.locations.includes(c.LineHighlightLocations.Gutter)?this.context.asAbsolutePath("images/light/highlight-gutter.svg"):void 0}}):t.Decorations.blameHighlight=void 0}if(i||c.configuration.changed(e,c.configuration.name("recentChanges")("file")("lineHighlight").value)){t.Decorations.recentChangesHighlight&&t.Decorations.recentChangesHighlight.dispose(),void 0===o&&(o=c.configuration.get());const e=o.recentChanges.file.lineHighlight;t.Decorations.recentChangesHighlight=r.window.createTextEditorDecorationType({gutterIconSize:"contain",isWholeLine:!0,overviewRulerLane:r.OverviewRulerLane.Right,backgroundColor:e.locations.includes(c.LineHighlightLocations.Line)?new r.ThemeColor("gitlens.lineHighlightBackgroundColor"):void 0,overviewRulerColor:e.locations.includes(c.LineHighlightLocations.OverviewRuler)?new r.ThemeColor("gitlens.lineHighlightOverviewRulerColor"):void 0,dark:{gutterIconPath:e.locations.includes(c.LineHighlightLocations.Gutter)?this.context.asAbsolutePath("images/dark/highlight-gutter.svg"):void 0},light:{gutterIconPath:e.locations.includes(c.LineHighlightLocations.Gutter)?this.context.asAbsolutePath("images/light/highlight-gutter.svg"):void 0}})}if(!i&&(c.configuration.changed(e,c.configuration.name("blame")("file").value)||c.configuration.changed(e,c.configuration.name("recentChanges")("file").value)||c.configuration.changed(e,c.configuration.name("annotations")("file").value))){void 0===o&&(o=c.configuration.get());for(const e of this._annotationProviders.values())void 0!==e&&(e.annotationType===v.RecentChanges?e.reset(t.Decorations.recentChangesAnnotation,t.Decorations.recentChangesHighlight):e.annotationType===o.blame.file.annotationType?e.reset(t.Decorations.blameAnnotation,t.Decorations.blameHighlight):this.showAnnotations(e.editor,o.blame.file.annotationType))}}onActiveTextEditorChanged(e){(void 0===e||h.isTextEditor(e))&&(void 0===this.getProvider(e)?(h.setCommandContext(h.CommandContext.AnnotationStatus,void 0),this.detachKeyboardHook()):(h.setCommandContext(h.CommandContext.AnnotationStatus,y.Computed),this.attachKeyboardHook()))}onBlameabilityChanged(e){e.blameable||void 0===e.editor||this.clear(e.editor,C.BlameabilityChanged)}onTextDocumentChanged(e){if(e.document.isDirty&&this.git.isTrackable(e.document.uri))for(const[t,i]of this._annotationProviders)a.TextDocumentComparer.equals(i.document,e.document)&&this.clearCore(t,C.DocumentClosed)}onTextDocumentClosed(e){if(this.git.isTrackable(e.uri))for(const[t,i]of this._annotationProviders)a.TextDocumentComparer.equals(i.document,e)&&this.clearCore(t,C.DocumentClosed)}onTextEditorViewColumnChanged(e){const t=this.getProvider(e.textEditor);if(void 0!==t)t.restore(e.textEditor);else{const t=s.Iterables.find(this._annotationProviders.values(),t=>t.editor.document===e.textEditor.document);if(null==t)return;this.clearCore(t.correlationKey,C.ColumnChanged)}}onVisibleTextEditorsChanged(e){return o.__awaiter(this,void 0,void 0,function*(){let t;for(const i of e)void 0!==(t=this.getProvider(i))&&t.restore(i)})}attachKeyboardHook(){return o.__awaiter(this,void 0,void 0,function*(){void 0===this._keyboardScope&&(this._keyboardScope=yield m.Keyboard.instance.beginScope({escape:{onDidPressKey:e=>o.__awaiter(this,void 0,void 0,function*(){const e=r.window.activeTextEditor;void 0!==e&&(yield this.clear(e,C.User))})}}))})}detachKeyboardHook(){return o.__awaiter(this,void 0,void 0,function*(){void 0!==this._keyboardScope&&(yield this._keyboardScope.dispose(),this._keyboardScope=void 0)})}clear(e,t=C.User){return o.__awaiter(this,void 0,void 0,function*(){this.clearCore(n.AnnotationProviderBase.getCorrelationKey(e),t)})}clearCore(e,t){return o.__awaiter(this,void 0,void 0,function*(){const i=this._annotationProviders.get(e);void 0!==i&&(g.Logger.log(`${t}:`,`Clear annotations for ${e}`),this._annotationProviders.delete(e),yield i.dispose(),e===n.AnnotationProviderBase.getCorrelationKey(r.window.activeTextEditor)&&(yield h.setCommandContext(h.CommandContext.AnnotationStatus,void 0),yield this.detachKeyboardHook()),0===this._annotationProviders.size&&(g.Logger.log("Remove all listener registrations for annotations"),this._annotationsDisposable&&this._annotationsDisposable.dispose(),this._annotationsDisposable=void 0),this._onDidToggleAnnotations.fire())})}getAnnotationType(e){const t=this.getProvider(e);return void 0!==t&&this.git.isEditorBlameable(e)?t.annotationType:void 0}getProvider(e){if(void 0!==e&&void 0!==e.document)return this._annotationProviders.get(n.AnnotationProviderBase.getCorrelationKey(e))}showAnnotations(e,t,i){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===e||void 0===e.document||!this.git.isEditorBlameable(e))return!1;const s=this.getProvider(e);return void 0!==s&&s.annotationType===t?(yield s.selection(i),!0):r.window.withProgress({location:r.ProgressLocation.Window},n=>o.__awaiter(this,void 0,void 0,function*(){const o=e===r.window.activeTextEditor;yield h.setCommandContext(h.CommandContext.AnnotationStatus,o?y.Computing:void 0);const a=this.showAnnotationsCore(s,e,t,i,n),c=yield a;return o&&(yield h.setCommandContext(h.CommandContext.AnnotationStatus,c?y.Computed:void 0)),a}))})}showAnnotationsCore(e,i,n,a,c){return o.__awaiter(this,void 0,void 0,function*(){if(void 0!==c){let e="annotations";switch(n){case v.Gutter:case v.Hover:e="blame annotations";break;case v.RecentChanges:e="recent changes annotations"}c.report({message:`Computing ${e} for ${f.basename(i.document.fileName)}`})}this.attachKeyboardHook();const o=yield l.GitUri.fromUri(i.document.uri,this.git);let h=void 0;switch(n){case v.Gutter:h=new d.GutterBlameAnnotationProvider(this.context,i,t.Decorations.blameAnnotation,t.Decorations.blameHighlight,this.git,o);break;case v.Hover:h=new u.HoverBlameAnnotationProvider(this.context,i,t.Decorations.blameAnnotation,t.Decorations.blameHighlight,this.git,o);break;case v.RecentChanges:h=new p.RecentChangesAnnotationProvider(this.context,i,void 0,t.Decorations.recentChangesHighlight,this.git,o)}return!(void 0===h||!(yield h.validate())||(void 0!==e&&(yield this.clearCore(e.correlationKey,C.User)),this._annotationsDisposable||0!==this._annotationProviders.size||(g.Logger.log("Add listener registrations for annotations"),this._annotationsDisposable=r.Disposable.from(r.window.onDidChangeActiveTextEditor(s.Functions.debounce(this.onActiveTextEditorChanged,50),this),r.window.onDidChangeTextEditorViewColumn(this.onTextEditorViewColumnChanged,this),r.window.onDidChangeVisibleTextEditors(this.onVisibleTextEditorsChanged,this),r.workspace.onDidChangeTextDocument(s.Functions.debounce(this.onTextDocumentChanged,50),this),r.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),this.gitContextTracker.onDidChangeBlameability(this.onBlameabilityChanged,this))),this._annotationProviders.set(h.correlationKey,h),!(yield h.provideAnnotation(a))||(this._onDidToggleAnnotations.fire(),0)))})}toggleAnnotations(e,t,i){return o.__awaiter(this,void 0,void 0,function*(){if(!(e&&e.document&&(t===v.RecentChanges?this.git.isTrackable(e.document.uri):this.git.isEditorBlameable(e))))return!1;const o=this.getProvider(e);if(void 0===o)return this.showAnnotations(e,t,i);const s=o.annotationType!==t;return yield this.clearCore(o.correlationKey,C.User),!!s&&this.showAnnotations(e,t,i)})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o{}const s=new class extends o{equals(e,t){return e===t}};t.TextDocumentComparer=s;const r=new class extends o{equals(e,t,i={useId:!1,usePosition:!1}){return e===t||void 0!==e&&void 0!==t&&(!i.usePosition||e.viewColumn===t.viewColumn)&&(!i.useId||e.document&&t.document?s.equals(e.document,t.document):e.id===t.id)}};t.TextEditorComparer=r;const n=new class extends o{equals(e,t){return e===t||void 0!==e&&void 0!==t&&e.scheme===t.scheme&&e.fsPath===t.fsPath}};t.UriComparer=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0);o.__exportStar(i(8),t),o.__exportStar(i(42),t),o.__exportStar(i(43),t),o.__exportStar(i(31),t),o.__exportStar(i(22),t),o.__exportStar(i(20),t),o.__exportStar(i(152),t),o.__exportStar(i(57),t),o.__exportStar(i(153),t),o.__exportStar(i(60),t),o.__exportStar(i(154),t),o.__exportStar(i(47),t),o.__exportStar(i(46),t),o.__exportStar(i(155),t),o.__exportStar(i(30),t),o.__exportStar(i(52),t),o.__exportStar(i(54),t),o.__exportStar(i(53),t),o.__exportStar(i(50),t),o.__exportStar(i(59),t),o.__exportStar(i(49),t),o.__exportStar(i(58),t),o.__exportStar(i(48),t),o.__exportStar(i(51),t),o.__exportStar(i(55),t),o.__exportStar(i(56),t)},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(11),a=i(22),c=i(9),h=i(33),l=i(8),d=i(3),u=i(7);t.CommitNode=class extends l.ExplorerRefNode{constructor(e,t,i){super(e.toGitUri()),this.commit=e,this.explorer=t,this.branch=i}get ref(){return this.commit.sha}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){const e=this.repoPath,t=yield this.explorer.git.getLogForRepo(e,{maxCount:1,ref:this.commit.sha});if(void 0===t)return[];const i=s.Iterables.first(t.commits.values());if(void 0===i)return[];let o=[...s.Iterables.map(i.fileStatuses,e=>new a.CommitFileNode(e,i.toFileCommit(e),this.explorer,a.CommitFileNodeDisplayAs.File))];if(this.explorer.config.files.layout!==c.ExplorerFilesLayout.List){const t=s.Arrays.makeHierarchical(o,e=>e.uri.getRelativePath().split("/"),(...e)=>d.GitService.normalizePath(u.join(...e)),this.explorer.config.files.compact);o=yield new h.FolderNode(e,"",void 0,t,this.explorer).getChildren()}else o.sort((e,t)=>e.label.localeCompare(t.label));return o})}getTreeItem(){const e=new r.TreeItem(d.CommitFormatter.fromTemplate(this.explorer.config.commitFormat,this.commit,{truncateMessageAtNewLine:!0,dataFormat:this.explorer.git.config.defaultDateFormat}),r.TreeItemCollapsibleState.Collapsed);return e.contextValue=void 0===this.branch||this.branch.current?l.ResourceType.CommitOnCurrentBranch:l.ResourceType.Commit,this.explorer.config.gravatars?e.iconPath=this.commit.getGravatarUri(this.explorer.config.gravatarsDefault||c.GravatarDefault.Robot):e.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-commit.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-commit.svg")},e}getCommand(){return{title:"Compare File with Previous Revision",command:n.Commands.DiffWithPrevious,arguments:[this.uri,{commit:this.commit,line:0,showOptions:{preserveFocus:!0,preview:!0}}]}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(11),a=i(16),c=i(4),h=i(3),l=i(7);class d extends a.CommandQuickPickItem{constructor(e,t){super({label:`$(link-external) Open ${h.getNameFromRemoteResource(t)} in ${e.provider.name}`,description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} $(repo) ${e.provider.path}`},void 0,void 0),this.remote=e,this.resource=t}execute(){return o.__awaiter(this,void 0,void 0,function*(){return this.remote.provider.open(this.resource)})}}t.OpenRemoteCommandQuickPickItem=d;t.OpenRemotesCommandQuickPickItem=class extends a.CommandQuickPickItem{constructor(e,t,i){const o=h.getNameFromRemoteResource(t);let r="";switch(t.type){case h.RemoteResourceType.Branch:r=`$(git-branch) ${t.branch}`;break;case h.RemoteResourceType.Branches:r="$(git-branch) Branches";break;case h.RemoteResourceType.Commit:r=`$(git-commit) ${h.GitService.shortenSha(t.sha)}`;break;case h.RemoteResourceType.File:r=`$(file-text) ${l.basename(t.fileName)}`;break;case h.RemoteResourceType.Repo:r="$(repo) Repository";break;case h.RemoteResourceType.Revision:if(void 0!==t.commit&&t.commit instanceof h.GitLogCommit)"D"===t.commit.status?(t.sha=t.commit.previousSha,r=`$(file-text) ${l.basename(t.fileName)} in ${c.GlyphChars.Space}$(git-commit) ${t.commit.previousShortSha} (deleted in ${c.GlyphChars.Space}$(git-commit) ${t.commit.shortSha})`):(t.sha=t.commit.sha,r=`$(file-text) ${l.basename(t.fileName)} in ${c.GlyphChars.Space}$(git-commit) ${t.commit.shortSha}`);else{const e=void 0===t.sha?"":h.GitService.shortenSha(t.sha);r=`$(file-text) ${l.basename(t.fileName)}${e?` in ${c.GlyphChars.Space}$(git-commit) ${e}`:""}`}}const a=e[0];1!==e.length?super({label:`$(link-external) Open ${o} in ${e.every(e=>void 0!==e.provider&&e.provider.name===a.provider.name)?a.provider.name:"Remote"}${c.GlyphChars.Ellipsis}`,description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} ${r}`},n.Commands.OpenInRemote,[void 0,{remotes:e,resource:t,goBackCommand:i}]):super({label:`$(link-external) Open ${o} in ${a.provider.name}`,description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} $(repo) ${a.provider.path} ${s.Strings.pad(c.GlyphChars.Dot,1,1)} ${r}`},n.Commands.OpenInRemote,[void 0,{remotes:e,resource:t,goBackCommand:i}])}};t.RemotesQuickPick=class{static show(e,t,i,s){return o.__awaiter(this,void 0,void 0,function*(){const o=e.map(e=>new d(e,i));s&&o.splice(0,0,s);const n=yield r.window.showQuickPick(o,{placeHolder:t,ignoreFocusOut:a.getQuickPickIgnoreFocusOut()});if(void 0!==n)return n})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(11),n=i(9),a=i(8),c=i(3),h=i(7);var l;!function(e){e[e.CommitLabel=1]="CommitLabel",e[e.FileLabel=2]="FileLabel",e[e.CommitIcon=4]="CommitIcon",e[e.StatusIcon=8]="StatusIcon",e[e.Gravatar=16]="Gravatar",e[e.File=10]="File"}(l=t.CommitFileNodeDisplayAs||(t.CommitFileNodeDisplayAs={}));t.CommitFileNode=class extends a.ExplorerNode{constructor(e,t,i,o){super(c.GitUri.fromFileStatus(e,t.repoPath,t.sha)),this.status=e,this.commit=t,this.explorer=i,this.displayAs=o,this.priority=!1,this.repoPath=t.repoPath}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){return[]})}getTreeItem(){return o.__awaiter(this,void 0,void 0,function*(){if(!this.commit.isFile){const e=this.commit.toFileCommit(this.status);if(void 0===e){const e=yield this.explorer.git.getLogForFile(this.repoPath,this.status.fileName,{maxCount:2,ref:this.commit.sha});void 0!==e&&(this.commit=e.commits.get(this.commit.sha)||this.commit)}else this.commit=e}const e=new s.TreeItem(this.label,s.TreeItemCollapsibleState.None);if(e.contextValue=this.resourceType,(this.displayAs&l.CommitIcon)===l.CommitIcon)e.iconPath={dark:this.explorer.context.asAbsolutePath(h.join("images","dark","icon-commit.svg")),light:this.explorer.context.asAbsolutePath(h.join("images","light","icon-commit.svg"))};else if((this.displayAs&l.StatusIcon)===l.StatusIcon){const t=c.getGitStatusIcon(this.status.status);e.iconPath={dark:this.explorer.context.asAbsolutePath(h.join("images","dark",t)),light:this.explorer.context.asAbsolutePath(h.join("images","light",t))}}else(this.displayAs&l.Gravatar)===l.Gravatar&&(e.iconPath=this.commit.getGravatarUri(this.explorer.config.gravatarsDefault||n.GravatarDefault.Robot));return e.command=this.getCommand(),this._label=void 0,e})}get folderName(){return void 0===this._folderName&&(this._folderName=h.dirname(this.uri.getRelativePath())),this._folderName}get label(){return void 0===this._label&&(this._label=this.displayAs&l.CommitLabel?c.CommitFormatter.fromTemplate(this.getCommitTemplate(),this.commit,{truncateMessageAtNewLine:!0,dataFormat:this.explorer.git.config.defaultDateFormat}):c.StatusFileFormatter.fromTemplate(this.getCommitFileTemplate(),this.status,{relativePath:this.relativePath})),this._label}get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0}get resourceType(){return a.ResourceType.CommitFile}getCommitTemplate(){return this.explorer.config.commitFormat}getCommitFileTemplate(){return this.explorer.config.commitFileFormat}getCommand(){return{title:"Compare File with Previous Revision",command:r.Commands.DiffWithPrevious,arguments:[c.GitUri.fromFileStatus(this.status,this.commit.repoPath),{commit:this.commit,line:0,showOptions:{preserveFocus:!0,preview:!0}}]}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(17),a=i(11),c=i(4),h=i(3);t.endOfLineIndex=1e6;const l=/[`\>\#\*\_\-\+\.]/g;t.Annotations=class{static applyHeatmap(e,t,i){const o=this.getHeatmapColor(i,t);e.renderOptions.before.borderColor=o}static getHeatmapColor(e,t){const i=s.Dates.dateDaysFromNow(t,e);return i<=2?"#ffeca7":i<=7?"#ffdd8c":i<=14?"#ffdd7c":i<=30?"#fba447":i<=60?"#f68736":i<=90?"#f37636":i<=180?"#ca6632":i<=365?"#c0513f":i<=730?"#a2503a":"#793738"}static getHoverCommandBar(e,t,i){let o=`[\`${c.GlyphChars.DoubleArrowLeft}\`](${a.DiffWithCommand.getMarkdownCommandArgs(e)} "Open Changes") `;if(void 0!==e.previousSha){i===n.FileAnnotationType.RecentChanges&&(i=n.FileAnnotationType.Gutter);const t=h.GitUri.toRevisionUri(e.previousSha,e.previousUri.fsPath,e.repoPath),s=r.window.activeTextEditor.selection.active.line;o+=`[\`${c.GlyphChars.SquareWithTopShadow}\`](${a.OpenFileRevisionCommand.getMarkdownCommandArgs(t,i||n.FileAnnotationType.Gutter,s)} "Blame Previous Revision") `}return t&&(o+=`[\`${c.GlyphChars.ArrowUpRight}\`](${a.OpenCommitInRemoteCommand.getMarkdownCommandArgs(e.sha)} "Open in Remote") `),o+=`[\`${c.GlyphChars.MiddleEllipsis}\`](${a.ShowQuickCommitFileDetailsCommand.getMarkdownCommandArgs(e.sha)} "Show More Actions")`}static getHoverMessage(e,t,i,o){null===t&&(t="MMMM Do, YYYY h:MMa");let s="",n="",h="";e.isUncommitted?h=`\`${e.shortSha}\``:(n=`\n\n${this.getHoverCommandBar(e,i,o)}`,h=`[\`${e.shortSha}\`](${a.ShowQuickCommitDetailsCommand.getMarkdownCommandArgs(e.sha)} "Show Commit Details")`,s=`\n\n> ${s=e.message.replace(l,"\\$&").replace(/^===/gm,`${c.GlyphChars.ZeroWidthSpace}===`).replace(/\n/g,"  \n")}`);const d=new r.MarkdownString(`${h} &nbsp; __${e.author}__, ${e.fromNow()} &nbsp; _(${e.formatDate(t)})_ ${s}${n}`);return d.isTrusted=!0,d}static getHoverDiffMessage(e,t,i){if(void 0===i||void 0===e.previousSha)return;const o=this.getCodeDiff(i);let s;s=e.isUncommitted?void 0!==t.sha&&h.GitService.isStagedUncommitted(t.sha)?`[\`Changes\`](${a.DiffWithCommand.getMarkdownCommandArgs(e)} "Open Changes") &nbsp; ${c.GlyphChars.Dash} &nbsp; [\`${e.previousShortSha}\`](${a.ShowQuickCommitDetailsCommand.getMarkdownCommandArgs(e.previousSha)} "Show Commit Details") ${c.GlyphChars.ArrowLeftRight} _${t.shortSha}_\n${o}`:`[\`Changes\`](${a.DiffWithCommand.getMarkdownCommandArgs(e)} "Open Changes") &nbsp; ${c.GlyphChars.Dash} &nbsp; _uncommitted_\n${o}`:`[\`Changes\`](${a.DiffWithCommand.getMarkdownCommandArgs(e)} "Open Changes") &nbsp; ${c.GlyphChars.Dash} &nbsp; [\`${e.previousShortSha}\`](${a.ShowQuickCommitDetailsCommand.getMarkdownCommandArgs(e.previousSha)} "Show Commit Details") ${c.GlyphChars.ArrowLeftRight} [\`${e.shortSha}\`](${a.ShowQuickCommitDetailsCommand.getMarkdownCommandArgs(e.sha)} "Show Commit Details")\n${o}`;const n=new r.MarkdownString(s);return n.isTrusted=!0,n}static getCodeDiff(e){const t=void 0===e.previous?void 0:e.previous[0];return`\`\`\`\n-  ${void 0===t||void 0===t.line?"":t.line.trim()}\n+  ${void 0===e.line?"":e.line.trim()}\n\`\`\``}static changesHover(e,t,i,s){return o.__awaiter(this,void 0,void 0,function*(){const o=!e.isUncommitted||void 0!==i.sha&&h.GitService.isStagedUncommitted(i.sha)?e.previousSha:void 0,r=yield s.getDiffForLine(i,t,o);return{hoverMessage:this.getHoverDiffMessage(e,i,r)}})}static detailsHover(e,t,i,o){return{hoverMessage:this.getHoverMessage(e,t,i,o)}}static gutter(e,t,i,o){const r={renderOptions:{before:Object.assign({},o)}};e.isUncommitted&&(r.renderOptions.before.color=o.uncommittedColor);const n=h.CommitFormatter.fromTemplate(t,e,i);return r.renderOptions.before.contentText=s.Strings.pad(n.replace(/ /g,c.GlyphChars.Space),1,1),r}static gutterRenderOptions(e,t,i,o){let n=0;for(const e of s.Objects.values(o.tokenOptions))if(void 0!==e){if(null==e.truncateTo){n=-1;break}n+=e.truncateTo}n>=0&&(n+=s.Strings.width(s.Strings.interpolate(i,void 0)))>0&&(n+=3);let a=void 0,c=void 0;return t.enabled&&(a="solid",c="left"===t.location?"0 0 0 2px":"0 2px 0 0"),{backgroundColor:new r.ThemeColor("gitlens.gutterBackgroundColor"),borderStyle:a,borderWidth:c,color:new r.ThemeColor("gitlens.gutterForegroundColor"),fontWeight:"normal",fontStyle:"normal",height:"100%",margin:"0 26px -1px 0",textDecoration:e?"overline solid rgba(0, 0, 0, .2)":"none",width:n>=0?`${n}ch`:void 0,uncommittedColor:new r.ThemeColor("gitlens.gutterUncommittedForegroundColor")}}static hover(e,t,i){const o={renderOptions:{before:Object.assign({},t)}};return this.applyHeatmap(o,e.date,i),o}static hoverRenderOptions(e){return e.enabled?{borderStyle:"solid",borderWidth:"0 0 0 2px",contentText:c.GlyphChars.ZeroWidthSpace,height:"100%",margin:"0 26px 0 0",textDecoration:"none"}:{before:void 0}}static trailing(e,t,i){const o=h.CommitFormatter.fromTemplate(t,e,{truncateMessageAtNewLine:!0,dateFormat:i});return{renderOptions:{after:{backgroundColor:new r.ThemeColor("gitlens.trailingLineBackgroundColor"),color:new r.ThemeColor("gitlens.trailingLineForegroundColor"),contentText:s.Strings.pad(o.replace(/ /g,c.GlyphChars.Space),1,1),fontWeight:"normal",fontStyle:"normal"}}}}static withRange(e,t,i){let o=e.range;return void 0!==t&&(o=o.with({start:o.start.with({character:t})})),void 0!==i&&(o=o.with({end:o.end.with({character:i})})),Object.assign({},e,{range:o})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(18),n=i(9);class a extends s.Disposable{constructor(e,t,i,o){super(()=>this.dispose()),this.editor=t,this.decoration=i,this.highlightDecoration=o,this.correlationKey=a.getCorrelationKey(this.editor),this.document=this.editor.document,this._config=n.configuration.get(),this._disposable=s.Disposable.from(s.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this))}static getCorrelationKey(e){return void 0!==e?e.id:""}dispose(){return o.__awaiter(this,void 0,void 0,function*(){yield this.clear(),this._disposable&&this._disposable.dispose()})}onTextEditorSelectionChanged(e){return o.__awaiter(this,void 0,void 0,function*(){if(r.TextDocumentComparer.equals(this.document,e.textEditor&&e.textEditor.document))return this.selection(e.selections[0].active.line)})}get editorId(){return void 0===this.editor||void 0===this.editor.document?"":this.editor.id}get editorUri(){if(void 0!==this.editor&&void 0!==this.editor.document)return this.editor.document.uri}clear(){return o.__awaiter(this,void 0,void 0,function*(){if(void 0!==this.editor)try{void 0!==this.highlightDecoration&&this.editor.setDecorations(this.highlightDecoration,[]),void 0!==this.decoration&&this.editor.setDecorations(this.decoration,[])}catch(e){}})}reset(e,t){return o.__awaiter(this,void 0,void 0,function*(){yield this.clear(),this._config=n.configuration.get(),this.decoration=e,this.highlightDecoration=t,yield this.provideAnnotation(void 0===this.editor?void 0:this.editor.selection.active.line)})}restore(e,t=!1){(t||!1!==this.editor._disposed)&&(this.editor=e,this.correlationKey=a.getCorrelationKey(e),this.document=e.document,void 0!==this._decorations&&this._decorations.length&&this.editor.setDecorations(this.decoration,this._decorations))}}t.AnnotationProviderBase=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(18),a=i(9),c=i(4),h=i(19),l=i(3),d=i(5);o.__exportStar(i(19),t);var u;!function(e){e.Auto="auto",e.History="history",e.Repository="repository"}(u=t.GitExplorerView||(t.GitExplorerView={}));t.GitExplorer=class{constructor(e,t,i,o){this.context=e,this.explorerCommands=t,this.git=i,this.gitContextTracker=o,this._onDidChangeAutoRefresh=new r.EventEmitter,this._onDidChangeTreeData=new r.EventEmitter,r.commands.registerCommand("gitlens.gitExplorer.refresh",this.refresh,this),r.commands.registerCommand("gitlens.gitExplorer.refreshNode",this.refreshNode,this),r.commands.registerCommand("gitlens.gitExplorer.setFilesLayoutToAuto",()=>this.setFilesLayout(a.ExplorerFilesLayout.Auto),this),r.commands.registerCommand("gitlens.gitExplorer.setFilesLayoutToList",()=>this.setFilesLayout(a.ExplorerFilesLayout.List),this),r.commands.registerCommand("gitlens.gitExplorer.setFilesLayoutToTree",()=>this.setFilesLayout(a.ExplorerFilesLayout.Tree),this),r.commands.registerCommand("gitlens.gitExplorer.setAutoRefreshToOn",()=>this.setAutoRefresh(a.configuration.get(a.configuration.name("gitExplorer")("autoRefresh").value),!0),this),r.commands.registerCommand("gitlens.gitExplorer.setAutoRefreshToOff",()=>this.setAutoRefresh(a.configuration.get(a.configuration.name("gitExplorer")("autoRefresh").value),!1),this),r.commands.registerCommand("gitlens.gitExplorer.switchToHistoryView",()=>this.switchTo(u.History),this),r.commands.registerCommand("gitlens.gitExplorer.switchToRepositoryView",()=>this.switchTo(u.Repository),this),e.subscriptions.push(r.window.onDidChangeActiveTextEditor(s.Functions.debounce(this.onActiveEditorChanged,500),this),r.window.onDidChangeVisibleTextEditors(s.Functions.debounce(this.onVisibleEditorsChanged,500),this),a.configuration.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(a.configuration.initializingChangeEvent)}get onDidChangeAutoRefresh(){return this._onDidChangeAutoRefresh.event}get onDidChangeTreeData(){return this._onDidChangeTreeData.event}onActiveEditorChanged(e){return o.__awaiter(this,void 0,void 0,function*(){if(this._view!==u.History)return;const t=yield this.getRootNode(e);this.setRoot(t)&&this.refresh(h.RefreshReason.ActiveEditorChanged,t)})}onConfigurationChanged(e){return o.__awaiter(this,void 0,void 0,function*(){const t=a.configuration.initializing(e),i=a.configuration.name("gitExplorer");if(!t&&!a.configuration.changed(e,i.value))return;const o=a.configuration.get(i.value);t||!a.configuration.changed(e,i("gravatars").value)&&!a.configuration.changed(e,i("gravatarsDefault").value)||l.clearGravatarCache(),(t||a.configuration.changed(e,i("autoRefresh").value))&&this.setAutoRefresh(o.autoRefresh);let s=o.view;s===u.Auto&&(s=this.context.workspaceState.get(c.WorkspaceState.GitExplorerView,u.Repository)),t?(this._view=s,c.setCommandContext(c.CommandContext.GitExplorerView,this._view),this.setRoot(yield this.getRootNode(r.window.activeTextEditor))):this.reset(s),this._config=o})}onGitChanged(e){this._view===u.Repository&&e.reason===l.GitChangeReason.Repositories&&(this.clearRoot(),d.Logger.log(`GitExplorer[view=${this._view}].onGitChanged(${e.reason})`),this.refresh(h.RefreshReason.RepoChanged))}onVisibleEditorsChanged(e){void 0!==this._root&&this._view===u.History&&(0!==e.length&&e.some(e=>e.document&&this.git.isTrackable(e.document.uri))||(this.clearRoot(),this.refresh(h.RefreshReason.VisibleEditorsChanged)))}get autoRefresh(){return a.configuration.get(a.configuration.name("gitExplorer")("autoRefresh").value)&&this.context.workspaceState.get(c.WorkspaceState.GitExplorerAutoRefresh,!0)}get config(){return this._config}getChildren(e){return o.__awaiter(this,void 0,void 0,function*(){return void 0!==this._loading&&(yield this._loading,this._loading=void 0),void 0===this._root?this._view===u.History?[new h.MessageNode(`No active file ${c.GlyphChars.Dash} no history to show`)]:[new h.MessageNode("No repositories found")]:void 0===e?this._root.getChildren():e.getChildren()})}getTreeItem(e){return o.__awaiter(this,void 0,void 0,function*(){return e.getTreeItem()})}getRootNode(e){return o.__awaiter(this,void 0,void 0,function*(){switch(this._view){case u.History:{const t=this.getHistoryNode(e||r.window.activeTextEditor);return this._loading=t.then(e=>s.Functions.wait(0)),t}default:{const e=this.git.getRepositories();this._loading=e.then(e=>s.Functions.wait(0));const t=[...yield e];if(0===t.length)return;if(1===t.length){const e=t[0];return new h.RepositoryNode(l.GitUri.fromRepoPath(e.path),e,this,!0)}return new h.RepositoriesNode(t,this)}}})}getHistoryNode(e){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===e||0===r.window.visibleTextEditors.length||!r.window.visibleTextEditors.some(e=>e.document&&this.git.isTrackable(e.document.uri)))return;if(void 0===e.document||!this.git.isTrackable(e.document.uri))return this._root;const t=yield l.GitUri.fromUri(e.document.uri,this.git),i=yield this.git.getRepository(t);return void 0!==i?n.UriComparer.equals(t,this._root&&this._root.uri)?this._root:new h.HistoryNode(t,i,this):void 0})}getQualifiedCommand(e){return`gitlens.gitExplorer.${e}`}refresh(e,t){return o.__awaiter(this,void 0,void 0,function*(){void 0===e&&(e=h.RefreshReason.Command),d.Logger.log(`GitExplorer[view=${this._view}].refresh`,`reason='${e}'`),(void 0===this._root||void 0===t&&this._view===u.History)&&(this.clearRoot(),this.setRoot(yield this.getRootNode(r.window.activeTextEditor))),this._onDidChangeTreeData.fire()})}refreshNode(e,t){d.Logger.log(`GitExplorer[view=${this._view}].refreshNode`),void 0!==t&&e.supportsPaging&&(e.maxCount=t.maxCount),this._onDidChangeTreeData.fire(e===this._root?void 0:e)}reset(e,t=!1){return o.__awaiter(this,void 0,void 0,function*(){this.setView(e),t&&void 0!==this._root&&this.clearRoot(),(this.setRoot(yield this.getRootNode(r.window.activeTextEditor))||t)&&this.refresh(h.RefreshReason.ViewChanged)})}clearRoot(){void 0!==this._root&&(this._root.dispose(),this._root=void 0)}setFilesLayout(e){return o.__awaiter(this,void 0,void 0,function*(){return a.configuration.update(a.configuration.name("gitExplorer")("files")("layout").value,e,r.ConfigurationTarget.Global)})}setRoot(e){return this._root!==e&&(void 0!==this._root&&this._root.dispose(),this._root=e,!0)}setView(e){this._view!==e&&(a.configuration.get(a.configuration.name("gitExplorer")("view").value)===u.Auto&&this.context.workspaceState.update(c.WorkspaceState.GitExplorerView,e),this._view=e,c.setCommandContext(c.CommandContext.GitExplorerView,this._view),e!==u.Repository&&this.git.stopWatchingFileSystem())}switchTo(e){return o.__awaiter(this,void 0,void 0,function*(){this._view!==e&&this.reset(e,!0)})}setAutoRefresh(e,t){return o.__awaiter(this,void 0,void 0,function*(){void 0!==this._autoRefreshDisposable&&(this._autoRefreshDisposable.dispose(),this._autoRefreshDisposable=void 0);let i=!1;e&&(void 0===t?t=this.context.workspaceState.get(c.WorkspaceState.GitExplorerAutoRefresh,!0):(i=t,yield this.context.workspaceState.update(c.WorkspaceState.GitExplorerAutoRefresh,t),this._onDidChangeAutoRefresh.fire()),t&&(this._autoRefreshDisposable=this.git.onDidChange(this.onGitChanged,this),this.context.subscriptions.push(this._autoRefreshDisposable))),c.setCommandContext(c.CommandContext.GitExplorerAutoRefresh,e&&t),i&&this.refresh(h.RefreshReason.AutoRefreshChanged)})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(73),s=i(74),r=i(9),n=i(75),a=i(76),c=i(77),h=i(5),l=i(15);t.RemoteProvider=l.RemoteProvider;const d=i(78),u=new Map([["bitbucket.org",(e,t)=>new o.BitbucketService(e,t)],["github.com",(e,t)=>new a.GitHubService(e,t)],["gitlab.com",(e,t)=>new c.GitLabService(e,t)],["visualstudio.com",(e,t)=>new d.VisualStudioService(e,t)]]);t.RemoteProviderFactory=class{static factory(e){return(t,i)=>this.create(e,t,i)}static create(e,t,i){try{let o=t.toLowerCase();o.endsWith("visualstudio.com")&&(o="visualstudio.com");const s=e.get(o);if(void 0===s)return;return s(t,i)}catch(e){return void h.Logger.error(e,"RemoteProviderFactory")}}static createMap(e){const t=new Map(u);if(null!=e&&e.length>0)for(const i of e){const e=this.getCustomProvider(i);void 0!==e&&t.set(i.domain.toLowerCase(),e)}return t}static getCustomProvider(e){switch(e.type){case r.CustomRemoteType.Bitbucket:return(t,i)=>new o.BitbucketService(t,i,e.protocol,e.name,!0);case r.CustomRemoteType.BitbucketServer:return(t,i)=>new s.BitbucketServerService(t,i,e.protocol,e.name,!0);case r.CustomRemoteType.Custom:return(t,i)=>new n.CustomService(t,i,e.urls,e.protocol,e.name);case r.CustomRemoteType.GitHub:return(t,i)=>new a.GitHubService(t,i,e.protocol,e.name,!0);case r.CustomRemoteType.GitLab:return(t,i)=>new c.GitLabService(t,i,e.protocol,e.name,!0)}}}},function(e,t){e.exports=require("fs")},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(4),a=i(13),c=i(29),h=i(7);var l;!function(e){e.Blame="blame",e.Branch="branch",e.File="file",e.Stash="stash",e.StashFile="stash-file"}(l=t.GitCommitType||(t.GitCommitType={}));t.GitCommit=class{constructor(e,t,i,o,s,r,n,a,c,h){this.repoPath=t,this.sha=i,this.author=o,this.date=s,this.message=r,this.type=e,this._fileName=n||"",this.originalFileName=a,this._previousSha=c,this.previousFileName=h}get fileName(){return this.isFile?this._fileName:""}get shortSha(){return void 0===this._shortSha&&(this._shortSha=a.Git.shortenSha(this.sha)),this._shortSha}get isFile(){return this.type===l.Blame||this.type===l.File||this.type===l.StashFile}get isStash(){return this.type===l.Stash||this.type===l.StashFile}get isStagedUncommitted(){return void 0===this._isStagedUncommitted&&(this._isStagedUncommitted=a.Git.isStagedUncommitted(this.sha)),this._isStagedUncommitted}get isUncommitted(){return void 0===this._isUncommitted&&(this._isUncommitted=a.Git.isUncommitted(this.sha)),this._isUncommitted}get previousFileShortSha(){return a.Git.shortenSha(this.previousFileSha)}get previousSha(){return this._previousSha}set previousSha(e){e!==this._previousSha&&(this._previousSha=e,this._resolvedPreviousFileSha=void 0)}get previousShortSha(){return this.previousSha&&a.Git.shortenSha(this.previousSha)}get previousUri(){return this.previousFileName?r.Uri.file(h.resolve(this.repoPath,this.previousFileName||this.originalFileName)):this.uri}get uri(){return r.Uri.file(h.resolve(this.repoPath,this.fileName))}formatDate(e){return void 0===this._dateFormatter&&(this._dateFormatter=s.Dates.toFormatter(this.date)),this._dateFormatter.format(e)}fromNow(){return void 0===this._dateFormatter&&(this._dateFormatter=s.Dates.toFormatter(this.date)),this._dateFormatter.fromNow()}getFormattedPath(e=s.Strings.pad(n.GlyphChars.Dot,2,2)){return c.GitUri.getFormattedPath(this.fileName,e)}resolvePreviousFileSha(e){return o.__awaiter(this,void 0,void 0,function*(){void 0===this._resolvedPreviousFileSha&&(this._resolvedPreviousFileSha=yield e.resolveReference(this.repoPath,this.previousFileSha,this.fileName?this.previousUri:void 0))})}toGitUri(e=!1){return c.GitUri.fromCommit(this,e)}getChangedValue(e,t){return void 0===e?t:null!==e?e:void 0}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(4),a=i(3),c=i(7);class h extends r.Uri{constructor(e,t){if(void 0!==e){if(e.scheme===n.DocumentSchemes.GitLensGit){const t=JSON.parse(e.query);return super(e.scheme,e.authority,c.resolve(t.repoPath,t.fileName),e.query,e.fragment),this.repoPath=t.repoPath,void(!a.GitService.isStagedUncommitted(t.sha)&&a.GitService.isUncommitted(t.sha)||(this.sha=t.sha))}if(void 0!==t){if("string"==typeof t)return super(e.scheme,e.authority,e.path,e.query,e.fragment),void(this.repoPath=t);super(e.scheme,e.authority,c.resolve(t.repoPath,t.fileName||e.fsPath),e.query,e.fragment),this.repoPath=t.repoPath,!a.GitService.isStagedUncommitted(t.sha)&&a.GitService.isUncommitted(t.sha)||(this.sha=t.sha)}else super(e.scheme,e.authority,e.path,e.query,e.fragment)}else super()}get shortSha(){return this.sha&&a.GitService.shortenSha(this.sha)}fileUri(e=!0){return r.Uri.file(e&&this.sha?this.path:this.fsPath)}getFormattedPath(e=s.Strings.pad(n.GlyphChars.Dot,2,2),t){let i=c.dirname(this.fsPath);return this.repoPath&&(i=c.relative(this.repoPath,i)),void 0!==t&&(i=c.relative(t,i)),(i=a.GitService.normalizePath(i))&&"."!==i?`${c.basename(this.fsPath)}${e}${i}`:c.basename(this.fsPath)}getRelativePath(e){let t=c.relative(this.repoPath||"",this.fsPath);return void 0!==e&&(t=c.relative(e,t)),a.GitService.normalizePath(t)}static fromCommit(e,t=!1){return t?new h(e.previousUri,{repoPath:e.repoPath,sha:e.previousSha}):new h(e.uri,e)}static fromFileStatus(e,t,i,o=!1){const s=r.Uri.file(c.resolve(t,o&&e.originalFileName||e.fileName));return new h(s,void 0===i?t:{repoPath:t,sha:i})}static fromRepoPath(e,t){return new h(r.Uri.file(e),void 0===t?e:{repoPath:e,sha:t})}static fromRevisionUri(e){return new h(e)}static fromUri(e,t){return o.__awaiter(this,void 0,void 0,function*(){if(e instanceof h)return e;if(!t.isTrackable(e))return new h(e);if(e.scheme===n.DocumentSchemes.GitLensGit)return new h(e);if(e.scheme===n.DocumentSchemes.Git){const i=JSON.parse(e.query),o=yield t.getRepoPath(i.path);return new h(e,{fileName:i.path,repoPath:o,sha:""===i.ref||null==i.ref?void 0:i.ref})}const i=t.getGitUriForVersionedFile(e);return i||new h(e,yield t.getRepoPath(e))})}static getDirectory(e,t){let i=c.dirname(e);return void 0!==t&&(i=c.relative(t,i)),(i=a.GitService.normalizePath(i))&&"."!==i?i:""}static getFormattedPath(e,t=s.Strings.pad(n.GlyphChars.Dot,2,2),i){let o;if(e instanceof r.Uri){if(e instanceof h)return e.getFormattedPath(t,i);o=e.fsPath}else o=e;const a=h.getDirectory(o,i);return a?`${c.basename(o)}${t}${a}`:c.basename(o)}static getRelativePath(e,t,i){let o;if(e instanceof r.Uri){if(e instanceof h)return e.getRelativePath(t);o=e.fsPath}else o=e;let s=c.relative(i||"",o);return void 0!==t&&(s=c.relative(t,s)),a.GitService.normalizePath(s)}static toRevisionUri(e,t,i){let o,s,h;"string"==typeof e?(o="string"==typeof t?t:c.resolve(i,t.fileName),s=e,h=a.GitService.shortenSha(s)):(o=e.fsPath,i=e.repoPath,s=e.sha,h=e.shortSha);const l={fileName:a.GitService.normalizePath(c.relative(i,o)),repoPath:i,sha:s},d=c.parse(o);return r.Uri.parse(`${n.DocumentSchemes.GitLensGit}:${c.join(d.dir,d.name)}:${h}${d.ext}?${JSON.stringify(l)}`)}}t.GitUri=h},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(43),a=i(4),c=i(8),h=i(3),l=i(5),d=i(46),u=i(48),m=i(52),g=i(55);t.RepositoryNode=class extends c.ExplorerNode{constructor(e,t,i,o=!1){super(e),this.repo=t,this.explorer=i,this.active=o}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){return this.resetChildren(),this.updateSubscription(),this.children=[new u.StatusNode(this.uri,this.repo,this.explorer,this.active),new n.BranchesNode(this.uri,this.repo,this.explorer,this.active),new d.RemotesNode(this.uri,this.repo,this.explorer),new m.StashesNode(this.uri,this.repo,this.explorer),new g.TagsNode(this.uri,this.repo,this.explorer)],this.children})}getTreeItem(){this.updateSubscription();const e=this.active?`Active Repository ${s.Strings.pad(a.GlyphChars.Dash,1,1)} ${this.repo.formattedName||this.uri.repoPath}`:`${this.repo.formattedName||this.uri.repoPath}`,t=new r.TreeItem(e,this.active?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);return t.contextValue=c.ResourceType.Repository,t}updateSubscription(){this.explorer.autoRefresh?this.disposable=this.disposable||r.Disposable.from(this.explorer.onDidChangeAutoRefresh(this.onAutoRefreshChanged,this),this.repo.onDidChange(this.onRepoChanged,this)):void 0!==this.disposable&&(this.disposable.dispose(),this.disposable=void 0)}onAutoRefreshChanged(){this.updateSubscription()}onRepoChanged(e){if(l.Logger.log(`RepositoryNode.onRepoChanged(${e.changes.join()}); triggering node refresh`),void 0===this.children||e.changed(h.RepositoryChange.Repository)||e.changed(h.RepositoryChange.Config))this.explorer.refreshNode(this);else{if(e.changed(h.RepositoryChange.Stashes)){const e=this.children.find(e=>e instanceof m.StashesNode);void 0!==e&&this.explorer.refreshNode(e)}if(e.changed(h.RepositoryChange.Remotes)){const e=this.children.find(e=>e instanceof d.RemotesNode);void 0!==e&&this.explorer.refreshNode(e)}}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(20),a=i(4),c=i(8);t.BranchNode=class extends c.ExplorerRefNode{constructor(e,t,i){super(t),this.branch=e,this.explorer=i,this.supportsPaging=!0}get ref(){return this.branch.name}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){const e=yield this.explorer.git.getLogForRepo(this.uri.repoPath,{maxCount:this.maxCount,ref:this.branch.name});if(void 0===e)return[new c.MessageNode("No commits yet")];const t=[...s.Iterables.map(e.commits.values(),e=>new n.CommitNode(e,this.explorer,this.branch))];return e.truncated&&t.push(new c.ShowAllNode("Show All Commits",this,this.explorer)),t})}getTreeItem(){return o.__awaiter(this,void 0,void 0,function*(){let e=this.branch.getName();!this.branch.remote&&void 0!==this.branch.tracking&&this.explorer.config.showTrackingBranch&&(e+=` ${a.GlyphChars.Space}${a.GlyphChars.ArrowLeftRight}${a.GlyphChars.Space} ${this.branch.tracking}`);const t=new r.TreeItem(`${this.branch.current?`${a.GlyphChars.Check} ${a.GlyphChars.Space}`:""}${e}`,r.TreeItemCollapsibleState.Collapsed);this.branch.remote?t.contextValue=c.ResourceType.RemoteBranch:this.branch.current?t.contextValue=this.branch.tracking?c.ResourceType.CurrentBranchWithTracking:c.ResourceType.CurrentBranch:t.contextValue=this.branch.tracking?c.ResourceType.BranchWithTracking:c.ResourceType.Branch;let i="";return this.branch.tracking&&(this.branch.state.ahead&&this.branch.state.behind?i="-yellow":this.branch.state.ahead?i="-green":this.branch.state.behind&&(i="-red")),t.iconPath={dark:this.explorer.context.asAbsolutePath(`images/dark/icon-branch${i}.svg`),light:this.explorer.context.asAbsolutePath(`images/light/icon-branch${i}.svg`)},t})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(9),a=i(4),c=i(19),h=i(3),l=i(5);o.__exportStar(i(19),t);let d;t.ResultsExplorer=class{constructor(e,t,i){this.context=e,this.explorerCommands=t,this.git=i,this._roots=[],this._onDidChangeTreeData=new r.EventEmitter,d=this,r.commands.registerCommand("gitlens.resultsExplorer.refresh",this.refreshNodes,this),r.commands.registerCommand("gitlens.resultsExplorer.refreshNode",this.refreshNode,this),r.commands.registerCommand("gitlens.resultsExplorer.setFilesLayoutToAuto",()=>this.setFilesLayout(n.ExplorerFilesLayout.Auto),this),r.commands.registerCommand("gitlens.resultsExplorer.setFilesLayoutToList",()=>this.setFilesLayout(n.ExplorerFilesLayout.List),this),r.commands.registerCommand("gitlens.resultsExplorer.setFilesLayoutToTree",()=>this.setFilesLayout(n.ExplorerFilesLayout.Tree),this),r.commands.registerCommand("gitlens.resultsExplorer.clearResultsNode",this.clearResultsNode,this),r.commands.registerCommand("gitlens.resultsExplorer.close",this.close,this),r.commands.registerCommand("gitlens.resultsExplorer.setKeepResultsToOn",()=>this.setKeepResults(!0),this),r.commands.registerCommand("gitlens.resultsExplorer.setKeepResultsToOff",()=>this.setKeepResults(!1),this),a.setCommandContext(a.CommandContext.ResultsExplorerKeepResults,this.keepResults),e.subscriptions.push(n.configuration.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(n.configuration.initializingChangeEvent)}static get instance(){return d}get onDidChangeTreeData(){return this._onDidChangeTreeData.event}onConfigurationChanged(e){return o.__awaiter(this,void 0,void 0,function*(){const t=n.configuration.initializing(e),i=n.configuration.name("resultsExplorer");if(!t&&!n.configuration.changed(e,i.value))return;t||!n.configuration.changed(e,i("gravatars").value)&&!n.configuration.changed(e,i("gravatarsDefault").value)||h.clearGravatarCache();const o=n.configuration.get(i.value);t||0===this._roots.length||this.refresh(c.RefreshReason.ConfigurationChanged),this._config=o})}get config(){return this._config}get keepResults(){return this.context.workspaceState.get(a.WorkspaceState.ResultsExplorerKeepResults,!1)}close(){this.clearResults(),a.setCommandContext(a.CommandContext.ResultsExplorer,!1)}getChildren(e){return o.__awaiter(this,void 0,void 0,function*(){return 0===this._roots.length?[new c.MessageNode("No results")]:void 0===e?this._roots:e.getChildren()})}getTreeItem(e){return o.__awaiter(this,void 0,void 0,function*(){return e.getTreeItem()})}getQualifiedCommand(e){return`gitlens.resultsExplorer.${e}`}refresh(e){return o.__awaiter(this,void 0,void 0,function*(){void 0===e&&(e=c.RefreshReason.Command),l.Logger.log("ResultsExplorer.refresh",`reason='${e}'`),this._onDidChangeTreeData.fire()})}refreshNode(e,t){l.Logger.log("ResultsExplorer.refreshNode"),void 0!==t&&e.supportsPaging&&(e.maxCount=t.maxCount),e.refresh(),this._onDidChangeTreeData.fire(this._roots.includes(e)?void 0:e)}refreshNodes(){l.Logger.log("ResultsExplorer.refreshNodes"),this._roots.forEach(e=>e.refresh()),this._onDidChangeTreeData.fire()}showComparisonInResults(e,t,i){return o.__awaiter(this,void 0,void 0,function*(){this.addResults(new c.ComparisionResultsNode(e,t,i,this)),a.setCommandContext(a.CommandContext.ResultsExplorer,!0)})}showCommitsInResults(e,t){const i=void 0===e.query?t=>Promise.resolve(e):e.query;this.addResults(new c.CommitsResultsNode(e.repoPath,e=>{if("string"==typeof t)return t;const i=void 0!==e?e.count:0,o=void 0!==e&&e.truncated,s=void 0===t.resultsType?{singular:"result",plural:"results"}:t.resultsType;return 1===i?`1 ${s.singular} for ${t.label}`:`${0===i?"No":`${i}${o?"+":""}`} ${s.plural} for ${t.label}`},s.Functions.seeded(i,e),this,c.ResourceType.SearchResults)),a.setCommandContext(a.CommandContext.ResultsExplorer,!0)}addResults(e){return!this._roots.includes(e)&&(this._roots.length>0&&!this.keepResults&&this.clearResults(),this._roots.splice(0,0,e),this.refreshNode(e),!0)}clearResults(){0!==this._roots.length&&(this._roots.forEach(e=>e.dispose()),this._roots=[])}clearResultsNode(e){const t=this._roots.findIndex(t=>t===e);-1!==t&&(this._roots.splice(t,1),e.dispose(),this.refresh())}setFilesLayout(e){return o.__awaiter(this,void 0,void 0,function*(){return n.configuration.update(n.configuration.name("resultsExplorer")("files")("layout").value,e,r.ConfigurationTarget.Global)})}setKeepResults(e){this.context.workspaceState.update(a.WorkspaceState.ResultsExplorerKeepResults,e),a.setCommandContext(a.CommandContext.ResultsExplorerKeepResults,e)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(9),a=i(8),c=i(3);class h extends a.ExplorerNode{constructor(e,t,i,o,s){super(c.GitUri.fromRepoPath(e)),this.repoPath=e,this.folderName=t,this.relativePath=i,this.root=o,this.explorer=s,this.priority=!0}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===this.root.descendants||void 0===this.root.children)return[];let e;if(h.getFileNesting(this.explorer.config,this.root.descendants,void 0===this.relativePath)!==n.ExplorerFilesLayout.List){e=[];for(const t of s.Objects.values(this.root.children))void 0!==t.value?(t.value.relativePath=this.root.relativePath,e.push(t.value)):e.push(new h(this.repoPath,t.name,t.relativePath,t,this.explorer))}else this.root.descendants.forEach(e=>e.relativePath=this.root.relativePath),e=this.root.descendants;return e.sort((e,t)=>(e instanceof h?-1:1)-(t instanceof h?-1:1)||(e.priority?-1:1)-(t.priority?-1:1)||e.label.localeCompare(t.label)),e})}getTreeItem(){return o.__awaiter(this,void 0,void 0,function*(){const e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.Collapsed);return e.contextValue=a.ResourceType.Folder,e})}get label(){return this.folderName}static getFileNesting(e,t,i){const o=e.files.layout||n.ExplorerFilesLayout.Auto;if(o===n.ExplorerFilesLayout.Auto){if(i||e.files.compact){const i=e.files.threshold||5;if(t.length<=i)return n.ExplorerFilesLayout.List}return n.ExplorerFilesLayout.Tree}return o}}t.FolderNode=h},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});!function(e){function t(e,i,o,s=!1){if(Object(o)!==o)e[i]=s?null==o?null:"string"==typeof o?o:JSON.stringify(o):o;else if(Array.isArray(o)){const r=o.length;for(let n=0;n<r;n++)t(e,`${i}[${n}]`,o[n],s);0===r&&(e[i]=null)}else{let r=!0;for(const n in o)r=!1,t(e,i?`${i}.${n}`:n,o[n],s);r&&i&&(e[i]=null)}}e.entries=function*(e){for(const t in e)yield[t,e[t]]},e.flatten=function(e,i="",o=!1){const s=Object.create(null);return t(s,i,e,o),s},e.values=function*(e){for(const t in e)yield e[t]}}(t.Objects||(t.Objects={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});!function(e){function t(e,t){for(const i of e)if(t(i))return!0;return!1}e.every=function(e,t){for(const i of e)if(!t(i))return!1;return!0},e.filter=function*(e,t){if(void 0===t)for(const t of e)null!=t&&(yield t);else for(const i of e)t(i)&&(yield i)},e.filterMap=function*(e,t){for(const i of e){const e=t(i);null!=e&&(yield e)}},e.forEach=function(e,t){let i=0;for(const o of e)t(o,i),i++},e.find=function(e,t){for(const i of e)if(t(i))return i;return null},e.first=function(e){return e[Symbol.iterator]().next().value},e.flatMap=function*(e,t){for(const i of e)yield*t(i)},e.has=function(e,i){return t(e,e=>e===i)},e.isIterable=function(e){return"function"==typeof e[Symbol.iterator]},e.join=function(e,t){let i="";const o=e[Symbol.iterator]();let s=o.next();if(s.done)return i;for(;;){const e=s.value.toString();if((s=o.next()).done){i+=e;break}i+=`${e}${t}`}return i},e.last=function(e){let t=null;for(t of e);return t},e.map=function*(e,t){for(const i of e)yield t(i)},e.next=function(e){return e.next().value},e.skip=function*(e,t){let i=0;for(const o of e)i>=t&&(yield o),i++},e.some=t,e.take=function*(e,t){if(t>0){let i=0;for(const o of e)if(yield o,++i>=t)break}},e.union=function*(...e){for(const t of e)for(const e of t)yield e}}(t.Iterables||(t.Iterables={}))},function(e,t,i){"use strict";function o(e){if(e.match(/[\\\/]/))return e;const t=h.join(".",e);try{if(c.statSync(t))return t}catch(e){}const i=process.env.PATH.split(l?";":":");for(const t of i){const i=h.join(t,e);try{if(c.statSync(i))return i}catch(e){}}return e}function s(e,t){if(!l)return{cmd:o(e),args:t};if(!c.existsSync(e)){const i=[".exe",".bat",".cmd",".ps1"];for(const r of i){const i=o(`${e}${r}`);if(c.existsSync(i))return s(i,t)}}if(e.match(/\.ps1$/i)){return{cmd:h.join(process.env.SYSTEMROOT,"System32","WindowsPowerShell","v1.0","PowerShell.exe"),args:["-ExecutionPolicy","Unrestricted","-NoLogo","-NonInteractive","-File",e].concat(t)}}if(e.match(/\.(bat|cmd)$/i)){return{cmd:h.join(process.env.SYSTEMROOT,"System32","cmd.exe"),args:["/C",e,...t]}}if(e.match(/\.(js)$/i)){return{cmd:process.execPath,args:[e].concat(t)}}return{cmd:e,args:t}}Object.defineProperty(t,"__esModule",{value:!0});const r=i(0),n=i(80),a=i(5),c=i(27),h=i(7),l="win32"===process.platform;t.findExecutable=s,t.runCommand=function(e,t,i={}){const o=Object.assign({maxBuffer:10485760},i),{stdin:s,stdinEncoding:c}=o,h=r.__rest(o,["stdin","stdinEncoding"]);return new Promise((i,o)=>{const r=n.execFile(e,t,h,(s,r,n)=>{if(!s)return n&&a.Logger.warn(`Warning(${e} ${t.join(" ")}): ${n}`),void i(r);"stdout maxBuffer exceeded"===s.message&&o(new Error(`Command output exceeded the allocated stdout buffer. Set 'options.maxBuffer' to a larger value than ${h.maxBuffer} bytes`)),a.Logger.warn(`Error(${e} ${t.join(" ")}):  (${s.code}) ${n}`),o(s)});s&&r.stdin.end(s,c||"utf8")})}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0);o.__exportStar(i(83),t),o.__exportStar(i(84),t),o.__exportStar(i(28),t),o.__exportStar(i(85),t),o.__exportStar(i(39),t),o.__exportStar(i(86),t),o.__exportStar(i(87),t),o.__exportStar(i(88),t),o.__exportStar(i(40),t),o.__exportStar(i(89),t)},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(2),s=i(13),r=/^(.*?)\t(.*?)(?:\t(.*?))?$/gm,n=/^\s*(\d+)\sfiles? changed(?:,\s+(\d+)\s+insertions?\(\+\))?(?:,\s+(\d+)\s+deletions?\(-\))?/,a=/^@@ -([\d]+),([\d]+) [+]([\d]+),([\d]+) @@([\s\S]*?)(?=^@@)/gm;t.GitDiffParser=class{static parse(e,t=!1){if(!e)return;const i=[];let o,r,n,c=null;do{if(null==(c=a.exec(`${e}\n@@`)))break;o=(" "+c[5]).substr(1),r=parseInt(c[3],10),n=parseInt(c[1],10),i.push(new s.GitDiffChunk(o,{start:r,end:r+parseInt(c[4],10)},{start:n,end:n+parseInt(c[2],10)}))}while(null!=c);if(i.length)return{diff:t?e:void 0,chunks:i}}static parseChunk(e){const t=o.Iterables.skip(o.Strings.lines(e),1),i=[],s=[];let r=0;for(const e of t)switch(e[0]){case"+":i.push({line:` ${e.substring(1)}`,state:"added"}),r>0?r--:s.push(void 0);break;case"-":r++,s.push({line:` ${e.substring(1)}`,state:"removed"});break;default:for(;r>0;)r--,i.push(void 0);i.push({line:e,state:"unchanged"}),s.push({line:e,state:"unchanged"})}const n=[];let a=void 0,c=void 0;for(let e=0;e<i.length;e++)if(void 0!==(c=i[e]))a={line:c.line,state:c.state,previous:[s[e]]},n.push(a);else{if(void 0===a)continue;if(void 0===a.previous){a.previous=[s[e]];continue}a.previous.push(s[e])}return n}static parseNameStatus(e,t){if(!e)return;const i=[];let o=null;do{if(null==(o=r.exec(e)))break;i.push(s.GitStatusParser.parseStatusFile(t,o[1],o[2],o[3]))}while(null!=o);return i.length?i:void 0}static parseShortStat(e){if(!e)return;const t=n.exec(e);if(null==t)return;const i=t[1],o=t[2],s=t[3];return{files:null==i?0:parseInt(i,10),insertions:null==o?0:parseInt(o,10),deletions:null==s?0:parseInt(s,10)}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(2),s=i(1),r=i(28),n=i(13),a=i(7),c=new Map;t.clearGravatarCache=function(){c.clear()};class h extends r.GitCommit{constructor(e,t,i,o,s,r,n,a,c,h,l,d,u,m){super(e,t,i,o,r,n,a,l,d,u),this.email=s,this.fileStatuses=c,this.status=h,this.parentShas=m}get isMerge(){return this.parentShas&&this.parentShas.length>1}get nextShortSha(){return this.nextSha&&n.Git.shortenSha(this.nextSha)}get nextUri(){return this.nextFileName?s.Uri.file(a.resolve(this.repoPath,this.nextFileName)):this.uri}get previousFileSha(){return void 0!==this._resolvedPreviousFileSha?this._resolvedPreviousFileSha:this.isFile&&this.previousSha?this.previousSha:`${this.sha}^`}getDiffStatus(){let e=0,t=0,i=0;for(const o of this.fileStatuses)switch(o.status){case"A":case"?":e++;break;case"D":t++;break;default:i++}return`+${e} ~${i} -${t}`}getGravatarUri(e){const t=this.email?`${this.email.trim().toLowerCase()}`:"";let i=c.get(t);if(void 0!==i)return i;const r=(i=s.Uri.parse(`https://www.gravatar.com/avatar/${this.email?o.Strings.md5(this.email):"00000000000000000000000000000000"}.jpg?s=22&d=${e}`)).toString;return i.toString=function(e){return r.call(i,!0)},c.set(t,i),i}toFileCommit(e){let t;if("string"==typeof e){const i=n.Git.normalizePath(a.relative(this.repoPath,e));if(void 0===(t=this.fileStatuses.find(e=>e.fileName===i)))return}else t=e;const i=this.isFile?this.previousSha:`${this.sha}^`;return this.with({type:this.isStash?r.GitCommitType.StashFile:r.GitCommitType.File,fileName:t.fileName,originalFileName:t.originalFileName,previousSha:i,previousFileName:t.originalFileName||t.fileName,status:t.status,fileStatuses:[t]})}with(e){return new h(e.type||this.type,this.repoPath,this.getChangedValue(e.sha,this.sha),e.author||this.author,e.email||this.email,e.date||this.date,e.message||this.message,e.fileName||this.fileName,this.getChangedValue(e.fileStatuses,this.fileStatuses)||[],e.status||this.status,this.getChangedValue(e.originalFileName,this.originalFileName),this.getChangedValue(e.previousSha,this.previousSha),this.getChangedValue(e.previousFileName,this.previousFileName),void 0)}}t.GitLogCommit=h},function(e,t,i){"use strict";function o(e,t=n.GlyphChars.Space.repeat(4)){return l[e]||t}Object.defineProperty(t,"__esModule",{value:!0});const s=i(2),r=i(1),n=i(4),a=i(29),c=i(7);class h{constructor(e,t,i,o,s){this.repoPath=e,this.indexStatus=t,this.workTreeStatus=i,this.fileName=o,this.originalFileName=s}get status(){return this.indexStatus||this.workTreeStatus||"?"}get staged(){return void 0!==this.indexStatus}get uri(){return r.Uri.file(c.resolve(this.repoPath,this.fileName))}getFormattedDirectory(e=!1){return h.getFormattedDirectory(this,e)}getFormattedPath(e=s.Strings.pad(n.GlyphChars.Dot,2,2)){return h.getFormattedPath(this,e)}getOcticon(){return o(this.status)}with(e){return new h(this.repoPath,this.getChangedValue(e.indexStatus,this.indexStatus),this.getChangedValue(e.workTreeStatus,this.workTreeStatus),e.fileName||this.fileName,this.getChangedValue(e.originalFileName,this.originalFileName))}getChangedValue(e,t){return void 0===e?t:null!==e?e:void 0}static getFormattedDirectory(e,t=!1,i){const o=a.GitUri.getDirectory(e.fileName,i);return t&&"R"===e.status&&e.originalFileName?`${o} ${s.Strings.pad(n.GlyphChars.ArrowLeft,1,1)} ${e.originalFileName}`:o}static getFormattedPath(e,t=s.Strings.pad(n.GlyphChars.Dot,2,2),i){return a.GitUri.getFormattedPath(e.fileName,t,i)}static getRelativePath(e,t){return a.GitUri.getRelativePath(e.fileName,t)}}t.GitStatusFile=h;const l={"!":"$(diff-ignored)","?":"$(diff-added)",A:"$(diff-added)",C:"$(diff-added)",D:"$(diff-removed)",M:"$(diff-modified)",R:"$(diff-renamed)",T:"$(diff-modified)",U:"$(alert)",X:"$(question)",B:"$(question)"};t.getGitStatusOcticon=o;const d={"!":"icon-status-ignored.svg","?":"icon-status-untracked.svg",A:"icon-status-added.svg",C:"icon-status-copied.svg",D:"icon-status-deleted.svg",M:"icon-status-modified.svg",R:"icon-status-renamed.svg",T:"icon-status-modified.svg",U:"icon-status-conflict.svg",X:"icon-status-unknown.svg",B:"icon-status-unknown.svg"};t.getGitStatusIcon=function(e){return d[e]||d.X}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(2);class s{constructor(e,t){this.collapsableWhitespace=0,this.reset(e,t)}reset(e,t){this._item=e,void 0===t&&void 0!==this._options||(void 0===t&&(t={}),null==t.dateFormat&&(t.dateFormat="MMMM Do, YYYY h:MMa"),null==t.tokenOptions&&(t.tokenOptions={}),this._options=t)}_padOrTruncate(e,t){void 0===t&&(t={truncateTo:void 0,padDirection:"left",collapseWhitespace:!1});let i=t.truncateTo;const s=o.Strings.width(e);if(void 0===i){if(0===this.collapsableWhitespace)return e;const i=this.collapsableWhitespace-s;return this.collapsableWhitespace=0,i<=0?e:void 0===t.truncateTo?e:o.Strings.padLeft(e,i)}i+=this.collapsableWhitespace,this.collapsableWhitespace=0;const r=i-s;return r>0?(t.collapseWhitespace&&(this.collapsableWhitespace=r),"left"===t.padDirection?o.Strings.padLeft(e,i):(t.collapseWhitespace&&(i-=r),o.Strings.padRight(e,i))):r<0?o.Strings.truncate(e,i):e}static fromTemplateCore(e,t,i,r){if(e instanceof s)return o.Strings.interpolate(t,e);let n=void 0;if(null==r||"string"==typeof r){n={dateFormat:r,tokenOptions:o.Strings.getTokensFromTemplate(t).reduce((e,t)=>(e[t.key]=t.options,e),{})}}else n=r;return void 0===this._formatter?this._formatter=new e(i,n):this._formatter.reset(i,n),o.Strings.interpolate(t,this._formatter)}}s._formatter=void 0,t.Formatter=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(4),a=i(8),c=i(3),h=i(30);t.ActiveRepositoryNode=class extends a.ExplorerNode{constructor(e){super(void 0),this.explorer=e,e.context.subscriptions.push(r.window.onDidChangeActiveTextEditor(s.Functions.debounce(this.onActiveEditorChanged,500),this)),this.onActiveEditorChanged(r.window.activeTextEditor)}dispose(){super.dispose(),void 0!==this._repositoryNode&&(this._repositoryNode.dispose(),this._repositoryNode=void 0)}onActiveEditorChanged(e){return o.__awaiter(this,void 0,void 0,function*(){if(void 0!==e&&!n.isTextEditor(e))return;let t=!1;try{const i=yield this.explorer.git.getActiveRepoPath(e);if(void 0===i)return void(void 0!==this._repositoryNode&&(t=!0,this._repositoryNode.dispose(),this._repositoryNode=void 0));if(void 0!==this._repositoryNode&&this._repositoryNode.repo.path===i)return;const o=yield this.explorer.git.getRepository(i);if(void 0===o)return void(void 0!==this._repositoryNode&&(t=!0,this._repositoryNode.dispose(),this._repositoryNode=void 0));t=!0,void 0!==this._repositoryNode&&this._repositoryNode.dispose(),this._repositoryNode=new h.RepositoryNode(c.GitUri.fromRepoPath(o.path),o,this.explorer,!0)}finally{t&&this.explorer.refreshNode(this)}})}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){return void 0!==this._repositoryNode?this._repositoryNode.getChildren():[]})}getTreeItem(){return void 0!==this._repositoryNode?this._repositoryNode.getTreeItem():new r.TreeItem("No active repository",r.TreeItemCollapsibleState.None)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(31),a=i(8);t.BranchesNode=class extends a.ExplorerNode{constructor(e,t,i,o=!1){super(e),this.repo=t,this.explorer=i,this.active=o}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){const e=yield this.repo.getBranches();return void 0===e?[]:(e.sort((e,t)=>(e.current?-1:1)-(t.current?-1:1)||e.name.localeCompare(t.name)),[...s.Iterables.filterMap(e,e=>e.remote?void 0:new n.BranchNode(e,this.uri,this.explorer))])})}getTreeItem(){return o.__awaiter(this,void 0,void 0,function*(){const e=new r.TreeItem("Branches",this.active?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed),t=yield this.repo.getRemotes();return e.contextValue=void 0!==t&&t.length>0?a.ResourceType.BranchesWithRemotes:a.ResourceType.Branches,e.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-branch.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-branch.svg")},e})}}},function(e,t){e.exports=require("copy-paste")},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(16),n=i(4),a=i(3),c=i(14);class h{constructor(e){this.branchOrTag=e,e instanceof a.GitBranch?(this.label=`${e.current?`$(check)${n.GlyphChars.Space}`:n.GlyphChars.Space.repeat(4)} ${e.name}`,this.description=e.remote?`${n.GlyphChars.Space.repeat(2)} remote branch`:""):(this.label=`${n.GlyphChars.Space.repeat(4)} ${e.name}`,this.description=`${n.GlyphChars.Space.repeat(2)} tag`)}get name(){return this.branchOrTag.name}get remote(){return this.branchOrTag instanceof a.GitBranch&&this.branchOrTag.remote}}t.BranchOrTagQuickPickItem=h;t.BranchesAndTagsQuickPick=class{static showProgress(e){return r.showQuickPickProgress(e,{left:c.KeyNoopCommand,",":c.KeyNoopCommand,".":c.KeyNoopCommand})}static show(e,t,i,n={}){return o.__awaiter(this,void 0,void 0,function*(){const o=[...e.filter(e=>!e.remote).map(e=>new h(e)),...t.map(e=>new h(e)),...e.filter(e=>e.remote).map(e=>new h(e))];if(void 0!==n.goBackCommand&&o.splice(0,0,n.goBackCommand),void 0!==n.progressCancellation&&n.progressCancellation.token.isCancellationRequested)return;const a=yield c.Keyboard.instance.beginScope({left:n.goBackCommand||c.KeyNoopCommand});n.progressCancellation&&n.progressCancellation.cancel();const l=yield s.window.showQuickPick(o,{placeHolder:i,ignoreFocusOut:r.getQuickPickIgnoreFocusOut()});return yield a.dispose(),l})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(8),a=i(47);t.RemotesNode=class extends n.ExplorerNode{constructor(e,t,i){super(e),this.repo=t,this.explorer=i}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){const e=yield this.repo.getRemotes();return void 0===e||0===e.length?[new n.MessageNode("No remotes configured")]:(e.sort((e,t)=>e.name.localeCompare(t.name)),[...s.Iterables.map(e,e=>new a.RemoteNode(e,this.uri,this.repo,this.explorer))])})}getTreeItem(){const e=new r.TreeItem("Remotes",r.TreeItemCollapsibleState.Collapsed);return e.contextValue=n.ResourceType.Remotes,e.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-remote.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-remote.svg")},e}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(31),a=i(4),c=i(8),h=i(3);t.RemoteNode=class extends c.ExplorerNode{constructor(e,t,i,o){super(t),this.remote=e,this.repo=i,this.explorer=o}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){const e=yield this.repo.getBranches();return void 0===e?[]:(e.sort((e,t)=>e.name.localeCompare(t.name)),[...s.Iterables.filterMap(e,e=>e.remote&&e.name.startsWith(this.remote.name)?new n.BranchNode(e,this.uri,this.explorer):void 0)])})}getTreeItem(){const e=this.remote.types.find(e=>e.type===h.GitRemoteType.Fetch),t=this.remote.types.find(e=>e.type===h.GitRemoteType.Push);let i;i=e&&t?a.GlyphChars.ArrowLeftRight:e?a.GlyphChars.ArrowLeft:t?a.GlyphChars.ArrowRight:a.GlyphChars.Dash;const o=`${this.remote.name} ${a.GlyphChars.Space}${i}${a.GlyphChars.Space} ${void 0!==this.remote.provider?this.remote.provider.name:this.remote.domain} ${a.GlyphChars.Space}${a.GlyphChars.Dot}${a.GlyphChars.Space} ${this.remote.path}`,s=new r.TreeItem(o,r.TreeItemCollapsibleState.Collapsed);return s.contextValue=c.ResourceType.Remote,s}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(8),n=i(49),a=i(51);t.StatusNode=class extends r.ExplorerNode{constructor(e,t,i,o=!1){super(e),this.repo=t,this.explorer=i,this.active=o}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){this.resetChildren(),this.children=[];const e=yield this.repo.getStatus();if(void 0===e)return this.children;if(e.state.behind&&this.children.push(new a.StatusUpstreamNode(e,"behind",this.explorer)),e.state.ahead&&this.children.push(new a.StatusUpstreamNode(e,"ahead",this.explorer)),e.state.ahead||0!==e.files.length&&this.includeWorkingTree){const t=e.upstream?`${e.upstream}..${e.branch}`:void 0;this.children.push(new n.StatusFilesNode(e,t,this.explorer))}return this.children})}getTreeItem(){return o.__awaiter(this,void 0,void 0,function*(){void 0!==this.disposable&&(this.disposable.dispose(),this.disposable=void 0);const e=yield this.repo.getStatus();if(void 0===e)return new s.TreeItem("No repo status");this.explorer.autoRefresh&&this.includeWorkingTree&&(this.disposable=s.Disposable.from(this.explorer.onDidChangeAutoRefresh(this.onAutoRefreshChanged,this),this.repo.onDidChangeFileSystem(this.onFileSystemChanged,this),{dispose:()=>this.repo.stopWatchingFileSystem()}),this.repo.startWatchingFileSystem());let t=!1;const i=0!==e.files.length&&this.includeWorkingTree;let o="",n="";e.upstream?e.state.ahead||e.state.behind?(o=`${e.branch}${i?" has uncommitted changes and":""} is not up-to-date with ${e.upstream}`,t=!0,e.state.ahead&&e.state.behind?n="-yellow":e.state.ahead?n="-green":e.state.behind&&(n="-red")):o=`${e.branch}${i?" has uncommitted changes and":""} is up-to-date with ${e.upstream}`:o=`${e.branch} ${i?"has uncommitted changes":this.includeWorkingTree?"has no changes":"has nothing to commit"}`;let a;a=t||i?this.active?s.TreeItemCollapsibleState.Expanded:s.TreeItemCollapsibleState.Collapsed:s.TreeItemCollapsibleState.None;const c=new s.TreeItem(o,a);return c.contextValue=r.ResourceType.Status,c.iconPath={dark:this.explorer.context.asAbsolutePath(`images/dark/icon-repo${n}.svg`),light:this.explorer.context.asAbsolutePath(`images/light/icon-repo${n}.svg`)},c})}get includeWorkingTree(){return this.explorer.config.includeWorkingTree}onAutoRefreshChanged(){void 0!==this.disposable&&(this.disposable.dispose(),this.disposable=void 0)}onFileSystemChanged(e){return o.__awaiter(this,void 0,void 0,function*(){this.explorer.refreshNode(this)})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(9),a=i(8),c=i(33),h=i(3),l=i(50),d=i(7);t.StatusFilesNode=class extends a.ExplorerNode{constructor(e,t,i){super(h.GitUri.fromRepoPath(e.repoPath)),this.status=e,this.range=t,this.explorer=i,this.supportsPaging=!0,this.repoPath=e.repoPath}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){let e=[];const t=this.repoPath;let i;void 0!==this.range&&void 0!==(i=yield this.explorer.git.getLogForRepo(t,{maxCount:this.maxCount,ref:this.range}))&&(e=Array.from(s.Iterables.flatMap(i.commits.values(),e=>e.fileStatuses.map(t=>Object.assign({},t,{commit:e}))))),0!==this.status.files.length&&this.includeWorkingTree&&e.splice(0,0,...s.Iterables.flatMap(this.status.files,e=>{if(void 0!==e.workTreeStatus&&void 0!==e.indexStatus){const i=new Date;return i.setMilliseconds(i.getMilliseconds()-1),[Object.assign({},e,{status:e.status,commit:new h.GitLogCommit(h.GitCommitType.File,t,h.GitService.uncommittedSha,"You",void 0,new Date,"",e.fileName,[e],e.status,e.originalFileName,h.GitService.stagedUncommittedSha,e.fileName)}),Object.assign({},e,{status:e.status,commit:new h.GitLogCommit(h.GitCommitType.File,t,h.GitService.stagedUncommittedSha,"You",void 0,i,"",e.fileName,[e],e.status,e.originalFileName,"HEAD",e.fileName)})]}return void 0!==e.indexStatus?[Object.assign({},e,{status:e.status,commit:new h.GitLogCommit(h.GitCommitType.File,t,h.GitService.stagedUncommittedSha,"You",void 0,new Date,"",e.fileName,[e],e.status,e.originalFileName,"HEAD",e.fileName)})]:[Object.assign({},e,{status:e.status,commit:new h.GitLogCommit(h.GitCommitType.File,t,h.GitService.uncommittedSha,"You",void 0,new Date,"",e.fileName,[e],e.status,e.originalFileName,"HEAD",e.fileName)})]})),e.sort((e,t)=>t.commit.date.getTime()-e.commit.date.getTime());const o=s.Arrays.groupBy(e,e=>e.fileName);let r=[...s.Iterables.map(s.Objects.values(o),e=>new l.StatusFileCommitsNode(t,e[e.length-1],e.map(e=>e.commit),this.explorer))];if(this.explorer.config.files.layout!==n.ExplorerFilesLayout.List){const e=s.Arrays.makeHierarchical(r,e=>e.uri.getRelativePath().split("/"),(...e)=>h.GitService.normalizePath(d.join(...e)),this.explorer.config.files.compact);r=yield new c.FolderNode(t,"",void 0,e,this.explorer).getChildren()}else r.sort((e,t)=>(e.priority?-1:1)-(t.priority?-1:1)||e.label.localeCompare(t.label));return void 0!==i&&i.truncated&&r.push(new a.ShowAllNode("Show All Changes",this,this.explorer)),r})}getTreeItem(){return o.__awaiter(this,void 0,void 0,function*(){let e=void 0!==this.status.files&&this.includeWorkingTree?this.status.files.length:0;if(void 0!==this.status.upstream){const t=yield this.explorer.git.getChangedFilesCount(this.repoPath,`${this.status.upstream}...`);void 0!==t&&(e+=t.files)}const t=`${e} file${e>1?"s":""} changed`,i=new r.TreeItem(t,r.TreeItemCollapsibleState.Collapsed);return i.contextValue=a.ResourceType.StatusFiles,i.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-diff.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-diff.svg")},i})}get includeWorkingTree(){return this.explorer.config.includeWorkingTree}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(11),n=i(22),a=i(8),c=i(3),h=i(7);t.StatusFileCommitsNode=class extends a.ExplorerNode{constructor(e,t,i,o){super(c.GitUri.fromFileStatus(t,e,"HEAD")),this.repoPath=e,this.status=t,this.commits=i,this.explorer=o}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){return this.commits.map(e=>new n.CommitFileNode(this.status,e,this.explorer,n.CommitFileNodeDisplayAs.CommitLabel|(this.explorer.config.gravatars?n.CommitFileNodeDisplayAs.Gravatar:n.CommitFileNodeDisplayAs.CommitIcon)))})}getTreeItem(){return o.__awaiter(this,void 0,void 0,function*(){const e=new s.TreeItem(this.label,s.TreeItemCollapsibleState.Collapsed);e.contextValue=a.ResourceType.StatusFileCommits;const t=c.getGitStatusIcon(this.status.status);return e.iconPath={dark:this.explorer.context.asAbsolutePath(h.join("images","dark",t)),light:this.explorer.context.asAbsolutePath(h.join("images","light",t))},1===this.commits.length&&this.commits[0].isUncommitted&&(e.collapsibleState=s.TreeItemCollapsibleState.None,e.contextValue=a.ResourceType.StatusFile,e.command=this.getCommand()),this._label=void 0,e})}get folderName(){return void 0===this._folderName&&(this._folderName=h.dirname(this.uri.getRelativePath())),this._folderName}get label(){return void 0===this._label&&(this._label=c.StatusFileFormatter.fromTemplate(this.explorer.config.statusFileFormat,Object.assign({},this.status,{commit:this.commit}),{relativePath:this.relativePath})),this._label}get commit(){return this.commits[0]}get priority(){return this.commit.isUncommitted}get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0}getCommand(){return{title:"Compare File with Previous Revision",command:r.Commands.DiffWithPrevious,arguments:[c.GitUri.fromFileStatus(this.status,this.repoPath),{commit:this.commit,line:0,showOptions:{preserveFocus:!0,preview:!0}}]}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(20),a=i(8),c=i(3);t.StatusUpstreamNode=class extends a.ExplorerNode{constructor(e,t,i){super(c.GitUri.fromRepoPath(e.repoPath)),this.status=e,this.direction=t,this.explorer=i}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){const e="ahead"===this.direction?`${this.status.upstream}..${this.status.branch}`:`${this.status.branch}..${this.status.upstream}`;let t=yield this.explorer.git.getLogForRepo(this.uri.repoPath,{maxCount:0,ref:e});if(void 0===t)return[];if("ahead"!==this.direction)return[...s.Iterables.map(t.commits.values(),e=>new n.CommitNode(e,this.explorer))];const i=Array.from(t.commits.values()),o=i[i.length-1];return void 0===o.previousSha&&void 0!==(t=yield this.explorer.git.getLogForRepo(this.uri.repoPath,{maxCount:2,ref:o.sha}))&&(i[i.length-1]=s.Iterables.first(t.commits.values())),[...s.Iterables.map(i,e=>new n.CommitNode(e,this.explorer))]})}getTreeItem(){return o.__awaiter(this,void 0,void 0,function*(){const e="ahead"===this.direction?`${this.status.state.ahead} commit${this.status.state.ahead>1?"s":""} (ahead of ${this.status.upstream})`:`${this.status.state.behind} commit${this.status.state.behind>1?"s":""} (behind ${this.status.upstream})`,t=new r.TreeItem(e,r.TreeItemCollapsibleState.Collapsed);return t.contextValue=a.ResourceType.StatusUpstream,t.iconPath={dark:this.explorer.context.asAbsolutePath(`images/dark/icon-${"ahead"===this.direction?"upload":"download"}.svg`),light:this.explorer.context.asAbsolutePath(`images/light/icon-${"ahead"===this.direction?"upload":"download"}.svg`)},t})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(8),a=i(53);t.StashesNode=class extends n.ExplorerNode{constructor(e,t,i){super(e),this.repo=t,this.explorer=i}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){const e=yield this.repo.getStashList();return void 0===e?[new n.MessageNode("No stashed changes")]:[...s.Iterables.map(e.commits.values(),e=>new a.StashNode(e,this.explorer))]})}getTreeItem(){const e=new r.TreeItem("Stashes",r.TreeItemCollapsibleState.Collapsed);return e.contextValue=n.ResourceType.Stashes,e.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-stash.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-stash.svg")},e}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(8),a=i(3),c=i(54);t.StashNode=class extends n.ExplorerRefNode{constructor(e,t){super(e.toGitUri()),this.commit=e,this.explorer=t}get ref(){return this.commit.sha}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){const e=this.commit.fileStatuses,t=yield this.explorer.git.getLogForRepo(this.commit.repoPath,{maxCount:1,ref:`${this.commit.stashName}^3`});if(void 0!==t){const i=s.Iterables.first(t.commits.values());void 0!==i&&0!==i.fileStatuses.length&&(i.fileStatuses.forEach(e=>e.status="?"),e.splice(e.length,0,...i.fileStatuses))}const i=e.map(e=>new c.StashFileNode(e,this.commit.toFileCommit(e),this.explorer));return i.sort((e,t)=>e.label.localeCompare(t.label)),i})}getTreeItem(){const e=new r.TreeItem(a.CommitFormatter.fromTemplate(this.explorer.config.stashFormat,this.commit,{truncateMessageAtNewLine:!0,dataFormat:this.explorer.git.config.defaultDateFormat}),r.TreeItemCollapsibleState.Collapsed);return e.contextValue=n.ResourceType.Stash,e}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(22),s=i(8);t.StashFileNode=class extends o.CommitFileNode{constructor(e,t,i){super(e,t,i,o.CommitFileNodeDisplayAs.File)}get resourceType(){return s.ResourceType.StashFile}getCommitTemplate(){return this.explorer.config.stashFormat}getCommitFileTemplate(){return this.explorer.config.stashFileFormat}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(8),n=i(56);t.TagsNode=class extends r.ExplorerNode{constructor(e,t,i){super(e),this.repo=t,this.explorer=i}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){const e=yield this.repo.getTags();return 0===e.length?[new r.MessageNode("No tags yet")]:(e.sort((e,t)=>e.name.localeCompare(t.name)),[...e.map(e=>new n.TagNode(e,this.uri,this.explorer))])})}getTreeItem(){return o.__awaiter(this,void 0,void 0,function*(){const e=new s.TreeItem("Tags",s.TreeItemCollapsibleState.Collapsed);return e.contextValue=r.ResourceType.Tags,e.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-tag.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-tag.svg")},e})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(20),a=i(8);t.TagNode=class extends a.ExplorerRefNode{constructor(e,t,i){super(t),this.tag=e,this.explorer=i,this.supportsPaging=!0}get ref(){return this.tag.name}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){const e=yield this.explorer.git.getLogForRepo(this.uri.repoPath,{maxCount:this.maxCount,ref:this.tag.name});if(void 0===e)return[new a.MessageNode("No commits yet")];const t=[...s.Iterables.map(e.commits.values(),e=>new n.CommitNode(e,this.explorer))];return e.truncated&&t.push(new a.ShowAllNode("Show All Commits",this,this.explorer)),t})}getTreeItem(){return o.__awaiter(this,void 0,void 0,function*(){const e=new r.TreeItem(this.tag.name,r.TreeItemCollapsibleState.Collapsed);return e.contextValue=a.ResourceType.Tag,e.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-tag.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-tag.svg")},e})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(20),a=i(8),c=i(3);t.CommitsResultsNode=class extends a.ExplorerNode{constructor(e,t,i,o,s=a.ResourceType.Results){super(c.GitUri.fromRepoPath(e)),this.repoPath=e,this.labelFn=t,this.logFn=i,this.explorer=o,this.contextValue=s,this.supportsPaging=!0}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){const e=yield this.getLog();if(void 0===e)return[];const t=[...s.Iterables.map(e.commits.values(),e=>new n.CommitNode(e,this.explorer))];return e.truncated&&t.push(new a.ShowAllNode("Show All Results",this,this.explorer)),t})}getTreeItem(){return o.__awaiter(this,void 0,void 0,function*(){const e=yield this.getLog(),t=new r.TreeItem(yield this.getLabel(),e&&e.count>0?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.None);return t.contextValue=this.contextValue,t})}refresh(){this._cache=void 0}ensureCache(){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===this._cache){const e=yield this.logFn(this.maxCount);this._cache={label:this.labelFn(e),log:e}}return this._cache})}getLabel(){return o.__awaiter(this,void 0,void 0,function*(){return(yield this.ensureCache()).label})}getLog(){return o.__awaiter(this,void 0,void 0,function*(){return(yield this.ensureCache()).log})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(9),a=i(8),c=i(33),h=i(3),l=i(59),d=i(7);t.StatusFilesResultsNode=class extends a.ExplorerNode{constructor(e,t,i,o,s,r){super(h.GitUri.fromRepoPath(e)),this.repoPath=e,this.ref1=t,this.ref2=i,this.labelFn=o,this.diffFn=s,this.explorer=r,this.supportsPaging=!0}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){const e=yield this.getDiff();if(void 0===e)return[];let t=[...s.Iterables.map(e,e=>new l.StatusFileNode(this.repoPath,e,this.ref1,this.ref2,this.explorer))];if(this.explorer.config.files.layout!==n.ExplorerFilesLayout.List){const e=s.Arrays.makeHierarchical(t,e=>e.uri.getRelativePath().split("/"),(...e)=>h.GitService.normalizePath(d.join(...e)),this.explorer.config.files.compact);t=yield new c.FolderNode(this.repoPath,"",void 0,e,this.explorer).getChildren()}else t.sort((e,t)=>(e.priority?-1:1)-(t.priority?-1:1)||e.label.localeCompare(t.label));return t})}getTreeItem(){return o.__awaiter(this,void 0,void 0,function*(){const e=yield this.getDiff(),t=new r.TreeItem(yield this.getLabel(),e&&e.length>0?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.None);return t.contextValue=a.ResourceType.Results,t})}refresh(){this._cache=void 0}ensureCache(){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===this._cache){const e=yield this.diffFn();this._cache={label:this.labelFn(e),diff:e}}return this._cache})}getLabel(){return o.__awaiter(this,void 0,void 0,function*(){return(yield this.ensureCache()).label})}getDiff(){return o.__awaiter(this,void 0,void 0,function*(){return(yield this.ensureCache()).diff})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(1),s=i(11),r=i(8),n=i(3),a=i(7);t.StatusFileNode=class extends r.ExplorerNode{constructor(e,t,i,o,s){super(n.GitUri.fromFileStatus(t,e)),this.repoPath=e,this.status=t,this.ref1=i,this.ref2=o,this.explorer=s}getChildren(){return[]}getTreeItem(){const e=new o.TreeItem(this.label,o.TreeItemCollapsibleState.None);e.contextValue=r.ResourceType.StatusFile;const t=n.getGitStatusIcon(this.status.status);return e.iconPath={dark:this.explorer.context.asAbsolutePath(a.join("images","dark",t)),light:this.explorer.context.asAbsolutePath(a.join("images","light",t))},e.command=this.getCommand(),e}get folderName(){return void 0===this._folderName&&(this._folderName=a.dirname(this.uri.getRelativePath())),this._folderName}get label(){return void 0===this._label&&(this._label=n.StatusFileFormatter.fromTemplate(this.explorer.config.statusFileFormat,this.status,{relativePath:this.relativePath})),this._label}get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0}get priority(){return!1}getCommand(){return{title:"Open Changes",command:s.Commands.DiffWith,arguments:[this.uri,{lhs:{sha:this.ref1,uri:this.uri},rhs:{sha:this.ref2,uri:this.uri},repoPath:this.uri.repoPath,line:0,showOptions:{preserveFocus:!0,preview:!0}}]}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(22),a=i(8),c=i(3),h=i(5);t.FileHistoryNode=class extends a.ExplorerNode{constructor(e,t,i){super(e),this.repo=t,this.explorer=i}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){this.updateSubscription();const e=[],t=n.CommitFileNodeDisplayAs.CommitLabel|(this.explorer.config.gravatars?n.CommitFileNodeDisplayAs.Gravatar:n.CommitFileNodeDisplayAs.StatusIcon),i=yield this.explorer.git.getStatusForFile(this.uri.repoPath,this.uri.fsPath);if(void 0!==i&&(void 0!==i.indexStatus||void 0!==i.workTreeStatus)){let o,s;void 0!==i.workTreeStatus?(o=c.GitService.uncommittedSha,void 0!==i.indexStatus?s=c.GitService.stagedUncommittedSha:"?"!==i.workTreeStatus&&(s="HEAD")):(o=c.GitService.stagedUncommittedSha,s="HEAD");const r=new c.GitLogCommit(c.GitCommitType.File,this.uri.repoPath,o,"You",void 0,new Date,"",i.fileName,[i],i.status,i.originalFileName,s,i.originalFileName||i.fileName);e.push(new n.CommitFileNode(i,r,this.explorer,t))}const o=yield this.explorer.git.getLogForFile(this.uri.repoPath,this.uri.fsPath,{ref:this.uri.sha});return void 0!==o&&e.push(...s.Iterables.map(o.commits.values(),e=>new n.CommitFileNode(e.fileStatuses[0],e,this.explorer,t))),0===e.length?[new a.MessageNode("No file history")]:e})}getTreeItem(){this.updateSubscription();const e=new r.TreeItem(`${this.uri.getFormattedPath()}`,r.TreeItemCollapsibleState.Expanded);return e.contextValue=a.ResourceType.FileHistory,e.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-history.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-history.svg")},e}updateSubscription(){this.explorer.autoRefresh?this.disposable=this.disposable||r.Disposable.from(this.explorer.onDidChangeAutoRefresh(this.onAutoRefreshChanged,this),this.repo.onDidChange(this.onRepoChanged,this),this.explorer.gitContextTracker.onDidChangeBlameability(this.onBlameabilityChanged,this)):void 0!==this.disposable&&(this.disposable.dispose(),this.disposable=void 0)}onAutoRefreshChanged(){this.updateSubscription()}onBlameabilityChanged(e){e.blameable&&e.reason===c.BlameabilityChangeReason.DocumentChanged&&this.explorer.refreshNode(this)}onRepoChanged(e){e.changed(c.RepositoryChange.Stashes,!0)||(h.Logger.log(`RepositoryNode.onRepoChanged(${e.changes.join()}); triggering node refresh`),this.explorer.refreshNode(this))}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(17),a=i(24),c=i(23),h=i(3);t.BlameAnnotationProviderBase=class extends a.AnnotationProviderBase{constructor(e,t,i,o,s,r){super(e,t,i,o),this.git=s,this.uri=r,this._blame=this.git.getBlameForFile(this.uri)}clear(){const e=e=>super[e];return o.__awaiter(this,void 0,void 0,function*(){this._hoverProviderDisposable&&this._hoverProviderDisposable.dispose(),e("clear").call(this)})}selection(e,t){return o.__awaiter(this,void 0,void 0,function*(){if(!this.highlightDecoration)return;if(!(void 0!==t||(t=yield this._blame)&&t.lines.length))return;let i=void 0;if("string"==typeof e)i=e;else if("number"==typeof e){if(e>=0){const o=t.lines[e];i=o&&o.sha}}else i=s.Iterables.first(t.commits.values()).sha;if(!i)return void this.editor.setDecorations(this.highlightDecoration,[]);const o=s.Arrays.filterMap(t.lines,e=>e.sha===i?this.editor.document.validateRange(new r.Range(e.line,0,e.line,1e6)):void 0);this.editor.setDecorations(this.highlightDecoration,o)})}validate(){return o.__awaiter(this,void 0,void 0,function*(){const e=yield this._blame;return void 0!==e&&0!==e.lines.length})}getBlame(){return o.__awaiter(this,void 0,void 0,function*(){const e=yield this._blame;if(void 0!==e&&0!==e.lines.length)return e})}registerHoverProviders(e){if(!e.details&&!e.changes)return;const t=[];e.changes&&t.push(r.languages.registerHoverProvider({pattern:this.document.uri.fsPath},{provideHover:this.provideChangesHover.bind(this)})),e.details&&t.push(r.languages.registerHoverProvider({pattern:this.document.uri.fsPath},{provideHover:this.provideDetailsHover.bind(this)})),this._hoverProviderDisposable=r.Disposable.from(...t)}provideDetailsHover(e,t,i){return o.__awaiter(this,void 0,void 0,function*(){const i=yield this.getCommitForHover(t);if(void 0===i)return;let o=void 0;i.isUncommitted||void 0!==(o=yield this.git.getLogCommit(i.repoPath,i.uri.fsPath,i.sha))&&(o.previousFileName=i.previousFileName,o.previousSha=i.previousSha);const s=c.Annotations.getHoverMessage(o||i,this._config.defaultDateFormat,yield this.git.hasRemote(i.repoPath),this._config.blame.file.annotationType);return new r.Hover(s,e.validateRange(new r.Range(t.line,0,t.line,c.endOfLineIndex)))})}provideChangesHover(e,t,i){return o.__awaiter(this,void 0,void 0,function*(){const i=yield this.getCommitForHover(t);if(void 0===i)return;const o=yield c.Annotations.changesHover(i,t.line,yield h.GitUri.fromUri(e.uri,this.git),this.git);return new r.Hover(o.hoverMessage,e.validateRange(new r.Range(t.line,0,t.line,c.endOfLineIndex)))})}getCommitForHover(e){return o.__awaiter(this,void 0,void 0,function*(){const t=this._config.blame.file.annotationType;if(!(t===n.FileAnnotationType.Hover||t===n.FileAnnotationType.Gutter&&this._config.annotations.file.gutter.hover.wholeLine)&&0!==e.character)return;const i=yield this.getBlame();if(void 0===i)return;const o=i.lines[e.line];return i.commits.get(o.sha)})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(17),a=i(9),c=i(4),h=i(159),l=i(11),d=i(161),u=i(162),m=i(163),g=i(25),p=i(164),f=i(3),v=i(14),C=i(5),y=i(10),w=i(32);t.activate=function(e){return o.__awaiter(this,void 0,void 0,function*(){const t=process.hrtime();C.Logger.configure(e),a.Configuration.configure(e);const i=r.extensions.getExtension(c.QualifiedExtensionId).packageJSON.version,b=a.configuration.get();try{yield f.GitService.initialize(b.advanced.git)}catch(e){return C.Logger.error(e,`GitLens(v${i}).activate`),e.message.includes("Unable to find git")&&(yield r.window.showErrorMessage(`GitLens was unable to find Git. Please make sure Git is installed. Also ensure that Git is either in the PATH, or that '${c.ExtensionKey}.${a.configuration.name("advanced")("git").value}' is pointed to its installed location.`)),void c.setCommandContext(c.CommandContext.Enabled,!1)}const S=f.GitService.getGitVersion(),x=e.globalState.get(c.GlobalState.GitLensVersion);yield function(e,t){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===t)return;const[i,o,n]=t.split(".");if(!(parseInt(i,10)>=_.major&&parseInt(o,10)>=_.minor&&parseInt(n,10)>=_.patch))try{const t=a.configuration.name("advanced")("messages").value,i=a.configuration.get(t);let o=!1;for(const t of s.Objects.values(y.SuppressedMessages)){const s=e.globalState.get(t);void 0!==s&&(o=!0,i[t]=s,e.globalState.update(t,void 0))}if(!o)return;yield a.configuration.update(t,i,r.ConfigurationTarget.Global)}catch(e){C.Logger.error(e,"migrateSettings")}})}(e,x),function(e,t){o.__awaiter(this,void 0,void 0,function*(){f.GitService.validateGitVersion(2,2)||(yield y.Messages.showUnsupportedGitVersionErrorMessage(t))})}(0,S),function(e,t,i){o.__awaiter(this,void 0,void 0,function*(){if(a.configuration.get(a.configuration.name("advanced")("messages")(y.SuppressedMessages.UpdateNotice).value))return;if(void 0===i)return C.Logger.log("GitLens first-time install"),void(yield y.Messages.showWelcomeMessage());i!==t&&C.Logger.log(`GitLens upgraded from v${i} to v${t}`);const[e,o]=t.split("."),[s,r]=i.split(".");e===s&&o===r||e<s||e===s&&o<r||(yield y.Messages.showUpdateMessage(t))})}(0,i,x),e.globalState.update(c.GlobalState.GitLensVersion,i);const P=new f.GitService;e.subscriptions.push(P);const k=new f.GitContextTracker(P);e.subscriptions.push(k);const $=new n.AnnotationController(e,P,k);e.subscriptions.push($);const F=new d.CurrentLineController(e,P,k,$);e.subscriptions.push(F);const D=new h.CodeLensController(e,P,k);e.subscriptions.push(D),e.subscriptions.push(r.workspace.registerTextDocumentContentProvider(m.GitContentProvider.scheme,new m.GitContentProvider(e,P))),e.subscriptions.push(r.languages.registerCodeLensProvider(p.GitRevisionCodeLensProvider.selector,new p.GitRevisionCodeLensProvider(e,P)));const R=new u.ExplorerCommands(e,P);e.subscriptions.push(R),e.subscriptions.push(r.window.registerTreeDataProvider("gitlens.gitExplorer",new g.GitExplorer(e,R,P,k))),e.subscriptions.push(r.window.registerTreeDataProvider("gitlens.resultsExplorer",new w.ResultsExplorer(e,R,P))),e.subscriptions.push(new v.Keyboard),l.configureCommands(e,P,$,F,D),setTimeout(()=>c.setCommandContext(c.CommandContext.GitExplorer,!0),1e3);const G=process.hrtime(t);C.Logger.log(`GitLens(v${i}) activated in ${1e3*G[0]+Math.floor(G[1]/1e6)} ms`)})},t.deactivate=function(){};const _={major:6,minor:1,patch:2}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(34);!function(e){function t(e,i,o=!0){if(void 0===e.children)return e;const r=[...s.Objects.values(e.children)];for(const e of r)t(e,i,!1);if(!o&&1===r.length){const t=r[0];void 0===t.value&&(e.name=i(e.name,t.name),e.relativePath=t.relativePath,e.children=t.children)}return e}e.countUniques=function(e,t){const i=Object.create(null);for(const o of e){const e=t(o);i[e]=(i[e]||0)+1}return i},e.filterMap=function(e,t){return e.reduce((e,i)=>{const o=t(i);return null!=o&&e.push(o),e},[])},e.filterMapAsync=function(e,t){return o.__awaiter(this,void 0,void 0,function*(){return e.reduce((e,i)=>o.__awaiter(this,void 0,void 0,function*(){const o=yield t(i);return null!=o&&e.push(o),e}),[])})},e.groupBy=function(e,t){return e.reduce((e,i)=>{const o=t(i);return e[o]=e[o]||[],e[o].push(i),e},Object.create(null))},e.makeHierarchical=function(e,i,o,s=!1){const r={name:"",relativePath:"",children:Object.create(null),descendants:[]},n=e.reduce((e,t)=>{let s=e,r="";for(const e of i(t)){r=o(r,e),void 0===s.children&&(s.children=Object.create(null));let i=s.children[e];void 0===i&&(s.children[e]=i={name:e,relativePath:r,children:void 0,descendants:void 0}),void 0===s.descendants&&(s.descendants=[]),s.descendants.push(t),s=i}return s.value=t,e},r);return s?t(n,o,!0):n},e.compactHierarchy=t,e.uniqueBy=function(e,t,i){const o=Object.create(null);return e.filter(e=>{const s=t(e);return!o[s]&&(o[s]=t,!i||i(e))})}}(t.Arrays||(t.Arrays={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(65),s=6e4,r=864e5,n=i(66);n.distanceInWords=function(){const e={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"a few seconds",other:"less than {{count}} minutes"},xMinutes:{one:"a minute",other:"{{count}} minutes"},aboutXHours:{one:"an hour",other:"{{count}} hours"},xHours:{one:"an hour",other:"{{count}} hours"},xDays:{one:"a day",other:"{{count}} days"},aboutXMonths:{one:"a month",other:"{{count}} months"},xMonths:{one:"a month",other:"{{count}} months"},aboutXYears:{one:"a year",other:"{{count}} years"},xYears:{one:"a year",other:"{{count}} years"},overXYears:{one:"a year",other:"{{count}} years"},almostXYears:{one:"a year",other:"{{count}} years"}};return{localize:function(t,i,o){o=o||{},12===i&&"xMonths"===t&&(t="aboutXYears",i=1);const s=e[t];let r;return r="string"==typeof s?s:1===i?s.one:s.other.replace("{{count}}",i.toString()),o.addSuffix?o.comparison>0?"in "+r:r+" ago":r}}}();const a={addSuffix:!0,locale:n};!function(e){function t(e){const t=new Date("number"==typeof e?e:e.getTime());return t.setHours(0,0,0,0),t}e.dateDaysFromNow=function(e,i=Date.now()){const o=t(i),n=t(e),a=o.getTime()-o.getTimezoneOffset()*s,c=n.getTime()-n.getTimezoneOffset()*s;return Math.round((a-c)/r)},e.startOfDay=t,e.toFormatter=function(e){return{fromNow:()=>o.distanceInWordsToNow(e,a),format:t=>o.format(e,t)}}}(t.Dates||(t.Dates={}))},function(e,t){e.exports=require("date-fns")},function(e,t){e.exports=require("date-fns/locale/en")},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(68),r=i(69);!function(e){e.debounce=function(e,t,i){return s(e,t,i)},e.once=function(e){return r(e)},e.propOf=function(e,t){const i=(e,t)=>{const o=void 0===i.value?t:`${i.value}.${t}`;return i.value=o,Object.assign(o=>i(e[t],o),{value:o})};return i(e,t)},e.seeded=function(e,t){let i=t;return(...t)=>{if(void 0!==i){const e=Promise.resolve(i);return i=void 0,e}return e(...t)}},e.wait=function(e){return o.__awaiter(this,void 0,void 0,function*(){yield new Promise(t=>setTimeout(t,e))})}}(t.Functions||(t.Functions={}))},function(e,t){e.exports=require("lodash.debounce")},function(e,t){e.exports=require("lodash.once")},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(35);class s{constructor(){this._value="",this._pos=0}reset(e){return this._value=e,this._pos=0,this}next(){return this._pos+=1,this}join(e){return e.join("")}hasNext(){return this._pos<this._value.length-1}cmp(e){return e.charCodeAt(0)-this._value.charCodeAt(this._pos)}value(){return this._value[this._pos]}}t.StringIterator=s;class r{reset(e){return this._value=e.replace(/\\$|\/$/,""),this._from=0,this._to=0,this.next()}hasNext(){return this._to<this._value.length}join(e){return e.join("/")}next(){this._from=this._to;let e=!0;for(;this._to<this._value.length;this._to++){const t=this._value.charCodeAt(this._to);if(t===r._fwd||t===r._bwd){if(!e)break;this._from++}else e=!1}return this}cmp(e){let t=0;const i=e.length;let o=this._from;for(;t<i&&o<this._to;){const i=e.charCodeAt(t)-this._value.charCodeAt(o);if(0!==i)return i;t+=1,o+=1}return i===this._to-this._from?0:t<i?-1:1}value(){return this._value.substring(this._from,this._to)}}r._fwd="/".charCodeAt(0),r._bwd="\\".charCodeAt(0),t.PathIterator=r;class n{isEmpty(){return void 0===this.left&&void 0===this.mid&&void 0===this.right&&void 0===this.element}}class a{constructor(e){this._iter=e}static forPaths(){return new a(new r)}static forStrings(){return new a(new s)}clear(){this._root=void 0}set(e,t){const i=this._iter.reset(e);let o;for(this._root||(this._root=new n,this._root.str=i.value()),o=this._root;;){const e=i.cmp(o.str);if(e>0)o.left||(o.left=new n,o.left.str=i.value()),o=o.left;else if(e<0)o.right||(o.right=new n,o.right.str=i.value()),o=o.right;else{if(!i.hasNext())break;i.next(),o.mid||(o.mid=new n,o.mid.str=i.value()),o=o.mid}}o.element=t}get(e){const t=this._iter.reset(e);let i=this._root;for(;i;){const e=t.cmp(i.str);if(e>0)i=i.left;else if(e<0)i=i.right;else{if(!t.hasNext())break;t.next(),i=i.mid}}return i?i.element:void 0}delete(e){const t=this._iter.reset(e),i=[];let o=this._root;for(;o;){const e=t.cmp(o.str);if(e>0)i.push([1,o]),o=o.left;else if(e<0)i.push([-1,o]),o=o.right;else{if(!t.hasNext()){for(o.element=void 0;i.length>0&&o.isEmpty();){const[e,t]=i.pop();switch(e){case 1:t.left=void 0;break;case 0:t.mid=void 0;break;case-1:t.right=void 0}o=t}break}t.next(),i.push([0,o]),o=o.mid}}}findSubstr(e){const t=this._iter.reset(e);let i,o=this._root;for(;o;){const e=t.cmp(o.str);if(e>0)o=o.left;else if(e<0)o=o.right;else{if(!t.hasNext())break;t.next(),i=o.element||i,o=o.mid}}return o&&o.element||i}findSuperstr(e){const t=this._iter.reset(e);let i=this._root;for(;i;){const e=t.cmp(i.str);if(e>0)i=i.left;else if(e<0)i=i.right;else{if(!t.hasNext()){if(!i.mid)return;const e=new a(this._iter);return e._root=i.mid,e}t.next(),i=i.mid}}}forEach(e){this._forEach(this._root,[],e)}_forEach(e,t,i){void 0!==e&&(this._forEach(e.left,t,i),t.push(e.str),e.element&&i(e.element,this._iter.join(t)),this._forEach(e.mid,t,i),t.pop(),this._forEach(e.right,t,i))}any(){return void 0!==this._root&&!this._root.isEmpty()}entries(){return this._iterator(this._root,[])}values(){return o.Iterables.map(this.entries(),e=>e[0])}highlander(){if(void 0===this._root||this._root.isEmpty())return;const e=this.entries();let t,i,o=0;for(;!(t=e.next()).done;)if(i=t.value,++o>1)return;return i}*_iterator(e,t){void 0!==e&&(yield*this._iterator(e.left,t),t.push(e.str),e.element&&(yield[e.element,this._iter.join(t)]),yield*this._iterator(e.mid,t),t.pop(),yield*this._iterator(e.right,t))}}t.TernarySearchTree=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(72);!function(e){function t(e,t,i=" "){const o=t-r(e);return o<=0?e:i.repeat(o)+e}function i(e,t,i=" "){const o=t-r(e);return o<=0?e:e+i.repeat(o)}function s(e,t,i="…"){if(!e)return e;const o=r(e);if(o<=t)return e;if(o===e.length)return`${e.substring(0,t-1)}${i}`;let s=Math.floor(t/(o/e.length)),n=r(e.substring(0,s));for(;n<t;)n+=r(e[s++]);return n>=t&&s--,`${e.substring(0,s)}${i}`}function r(e){if(!e||0===e.length)return 0;let t=0,i=0,o=0;const s=[...e=e.replace(h,"")];for(let e=0;e<s.length;e++){const r=s[e].codePointAt(0);if(!(r<=31||r>=127&&r<=159)&&!(r>=768&&r<=879))if(r>=128512&&r<=128591||r>=127744&&r<=128511||r>=128640&&r<=128767||r>=9728&&r<=9983||r>=9984&&r<=10175||r>=65024&&r<=65039||r>=129280&&r<=129535||r>=65024&&r<=65039||r>=8400&&r<=8447){if(r>=127995&&r<=127999)continue;i++,t+=2}else 8205!==r?(r>65535&&e++,t+=function(e){if(e>=4352&&(e<=4447||9001===e||9002===e||11904<=e&&e<=12871&&12351!==e||12880<=e&&e<=19903||19968<=e&&e<=42182||43360<=e&&e<=43388||44032<=e&&e<=55203||63744<=e&&e<=64255||65040<=e&&e<=65049||65072<=e&&e<=65131||65281<=e&&e<=65376||65504<=e&&e<=65510||110592<=e&&e<=110593||127488<=e&&e<=127569||131072<=e&&e<=262141))return!0;return!1}(r)?2:1):(o++,t-=2)}const r=i-o;return r>1&&(t+=r-1),t}const n=/\$\{([^|]*?)(?:\|(\d+)(\-|\?)?)?\}/g,a=/\$\{(\w*?)(?:\W|\d)*?\}/g;e.getTokensFromTemplate=function(e){const t=[];let i=n.exec(e);for(;null!=i;){const o=i[2],s=i[3];t.push({key:i[1],options:{truncateTo:null==o?void 0:parseInt(o,10),padDirection:"-"===s?"left":"right",collapseWhitespace:"?"===s}}),i=n.exec(e)}return t},e.interpolate=function(e,t){return e?void 0===t?e.replace(a,""):(e=e.replace(a,"$${this.$1}"),new Function(`return \`${e}\`;`).call(t)):e},e.lines=function*(e){let t=0;for(;t<e.length;){let i=e.indexOf("\n",t);-1===i&&(i=e.length),yield e.substring(t,i),t=i+1}},e.md5=function(e){return o.createHash("md5").update(e).digest("hex")},e.pad=function(e,t=0,i=0,o=" "){return 0===t&&0===i?e:`${0===t?"":o.repeat(t)}${e}${0===i?"":o.repeat(i)}`},e.padLeft=t,e.padLeftOrTruncate=function(e,i,o){const n=r(e);return n<i?t(e,i,o):n>i?s(e,i):e},e.padRight=i,e.padOrTruncate=function(e,o,n){const a=o<0;o=Math.abs(o);const c=r(e);return c<o?a?t(e,o,n):i(e,o,n):c>o?s(e,o):e},e.padRightOrTruncate=function(e,t,o){const n=r(e);return n<t?i(e,t,o):n>t?s(e,t):e};const c=/[\\/:*?"<>|\x00-\x1f\x80-\x9f]/g;e.sanitizeForFileSystem=function(e,t="_"){return e?e.replace(c,t):e},e.truncate=s;const h=/[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)|(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))/g;e.width=r}(t.Strings||(t.Strings={}))},function(e,t){e.exports=require("crypto")},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(15);t.BitbucketService=class extends o.RemoteProvider{constructor(e,t,i,o,s=!1){super(e,t,i,o,s)}get name(){return this.formatName("Bitbucket")}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/commits/branch/${e}`}getUrlForCommit(e){return`${this.baseUrl}/commits/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`#${e}-${o.start.line}`:`#${e}-${o.start.line}:${o.end.line}`),i?`${this.baseUrl}/src/${i}/${e}${s}`:t?`${this.baseUrl}/src/${t}/${e}${s}`:`${this.baseUrl}?path=${e}${s}`}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(15);t.BitbucketServerService=class extends o.RemoteProvider{constructor(e,t,i,o,s=!1){super(e,t,i,o,s)}get name(){return this.formatName("Bitbucket Server")}get baseUrl(){const[e,t]=super.splitPath();return`https://${this.domain}/projects/${e}/repos/${t}`}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/commits?until=${e}`}getUrlForCommit(e){return`${this.baseUrl}/commits/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`#${o.start.line}`:`#${o.start.line}-${o.end.line}`),i?`${this.baseUrl}/browse/${e}?at=${i}${s}`:t?`${this.baseUrl}/browse/${e}?at=${t}${s}`:`${this.baseUrl}/browse/${e}${s}`}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(2),s=i(15);t.CustomService=class extends s.RemoteProvider{constructor(e,t,i,o,s){super(e,t,o,s,!0),this.urls=i}get name(){return this.formatName("Custom")}getUrlForRepository(){return o.Strings.interpolate(this.urls.repository,{repo:this.path})}getUrlForBranches(){return o.Strings.interpolate(this.urls.branches,{repo:this.path})}getUrlForBranch(e){return o.Strings.interpolate(this.urls.branch,{repo:this.path,branch:e})}getUrlForCommit(e){return o.Strings.interpolate(this.urls.commit,{repo:this.path,id:e})}getUrlForFile(e,t,i,s){let r="";return s&&(r=s.start.line===s.end.line?o.Strings.interpolate(this.urls.fileLine,{line:s.start.line}):o.Strings.interpolate(this.urls.fileRange,{start:s.start.line,end:s.end.line})),i?o.Strings.interpolate(this.urls.fileInCommit,{repo:this.path,id:i,file:e,line:r}):t?o.Strings.interpolate(this.urls.fileInBranch,{repo:this.path,branch:t,file:e,line:r}):o.Strings.interpolate(this.urls.file,{repo:this.path,file:e,line:r})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(15);t.GitHubService=class extends o.RemoteProvider{constructor(e,t,i,o,s=!1){super(e,t,i,o,s)}get name(){return this.formatName("GitHub")}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/commits/${e}`}getUrlForCommit(e){return`${this.baseUrl}/commit/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`#L${o.start.line}`:`#L${o.start.line}-L${o.end.line}`),i?`${this.baseUrl}/blob/${i}/${e}${s}`:t?`${this.baseUrl}/blob/${t}/${e}${s}`:`${this.baseUrl}?path=${e}${s}`}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(15);t.GitLabService=class extends o.RemoteProvider{constructor(e,t,i,o,s=!1){super(e,t,i,o,s)}get name(){return this.formatName("GitLab")}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/commits/${e}`}getUrlForCommit(e){return`${this.baseUrl}/commit/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`#L${o.start.line}`:`#L${o.start.line}-${o.end.line}`),i?`${this.baseUrl}/blob/${i}/${e}${s}`:t?`${this.baseUrl}/blob/${t}/${e}${s}`:`${this.baseUrl}?path=${e}${s}`}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(15);t.VisualStudioService=class extends o.RemoteProvider{constructor(e,t,i,o){super(e,t,i,o)}get name(){return"Visual Studio Team Services"}getUrlForBranches(){return`${this.baseUrl}/branches`}getUrlForBranch(e){return`${this.baseUrl}/?version=GB${e}&_a=history`}getUrlForCommit(e){return`${this.baseUrl}/commit/${e}`}getUrlForFile(e,t,i,o){let s="";return o&&(s=o.start.line===o.end.line?`&line=${o.start.line}`:`&line=${o.start.line}&lineEnd=${o.end.line}`),i?`${this.baseUrl}/commit/${i}/?_a=contents&path=%2F${e}${s}`:t?`${this.baseUrl}/?path=%2F${e}&version=GB${t}&_a=contents${s}`:`${this.baseUrl}?path=%2F${e}${s}`}}},function(e,t,i){"use strict";function o(e){return r.__awaiter(this,void 0,void 0,function*(){const t=yield n.runCommand(e,["--version"]);return e&&"git"!==e||(e=n.findExecutable(e,["--version"]).cmd),{path:e,version:function(e){return e.replace(/^git version /,"")}(t.trim())}})}function s(e){return e?o(a.join(e,"Git","cmd","git.exe")):Promise.reject(new Error("Unable to find git"))}Object.defineProperty(t,"__esModule",{value:!0});const r=i(0),n=i(36),a=i(7);t.findGitPath=function(e){return r.__awaiter(this,void 0,void 0,function*(){try{return yield o(e||"git")}catch(e){try{switch(process.platform){case"darwin":return yield function(){return r.__awaiter(this,void 0,void 0,function*(){try{let e=yield n.runCommand("which",["git"]);if("/usr/bin/git"!==(e=e.replace(/^\s+|\s+$/g,"")))return o(e);try{return yield n.runCommand("xcode-select",["-p"]),o(e)}catch(t){return 2===t.code?Promise.reject(new Error("Unable to find git")):o(e)}}catch(e){return Promise.reject(new Error("Unable to find git"))}})}();case"win32":return yield s(process.env.ProgramW6432).then(null,()=>s(process.env["ProgramFiles(x86)"])).then(null,()=>s(process.env.ProgramFiles)).then(null,()=>o("git"));default:return Promise.reject("Unable to find git")}}catch(e){return Promise.reject(new Error("Unable to find git"))}}})}},function(e,t){e.exports=require("child_process")},function(e,t){e.exports=require("iconv-lite")},function(e,t){e.exports=require("tmp")},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(28);class s extends o.GitCommit{constructor(e,t,i,s,r,n,a,c,h,l){super(o.GitCommitType.Blame,e,t,i,s,r,n,a,c,h),this.lines=l}get previousFileSha(){return void 0!==this._resolvedPreviousFileSha?this._resolvedPreviousFileSha:`${this.sha}^`}with(e){return new s(this.repoPath,e.sha||this.sha,this.author,this.date,this.message,e.fileName||this.fileName,this.getChangedValue(e.originalFileName,this.originalFileName),this.getChangedValue(e.previousSha,this.previousSha),this.getChangedValue(e.previousFileName,this.previousFileName),this.getChangedValue(e.lines,e.sha||e.fileName?[]:this.lines)||[])}}t.GitBlameCommit=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o{constructor(e,t,i=!1,o,s=0,r=0){this.repoPath=e,t.startsWith("remotes/")&&(t=t.substring(8),this.remote=!0),this.current=i,this.name=t,this.tracking=""===o||null==o?void 0:o,this.state={ahead:s,behind:r}}getName(){return this.remote?this.name.substring(this.name.indexOf("/")+1):this.name}getRemote(){return this.remote?o.getRemote(this.name):void 0!==this.tracking?o.getRemote(this.tracking):void 0}static getRemote(e){return e.substring(0,e.indexOf("/"))}}t.GitBranch=o},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(38);t.GitDiffChunk=class{constructor(e,t,i){this.currentPosition=t,this.previousPosition=i,this._chunk=e}get lines(){return void 0===this._lines&&(this._lines=o.GitDiffParser.parseChunk(this._chunk),this._chunk=void 0),this._lines}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});!function(e){e.Fetch="fetch",e.Push="push"}(t.GitRemoteType||(t.GitRemoteType={}));t.GitRemote=class{constructor(e,t,i,o,s,r){this.repoPath=e,this.name=t,this.domain=i,this.path=o,this.provider=s,this.types=r}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(9),a=i(3),c=i(26),h=i(7);var l;!function(e){e.Config="config",e.Remotes="remotes",e.Repository="repository",e.Stashes="stashes"}(l=t.RepositoryChange||(t.RepositoryChange={}));class d{constructor(e){this.repository=e,this.changes=[]}changed(e,t=!1){return t?1===this.changes.length&&this.changes[0]===e:this.changes.includes(e)}}t.RepositoryChangeEvent=d;(t.RepositoryStorage||(t.RepositoryStorage={})).StatusNode="statusNode";t.Repository=class extends r.Disposable{constructor(e,t,i,o,s,a){super(()=>this.dispose()),this.folder=e,this.path=t,this.root=i,this.git=o,this.onAnyRepositoryChanged=s,this._onDidChange=new r.EventEmitter,this._onDidChangeFileSystem=new r.EventEmitter,this._fireChangeDebounced=void 0,this._fireFileSystemChangeDebounced=void 0,this._fsWatchCounter=0,this._pendingChanges={},this.formattedName=i?e.name:`${e.name} (${h.relative(e.uri.fsPath,t)})`,this.index=e.index,this.name=e.name,this.normalizedPath=(this.path.endsWith("/")?this.path:`${this.path}/`).toLowerCase(),this._suspended=a;const c=r.workspace.createFileSystemWatcher(new r.RelativePattern(e,"**/.git/{config,index,HEAD,refs/stash,refs/heads/**,refs/remotes/**}"));this._disposable=r.Disposable.from(c,c.onDidChange(this.onRepositoryChanged,this),c.onDidCreate(this.onRepositoryChanged,this),c.onDidDelete(this.onRepositoryChanged,this),n.configuration.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged(n.configuration.initializingChangeEvent)}get onDidChange(){return this._onDidChange.event}get onDidChangeFileSystem(){return this._onDidChangeFileSystem.event}dispose(){this.stopWatchingFileSystem(),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){const t=n.configuration.initializing(e),i=n.configuration.name("remotes").value;(t||n.configuration.changed(e,i,this.folder.uri))&&(this._providerMap=c.RemoteProviderFactory.createMap(n.configuration.get(i,this.folder.uri)),t||(this._remotes=void 0,this.fireChange(l.Remotes)))}onFileSystemChanged(e){/\.git/.test(e.fsPath)||this.fireFileSystemChange(e)}onRepositoryChanged(e){if(void 0!==e&&e.path.endsWith("refs/stash"))this.fireChange(l.Stashes);else{if(this._branch=void 0,void 0!==e&&e.path.endsWith("refs/remotes"))return this._remotes=void 0,void this.fireChange(l.Remotes);if(void 0!==e&&e.path.endsWith("config"))return this._remotes=void 0,void this.fireChange(l.Config,l.Remotes);this.onAnyRepositoryChanged(),this.fireChange(l.Repository)}}fireChange(...e){void 0===this._fireChangeDebounced&&(this._fireChangeDebounced=s.Functions.debounce(this.fireChangeCore,250)),void 0===this._pendingChanges.repo&&(this._pendingChanges.repo=new d(this));const t=this._pendingChanges.repo;for(const i of e)t.changes.includes(i)||t.changes.push(i);this._suspended||this._fireChangeDebounced(t)}fireChangeCore(e){this._pendingChanges.repo=void 0,this._onDidChange.fire(e)}fireFileSystemChange(e){void 0===this._fireFileSystemChangeDebounced&&(this._fireFileSystemChangeDebounced=s.Functions.debounce(this.fireFileSystemChangeCore,2500)),void 0===this._pendingChanges.fs&&(this._pendingChanges.fs={repository:this,uris:[]});const t=this._pendingChanges.fs;t.uris.push(e),this._suspended||this._fireFileSystemChangeDebounced(t)}fireFileSystemChangeCore(e){this._pendingChanges.fs=void 0,this._onDidChangeFileSystem.fire(e)}containsUri(e){return e instanceof a.GitUri&&(e=void 0!==e.repoPath?r.Uri.file(e.repoPath):e.fileUri()),this.folder===r.workspace.getWorkspaceFolder(e)}getBranch(){return void 0===this._branch&&(this._branch=this.git.getBranch(this.path)),this._branch}getBranches(){return this.git.getBranches(this.path)}getChangedFilesCount(e){return this.git.getChangedFilesCount(this.path,e)}getRemotes(){if(void 0===this._remotes){if(void 0===this._providerMap){const e=n.configuration.get(n.configuration.name("remotes").value,this.folder.uri);this._providerMap=c.RemoteProviderFactory.createMap(e)}this._remotes=this.git.getRemotesCore(this.path,this._providerMap)}return this._remotes}getStashList(){return this.git.getStashList(this.path)}getStatus(){return this.git.getStatusForRepo(this.path)}getTags(){return this.git.getTags(this.path)}hasRemote(){return o.__awaiter(this,void 0,void 0,function*(){const e=yield this.getBranch();return void 0!==e&&void 0!==e.tracking})}hasRemotes(){return o.__awaiter(this,void 0,void 0,function*(){const e=yield this.getRemotes();return void 0!==e&&e.length>0})}resume(){this._suspended&&(this._suspended=!1,void 0!==this._pendingChanges.repo&&this._fireChangeDebounced(this._pendingChanges.repo),void 0!==this._pendingChanges.fs&&this._fireFileSystemChangeDebounced(this._pendingChanges.fs))}startWatchingFileSystem(){if(this._fsWatchCounter++,void 0!==this._fsWatcherDisposable)return;const e=r.workspace.createFileSystemWatcher(new r.RelativePattern(this.folder,"**"));this._fsWatcherDisposable=r.Disposable.from(e,e.onDidChange(this.onFileSystemChanged,this),e.onDidCreate(this.onFileSystemChanged,this),e.onDidDelete(this.onFileSystemChanged,this))}stopWatchingFileSystem(){void 0!==this._fsWatcherDisposable&&(--this._fsWatchCounter>0||(this._fsWatcherDisposable.dispose(),this._fsWatcherDisposable=void 0))}suspend(){this._suspended=!0}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(39);class s extends o.GitLogCommit{constructor(e,t,i,o,s,r,n,a,c,h,l,d){super(e,i,o,"You",void 0,s,r,n,a,c,h,void 0===l?`${o}^`:l,d),this.stashName=t}get shortSha(){return this.stashName}with(e){return new s(e.type||this.type,this.stashName,this.repoPath,this.getChangedValue(e.sha,this.sha),e.date||this.date,e.message||this.message,e.fileName||this.fileName,this.getChangedValue(e.fileStatuses,this.fileStatuses)||[],e.status||this.status,this.getChangedValue(e.originalFileName,this.originalFileName),this.getChangedValue(e.previousSha,this.previousSha),this.getChangedValue(e.previousFileName,this.previousFileName))}}t.GitStashCommit=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.GitTag=class{constructor(e,t){this.repoPath=e,this.name=t}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(2),s=i(13),r=i(7);class n{static parse(e,t,i){if(!e)return;const a=new Map,c=new Map,h=[];let l,d,u=t&&i,m=void 0,g=!0;for(l of o.Strings.lines(e))if(!((d=l.split(" ")).length<2))if(void 0!==m)switch(d[0]){case"author":m.author=s.Git.isUncommitted(m.sha)?"You":d.slice(1).join(" ").trim();break;case"author-time":m.authorDate=d[1];break;case"author-tz":m.authorTimeZone=d[1];break;case"summary":m.summary=d.slice(1).join(" ").trim();break;case"previous":m.previousSha=d[1],m.previousFileName=d.slice(2).join(" ");break;case"filename":m.fileName=d.slice(1).join(" "),g&&void 0===t&&(t=s.Git.normalizePath(i.replace(i.startsWith("/")?`/${m.fileName}`:m.fileName,"")),u=s.Git.normalizePath(r.relative(t,i))),g=!1,n.parseEntry(m,t,u,c,a,h),m=void 0}else m={sha:d[0],originalLine:parseInt(d[1],10)-1,line:parseInt(d[2],10)-1,lineCount:parseInt(d[3],10)};c.forEach(e=>{if(void 0===e.author)return;const t=a.get(e.author);void 0!==t&&(t.lineCount+=e.lines.length)});return{repoPath:t,authors:new Map([...a.entries()].sort((e,t)=>t[1].lineCount-e[1].lineCount)),commits:c,lines:h}}static parseEntry(e,t,i,o,r,n){let a=o.get(e.sha);if(void 0===a){if(void 0!==e.author){let t=r.get(e.author);void 0===t&&(t={name:e.author,lineCount:0},r.set(e.author,t))}a=new s.GitBlameCommit(t,e.sha,e.author,new Date(1e3*e.authorDate),e.summary,i,i!==e.fileName?e.fileName:void 0,e.previousSha,e.previousSha&&e.previousFileName,[]),o.set(e.sha,a)}for(let t=0,i=e.lineCount;t<i;t++){const i={sha:e.sha,line:e.line+t,originalLine:e.originalLine+t};a.previousSha&&(i.previousSha=a.previousSha),a.lines.push(i),n[i.line]=i}}}t.GitBlameParser=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(13),s=/^(\*?)\s+(.+?)\s+([0-9,a-f]+)\s+(?:\[(.*?\/.*?)(?:\:\s(.*)\]|\]))?/gm,r=/^(?:ahead\s([0-9]+))?[,\s]*(?:behind\s([0-9]+))?/;t.GitBranchParser=class{static parse(e,t){if(!e)return;const i=[];let r=null;do{if(null==(r=s.exec(e)))break;const[n,a]=this.parseState(r[5]);i.push(new o.GitBranch(t,r[2],"*"===r[1],r[4],n,a))}while(null!=r);return i.length?i:void 0}static parseState(e){if(null==e)return[0,0];const t=r.exec(e);if(null==t)return[0,0];const i=parseInt(t[1],10),o=parseInt(t[2],10);return[isNaN(i)?0:i,isNaN(o)?0:o]}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(2),s=i(13),r=i(7),n=/diff --git a\/(.*) b\/(.*)/;class a{static parse(e,t,i,c,h,l,d,u){if(!e)return;const m=new Map,g=new Map;let p,f=void 0;void 0!==i&&(i=s.Git.normalizePath(i));let v,C=void 0,y=void 0,w=void 0,_=0,b=!0,S=!1;const x=o.Strings.lines(e);for(;;){if(S)S=!1;else{if((w=x.next()).done)break;y=w.value}if(d&&l&&_>=l)break;if(!((v=y.split(" ")).length<2))if(void 0!==C){switch(v[0]){case"author":C.author=s.Git.isUncommitted(C.sha)?"You":v.slice(1).join(" ").trim();break;case"author-email":C.authorEmail=v.slice(1).join(" ").trim();break;case"author-date":C.authorDate=v[1];break;case"parents":C.parentShas=v.slice(1);break;case"summary":for(C.summary=v.slice(1).join(" ").trim();!(w=x.next()).done&&(y=w.value);){if("filename ?"===y){S=!0;break}C.summary+=`\n${y}`}break;case"filename":if(t===s.GitCommitType.Branch){if((w=x.next()).done)break;if((y=w.value)&&(s.Git.shaRegex.test(y)||y.startsWith("warning:"))){S=!0;continue}let e=!1;for(;!(w=x.next()).done;){if(y=w.value,v=y.split(" "),s.Git.shaRegex.test(v[0])||y.startsWith("warning:")){S=!0;break}if(e)continue;if("diff"===v[0]){e=!0;const t=n.exec(y);if(null!=t){C.fileName=t[1];const e=t[2];C.fileName!==e&&(C.originalFileName=e)}continue}null==C.fileStatuses&&(C.fileStatuses=[]);const t={status:y[0],fileName:y.substring(1),originalFileName:void 0};this.parseFileName(t),t.fileName&&C.fileStatuses.push(t)}C.fileStatuses&&(C.fileName=o.Arrays.filterMap(C.fileStatuses,e=>e.fileName?e.fileName:void 0).join(", "))}else x.next(),void 0===(y=(w=x.next()).value)||y.startsWith("warning:")||(C.status=y[0],C.fileName=y.substring(1),this.parseFileName(C));b&&void 0===i&&t===s.GitCommitType.File&&void 0!==c?(i=s.Git.normalizePath(c.replace(c.startsWith("/")?`/${C.fileName}`:C.fileName,"")),p=s.Git.normalizePath(r.relative(i,c))):p=C.fileName,b=!1;const e=g.get(C.sha);void 0===e&&_++,f=a.parseEntry(C,e,t,i,p,g,m,f),C=void 0}if(w.done)break}else{if(!s.Git.shaRegex.test(v[0]))continue;C={sha:v[0]}}}return{repoPath:i,authors:m,commits:g,sha:h,count:_,maxCount:l,range:u,truncated:!!(l&&_>=l&&1!==l)}}static parseEntry(e,t,i,o,r,n,a,c){if(void 0===t){if(void 0!==e.author){let t=a.get(e.author);void 0===t&&(t={name:e.author,lineCount:0},a.set(e.author,t))}const c=r!==e.fileName?e.fileName:void 0;i===s.GitCommitType.File&&(e.fileStatuses=[{status:e.status,fileName:r,originalFileName:c}]),t=new s.GitLogCommit(i,o,e.sha,e.author,e.authorEmail,new Date(1e3*e.authorDate),e.summary,r,e.fileStatuses||[],e.status,c,void 0,void 0,e.parentShas),n.set(e.sha,t)}return void 0!==c&&(c.previousSha=t.sha,t.nextSha=t.sha!==c.sha?c.sha:c.nextSha,i===s.GitCommitType.File&&(c.previousFileName=t.originalFileName||t.fileName,t.nextFileName=c.originalFileName||c.fileName)),t}static parseFileName(e){if(void 0===e.fileName)return;const t=e.fileName.indexOf("\t")+1;if(t>0){const i=e.fileName.indexOf("\t",t)+1;i>0?(e.originalFileName=e.fileName.substring(t,i-1),e.fileName=e.fileName.substring(i)):e.fileName=e.fileName.substring(t)}}}t.GitLogParser=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(13),s=/^(.*)\t(.*)\s\((.*)\)$/gm,r=/^(?:git:\/\/(.*?)\/|https:\/\/(.*?)\/|http:\/\/(.*?)\/|git@(.*):|ssh:\/\/(?:.*@)?(.*?)(?::.*?)?\/)(.*)$/;t.GitRemoteParser=class{static parse(e,t,i){if(!e)return[];const r=[],n=Object.create(null);let a=null;do{if(null==(a=s.exec(e)))break;const c=a[2],[h,l]=this.parseGitUrl(c),d=`${h}/${l}`;let u=n[d];void 0===u?(u=new o.GitRemote(t,a[1],h,l,i(h,l),[{url:c,type:a[3]}]),r.push(u),n[d]=u):u.types.push({url:c,type:a[3]})}while(null!=a);return r.length?r:[]}static parseGitUrl(e){const t=r.exec(e);return null==t?["",""]:[t[1]||t[2]||t[3]||t[4]||t[5],t[6].replace(/\.git\/?$/,"")]}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(2),s=i(13);t.GitStashParser=class{static parse(e,t){const i=this.parseEntries(e);if(void 0===i)return;const o=new Map;for(let e=0,r=i.length;e<r;e++){const r=i[e];let n=o.get(r.sha);void 0===n&&(n=new s.GitStashCommit(s.GitCommitType.Stash,r.stashName,t,r.sha,new Date(1e3*r.date),r.summary,r.fileNames,r.fileStatuses||[]),o.set(r.sha,n))}return{repoPath:t,commits:o}}static parseEntries(e){if(!e)return;const t=e.split("\n");if(0===t.length)return;const i=[];let r=void 0,n=-1;for(;++n<t.length;){let e=t[n].split(" ");if(!(e.length<2))if(void 0!==r)switch(e[0]){case"author-date":r.date=e[1];break;case"summary":for(r.summary=e.slice(1).join(" ").trim();++n<t.length;){const e=t[n];if(!e)break;if("filename ?"===e){n--;break}r.summary+=`\n${t[n]}`}break;case"reflog-selector":r.stashName=e.slice(1).join(" ").trim();break;case"filename":const a=t[n+1];if(a&&s.Git.shaRegex.test(a)){i.push(r),r=void 0;continue}for(n++;++n<t.length;){const i=t[n];if(e=i.split(" "),s.Git.shaRegex.test(e[0])){n--;break}null==r.fileStatuses&&(r.fileStatuses=[]);const o={status:i[0],fileName:i.substring(1),originalFileName:void 0};this.parseFileName(o),o.fileName&&r.fileStatuses.push(o)}r.fileStatuses&&(r.fileNames=o.Arrays.filterMap(r.fileStatuses,e=>e.fileName?e.fileName:void 0).join(", ")),i.push(r),r=void 0}else{if(!s.Git.shaRegex.test(e[0]))continue;r={sha:e[0]}}}return i}static parseFileName(e){if(void 0===e.fileName)return;const t=e.fileName.indexOf("\t")+1;if(t>0){const i=e.fileName.indexOf("\t",t)+1;i>0?(e.originalFileName=e.fileName.substring(t,i-1),e.fileName=e.fileName.substring(i)):e.fileName=e.fileName.substring(t)}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(13),s=/(?:ahead ([0-9]+))/,r=/(?:behind ([0-9]+))/;t.GitStatusParser=class{static parse(e,t,i){if(!e)return;const s=e.split("\n").filter(e=>!!e);if(0===s.length)return;const r={branch:"",repoPath:o.Git.normalizePath(t),sha:"",state:{ahead:0,behind:0},files:[]};return i>=2?this.parseV2(s,t,r):this.parseV1(s,t,r),r}static parseV1(e,t,i){let o=-1;for(;++o<e.length;){const n=e[o];if(n.startsWith("##")){const e=n.split(" ");if([i.branch,i.upstream]=e[1].split("..."),e.length>2){const t=e.slice(2).join(" "),o=s.exec(t);i.state.ahead=null==o?0:+o[1]||0;const n=r.exec(t);i.state.behind=null==n?0:+n[1]||0}}else{const e=n.substring(0,2),o=n.substring(3);if("R"===e[0]){const[s,r]=o.replace(/\"/g,"").split("->");i.files.push(this.parseStatusFile(t,e,r.trim(),s.trim()))}else i.files.push(this.parseStatusFile(t,e,o))}}}static parseV2(e,t,i){let o=-1;for(;++o<e.length;){const s=e[o];if(s.startsWith("#")){const e=s.split(" ");switch(e[1]){case"branch.oid":i.sha=e[2];break;case"branch.head":i.branch=e[2];break;case"branch.upstream":i.upstream=e[2];break;case"branch.ab":i.state.ahead=+e[2].substring(1),i.state.behind=+e[3].substring(1)}}else{const e=s.split(" ");switch(e[0][0]){case"1":i.files.push(this.parseStatusFile(t,e[1],e.slice(8).join(" ")));break;case"2":const o=e.slice(9).join(" ").split("\t");i.files.push(this.parseStatusFile(t,e[1],o[0],o[1]));break;case"u":i.files.push(this.parseStatusFile(t,e[1],e.slice(10).join(" ")));break;case"?":i.files.push(this.parseStatusFile(t," ?",e.slice(1).join(" ")))}}}}static parseStatusFile(e,t,i,s){let r="."!==t[0]?t[0].trim():void 0;""!==r&&null!==r||(r=void 0);let n=void 0;return t.length>1&&(""!==(n="."!==t[1]?t[1].trim():void 0)&&null!==n||(n=void 0)),new o.GitStatusFile(e,r,n,i,s)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(2),s=i(13);t.GitTagParser=class{static parse(e,t){if(!e)return;const i=o.Arrays.filterMap(e.split("\n"),e=>e?new s.GitTag(t,e):void 0);return i.length?i:void 0}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(41),s=i(4);t.CommitFormatter=class extends o.Formatter{get ago(){const e=this._item.fromNow();return this._padOrTruncate(e,this._options.tokenOptions.ago)}get author(){const e=this._item.author;return this._padOrTruncate(e,this._options.tokenOptions.author)}get authorAgo(){const e=`${this._item.author}, ${this._item.fromNow()}`;return this._padOrTruncate(e,this._options.tokenOptions.authorAgo)}get date(){const e=this._item.formatDate(this._options.dateFormat);return this._padOrTruncate(e,this._options.tokenOptions.date)}get id(){return this._item.isUncommitted&&!this._item.isStagedUncommitted?"00000000":this._item.shortSha}get message(){let e=this._item.isUncommitted?"Uncommitted change":this._item.message;if(this._options.truncateMessageAtNewLine){const t=e.indexOf("\n");-1!==t&&(e=`${e.substring(0,t)}${s.GlyphChars.Space}${s.GlyphChars.Ellipsis}`)}return this._padOrTruncate(e,this._options.tokenOptions.message)}get sha(){return this.id}static fromTemplate(e,t,i){return super.fromTemplateCore(this,e,t,i)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(4),s=i(41),r=i(40),n=i(7);t.StatusFileFormatter=class extends s.Formatter{get directory(){const e=r.GitStatusFile.getFormattedDirectory(this._item,!1,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.file)}get file(){const e=n.basename(this._item.fileName);return this._padOrTruncate(e,this._options.tokenOptions.file)}get filePath(){const e=r.GitStatusFile.getFormattedPath(this._item,void 0,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.filePath)}get path(){const e=r.GitStatusFile.getRelativePath(this._item,this._options.relativePath);return this._padOrTruncate(e,this._options.tokenOptions.file)}get working(){const e=this._item.commit;return void 0!==e&&e.isUncommitted?`${o.GlyphChars.Pensil} ${o.GlyphChars.Space}`:""}static fromTemplate(e,t,i){return super.fromTemplateCore(this,e,t,i)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(18),a=i(9),c=i(4),h=i(3),l=i(5);var d;!function(e){e.BlameFailed="blame-failed",e.DocumentChanged="document-changed",e.EditorChanged="editor-changed",e.RepoChanged="repo-changed"}(d=t.BlameabilityChangeReason||(t.BlameabilityChangeReason={}));t.GitContextTracker=class extends r.Disposable{constructor(e){super(()=>this.dispose()),this.git=e,this._onDidChangeBlameability=new r.EventEmitter,this._context={state:{dirty:!1}},this._onDirtyStateChangedDebounced=s.Functions.debounce(this.onDirtyStateChanged,250),this._disposable=r.Disposable.from(r.workspace.onDidChangeConfiguration(this.onConfigurationChanged,this)),this.onConfigurationChanged(a.configuration.initializingChangeEvent)}get onDidChangeBlameability(){return this._onDidChangeBlameability.event}dispose(){this._listenersDisposable&&this._listenersDisposable.dispose(),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){if(!a.configuration.initializing(e)&&!e.affectsConfiguration("git.enabled",null))return;const t=r.workspace.getConfiguration("git",null).get("enabled",!0);void 0!==this._listenersDisposable&&(this._listenersDisposable.dispose(),this._listenersDisposable=void 0),c.setCommandContext(c.CommandContext.Enabled,t),t?(this._listenersDisposable=r.Disposable.from(r.window.onDidChangeActiveTextEditor(s.Functions.debounce(this.onActiveTextEditorChanged,50),this),r.workspace.onDidChangeTextDocument(this.onTextDocumentChanged,this),this.git.onDidBlameFail(this.onBlameFailed,this),this.git.onDidChange(this.onGitChanged,this)),this.updateContext(d.EditorChanged,r.window.activeTextEditor,!0)):this.updateContext(d.EditorChanged,r.window.activeTextEditor,!1)}onActiveTextEditorChanged(e){e!==this._context.editor&&(void 0===e||c.isTextEditor(e))&&this.updateContext(d.EditorChanged,e,!0)}onBlameFailed(e){void 0!==this._context.editor&&e===this.git.getCacheEntryKey(this._context.editor.document.uri)&&this.updateBlameability(d.BlameFailed,!1)}onDirtyStateChanged(e){this._context.state.dirty=e,this.updateBlameability(d.DocumentChanged)}onGitChanged(e){e.reason===h.GitChangeReason.Repositories&&this.updateRemotes()}onRepoChanged(e){this.updateContext(d.RepoChanged,this._context.editor),this.updateRemotes()}onTextDocumentChanged(e){if(void 0===this._context.editor||!n.TextDocumentComparer.equals(this._context.editor.document,e.document))return;const t=e.document.isDirty;if(t!==this._context.state.dirty)return t?(this._onDirtyStateChangedDebounced.cancel(),void this.onDirtyStateChanged(t)):void this._onDirtyStateChangedDebounced(t);this._onDirtyStateChangedDebounced.cancel()}updateContext(e,t,i=!1){return o.__awaiter(this,void 0,void 0,function*(){try{let o=!1,s=!1;if(i||this._context.editor!==t)if(this._context.editor=t,this._context.repo=void 0,void 0!==this._context.repoDisposable&&(this._context.repoDisposable.dispose(),this._context.repoDisposable=void 0),void 0!==t){this._context.uri=yield h.GitUri.fromUri(t.document.uri,this.git);const e=yield this.git.getRepository(this._context.uri);void 0!==e&&(this._context.repo=e,this._context.repoDisposable=e.onDidChange(this.onRepoChanged,this)),this._context.state.dirty=t.document.isDirty,o=!!this._context.uri.sha,s=yield this.git.isTracked(this._context.uri)}else this._context.uri=void 0,this._context.state.dirty=!1,this._context.state.blameable=!1;else void 0!==this._context.uri&&(o=!!this._context.uri.sha,s=yield this.git.isTracked(this._context.uri));this._context.state.revision!==o&&(this._context.state.revision=o,c.setCommandContext(c.CommandContext.ActiveIsRevision,o)),this._context.state.tracked!==s&&(this._context.state.tracked=s,c.setCommandContext(c.CommandContext.ActiveFileIsTracked,s)),this.updateBlameability(e,void 0,i),this.updateRemotes()}catch(e){l.Logger.error(e,"GitContextTracker.updateContext")}})}updateBlameability(e,t,i=!1){try{if(void 0===t&&(t=this._context.state.tracked&&!this._context.state.dirty),!i&&this._context.state.blameable===t)return;this._context.state.blameable=t,c.setCommandContext(c.CommandContext.ActiveIsBlameable,t),this._onDidChangeBlameability.fire({blameable:t,editor:this._context&&this._context.editor,reason:e})}catch(e){l.Logger.error(e,"GitContextTracker.updateBlameability")}}updateRemotes(){return o.__awaiter(this,void 0,void 0,function*(){try{let e=!1;if(void 0!==this._context.repo&&(e=yield this._context.repo.hasRemote()),c.setCommandContext(c.CommandContext.ActiveHasRemote,e),!e){const t=yield this.git.getRepositories();for(const i of t)if(i!==this._context.repo&&(e=yield i.hasRemotes()))break}c.setCommandContext(c.CommandContext.HasRemotes,e)}catch(e){l.Logger.error(e,"GitContextTracker.updateRemotes")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(5);t.ClearFileAnnotationsCommand=class extends r.EditorCommand{constructor(e){super(r.Commands.ClearFileAnnotations),this.annotationController=e}execute(e,t,i){return o.__awaiter(this,void 0,void 0,function*(){if(void 0!==e)try{return this.annotationController.clear(e)}catch(e){return n.Logger.error(e,"ClearFileAnnotationsCommand"),s.window.showErrorMessage("Unable to clear file annotations. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(102),n=i(6),a=i(18),c=i(4),h=i(5),l=i(10);t.CloseUnchangedFilesCommand=class extends n.ActiveEditorCommand{constructor(e){super(n.Commands.CloseUnchangedFiles),this.git=e}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){t=n.getCommandUri(t,e);try{if(void 0===i.uris){i=Object.assign({},i);const e=yield this.git.getRepoPath(t);if(!e)return l.Messages.showNoRepositoryWarningMessage("Unable to close unchanged files");const o=yield this.git.getStatusForRepo(e);if(void 0===o)return s.window.showWarningMessage("Unable to close unchanged files");i.uris=o.files.map(e=>e.uri)}if(0===i.uris.length)return s.commands.executeCommand(c.BuiltInCommands.CloseAllEditors);const e=new r.ActiveEditorTracker;let o=0,n=void 0,d=s.window.activeTextEditor;for(;;){if(void 0!==d){if(a.TextEditorComparer.equals(n,d,{useId:!0,usePosition:!0}))break;if(void 0!==d.document&&(d.document.isDirty||i.uris.some(e=>a.UriComparer.equals(e,d.document&&d.document.uri)))){const t=n;if(n=d,d=yield e.awaitNext(500),a.TextEditorComparer.equals(t,d,{useId:!0,usePosition:!0}))break;continue}}if(n=d,d=yield e.awaitClose(500),void 0===n&&void 0===d){if(++o>=4)break}else o=0}return void e.dispose()}catch(e){return h.Logger.error(e,"CloseUnchangedFilesCommand"),s.window.showErrorMessage("Unable to close unchanged files. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(4);t.ActiveEditorTracker=class extends r.Disposable{constructor(){super(()=>this.dispose());const e=s.Functions.debounce(e=>this._resolver&&this._resolver(e),50);this._disposable=r.window.onDidChangeActiveTextEditor(e)}dispose(){this._disposable&&this._disposable.dispose()}awaitClose(e=500){return o.__awaiter(this,void 0,void 0,function*(){return this.close(),this.wait(e)})}awaitNext(e=500){return o.__awaiter(this,void 0,void 0,function*(){return this.next(),this.wait(e)})}close(){return o.__awaiter(this,void 0,void 0,function*(){return r.commands.executeCommand(n.BuiltInCommands.CloseActiveEditor)})}next(){return o.__awaiter(this,void 0,void 0,function*(){return r.commands.executeCommand(n.BuiltInCommands.NextEditor)})}wait(e=500){return o.__awaiter(this,void 0,void 0,function*(){const t=yield new Promise((t,i)=>{let o;this._resolver=(e=>{o&&(clearTimeout(o),o=0,t(e))}),o=setTimeout(()=>{t(r.window.activeTextEditor),o=0},e)});return this._resolver=void 0,t})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(6),a=i(3),c=i(5),h=i(44);t.CopyMessageToClipboardCommand=class extends n.ActiveEditorCommand{constructor(e){super(n.Commands.CopyMessageToClipboard),this.git=e}preExecute(e,t={}){return o.__awaiter(this,void 0,void 0,function*(){return n.isCommandViewContextWithCommit(e)?(t=Object.assign({},t),t.sha=e.node.commit.sha,this.execute(e.editor,e.node.commit.uri,t)):this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){t=n.getCommandUri(t,e);try{if(i=Object.assign({},i),void 0===t){const t=yield this.git.getActiveRepoPath(e);if(!t)return;const o=yield this.git.getLogForRepo(t,{maxCount:1});if(!o)return;return i.message=s.Iterables.first(o.commits.values()).message,void h.copy(i.message)}const o=yield a.GitUri.fromUri(t,this.git);if(void 0===i.message){if(void 0===i.sha){if(void 0!==e&&void 0!==e.document&&e.document.isDirty)return;const t=e&&e.selection.active.line||0;if(t<0)return;try{const e=yield this.git.getBlameForLine(o,t);if(!e)return;if(e.commit.isUncommitted)return;i.sha=e.commit.sha,o.repoPath||(o.repoPath=e.commit.repoPath)}catch(e){return c.Logger.error(e,"CopyMessageToClipboardCommand",`getBlameForLine(${t})`),r.window.showErrorMessage("Unable to copy message. See output channel for more details")}}const t=yield this.git.getLogCommit(o.repoPath,o.fsPath,i.sha);if(void 0===t)return;i.message=t.message}return void h.copy(i.message)}catch(e){return c.Logger.error(e,"CopyMessageToClipboardCommand"),r.window.showErrorMessage("Unable to copy message. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(6),a=i(3),c=i(5),h=i(44);t.CopyShaToClipboardCommand=class extends n.ActiveEditorCommand{constructor(e){super(n.Commands.CopyShaToClipboard),this.git=e}preExecute(e,t={}){return o.__awaiter(this,void 0,void 0,function*(){return n.isCommandViewContextWithCommit(e)?(t=Object.assign({},t),t.sha=e.node.commit.sha,this.execute(e.editor,e.node.commit.uri,t)):this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){t=n.getCommandUri(t,e);try{if(i=Object.assign({},i),void 0===t){const t=yield this.git.getActiveRepoPath(e);if(!t)return;const o=yield this.git.getLogForRepo(t,{maxCount:1});if(!o)return;return i.sha=s.Iterables.first(o.commits.values()).sha,void h.copy(i.sha)}const o=yield a.GitUri.fromUri(t,this.git);if(void 0===i.sha){if(void 0!==e&&void 0!==e.document&&e.document.isDirty)return;const t=e&&e.selection.active.line||0;if(t<0)return;try{const e=yield this.git.getBlameForLine(o,t);if(void 0===e)return;i.sha=e.commit.sha}catch(e){return c.Logger.error(e,"CopyShaToClipboardCommand",`getBlameForLine(${t})`),r.window.showErrorMessage("Unable to copy commit id. See output channel for more details")}}return void h.copy(i.sha)}catch(e){return c.Logger.error(e,"CopyShaToClipboardCommand"),r.window.showErrorMessage("Unable to copy commit id. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(11),a=i(4),c=i(19),h=i(5),l=i(10),d=i(12);t.DiffDirectoryCommand=class extends r.ActiveEditorCommand{constructor(e){super([r.Commands.DiffDirectory,r.Commands.ExternalDiffAll,r.Commands.ExplorersOpenDirectoryDiff,r.Commands.ExplorersOpenDirectoryDiffWithWorking]),this.git=e}preExecute(e,t={}){return o.__awaiter(this,void 0,void 0,function*(){switch(e.command){case r.Commands.ExternalDiffAll:t.ref1="HEAD",t.ref2=void 0;break;case r.Commands.ExplorersOpenDirectoryDiff:"view"===e.type&&e.node instanceof c.ComparisionResultsNode&&(t.ref1=e.node.ref1,t.ref2=e.node.ref2);break;case r.Commands.ExplorersOpenDirectoryDiffWithWorking:n.isCommandViewContextWithRef(e)&&(t.ref1=e.node.ref,t.ref2=void 0)}return this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){t=r.getCommandUri(t,e);let o;try{const e=yield this.git.getRepoPath(t);if(!e)return l.Messages.showNoRepositoryWarningMessage("Unable to open directory compare");if(!i.ref1){i=Object.assign({},i);const t=`Compare Working Tree to ${a.GlyphChars.Ellipsis}`;o=d.BranchesAndTagsQuickPick.showProgress(t);const[s,r]=yield Promise.all([this.git.getBranches(e),this.git.getTags(e)]);if(o.token.isCancellationRequested)return;const n=yield d.BranchesAndTagsQuickPick.show(s,r,t,{progressCancellation:o});if(void 0===n)return;if(n instanceof d.CommandQuickPickItem)return n.execute();if(i.ref1=n.name,void 0===i.ref1)return}return void this.git.openDirectoryDiff(e,i.ref1,i.ref2)}catch(e){if("No diff tool found"===(e&&e.toString())){if(!(yield s.window.showWarningMessage("Unable to open directory compare because there is no Git diff tool configured","View Git Docs")))return;return s.commands.executeCommand(a.BuiltInCommands.Open,s.Uri.parse("https://git-scm.com/docs/git-config#git-config-difftool"))}return h.Logger.error(e,"DiffDirectoryCommand"),s.window.showErrorMessage("Unable to open directory compare. See output channel for more details")}finally{o&&o.dispose()}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(16),n=i(4);class a{constructor(e){this.branch=e,this.label=`${e.current?`$(check)${n.GlyphChars.Space}`:n.GlyphChars.Space.repeat(4)} ${e.name}`,this.description=e.remote?`${n.GlyphChars.Space.repeat(2)} remote branch`:""}}t.BranchQuickPickItem=a;t.BranchesQuickPick=class{static show(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){const o=e.map(e=>new a(e));return void 0!==i.goBackCommand&&o.splice(0,0,i.goBackCommand),yield s.window.showQuickPick(o,{placeHolder:t,ignoreFocusOut:r.getQuickPickIgnoreFocusOut()})})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(11),a=i(16),c=i(4),h=i(3),l=i(14),d=i(21),u=i(7);class m extends a.OpenFileCommandQuickPickItem{constructor(e,t){const i=h.getGitStatusOcticon(t.status),o=h.GitStatusFile.getFormattedDirectory(t,!0);super(h.GitUri.toRevisionUri(e.sha,t,e.repoPath),{label:`${s.Strings.pad(i,4,2)} ${u.basename(t.fileName)}`,description:o}),this.commit=e.toFileCommit(t),this.status=t.status}get sha(){return this.commit.sha}onDidPressKey(e){return void 0===this.commit.previousSha?super.onDidPressKey(e):r.commands.executeCommand(n.Commands.DiffWithPrevious,this.commit.toGitUri(),{commit:this.commit,showOptions:{preserveFocus:!0,preview:!1}})}}t.CommitWithFileStatusQuickPickItem=m;class g extends a.OpenFilesCommandQuickPickItem{constructor(e,t=!1,i){const o=e.repoPath;super(s.Arrays.filterMap(e.fileStatuses,e=>h.GitUri.fromFileStatus(e,o)),i||{label:"$(file-symlink-file) Open Files",description:""})}}t.OpenCommitFilesCommandQuickPickItem=g;class p extends a.OpenFilesCommandQuickPickItem{constructor(e,t){super(s.Arrays.filterMap(e.fileStatuses,t=>h.GitUri.toRevisionUri("D"===t.status?e.previousFileSha:e.sha,t,e.repoPath)),t||{label:"$(file-symlink-file) Open Revisions",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} in ${c.GlyphChars.Space}$(git-commit) ${e.shortSha}`})}}t.OpenCommitFileRevisionsCommandQuickPickItem=p;t.CommitDetailsQuickPick=class{static show(e,t,i,h,u,f){return o.__awaiter(this,void 0,void 0,function*(){yield t.resolvePreviousFileSha(e);const v=t.fileStatuses.map(e=>new m(t,e)),C=t.isStash;let y=0;if(C)v.splice(y++,0,new a.CommandQuickPickItem({label:"$(git-pull-request) Apply Stashed Changes",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} ${t.message}`},n.Commands.StashApply,[{confirm:!0,deleteAfter:!1,stashItem:t,goBackCommand:u}])),v.splice(y++,0,new a.CommandQuickPickItem({label:"$(x) Delete Stashed Changes",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} ${t.message}`},n.Commands.StashDelete,[{confirm:!0,stashItem:t,goBackCommand:u}]));else{const i=(yield e.getRemotes(t.repoPath)).filter(e=>void 0!==e.provider);i.length&&v.splice(y++,0,new d.OpenRemotesCommandQuickPickItem(i,{type:"commit",sha:t.sha},u))}v.splice(y++,0,new g(t)),v.splice(y++,0,new p(t)),v.splice(y++,0,new a.CommandQuickPickItem({label:"$(git-compare) Open Directory Compare with Previous Revision",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} $(git-commit) ${t.previousFileShortSha} ${c.GlyphChars.Space} $(git-compare) ${c.GlyphChars.Space} $(git-commit) ${t.shortSha}`},n.Commands.DiffDirectory,[t.uri,{ref1:t.previousFileSha,ref2:t.sha}])),v.splice(y++,0,new a.CommandQuickPickItem({label:"$(git-compare) Open Directory Compare with Working Tree",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} $(git-commit) ${t.shortSha} ${c.GlyphChars.Space} $(git-compare) ${c.GlyphChars.Space} $(file-directory) Working Tree`},n.Commands.DiffDirectory,[i,{ref1:t.sha}])),C||v.splice(y++,0,new a.CommandQuickPickItem({label:"$(clippy) Copy Commit ID to Clipboard",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} ${t.shortSha}`},n.Commands.CopyShaToClipboard,[i,{sha:t.sha}])),v.splice(y++,0,new a.CommandQuickPickItem({label:"$(clippy) Copy Commit Message to Clipboard",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} ${t.message}`},n.Commands.CopyMessageToClipboard,[i,{message:t.message,sha:t.sha}])),v.splice(y++,0,new a.CommandQuickPickItem({label:"Changed Files",description:t.getDiffStatus()},n.Commands.ShowQuickCommitDetails,[i,{commit:t,repoLog:f,sha:t.sha,goBackCommand:h}])),h&&v.splice(0,0,h);let w=void 0,_=void 0;C||(void 0===f||f.truncated||void 0!==f.sha?(w=(()=>o.__awaiter(this,void 0,void 0,function*(){let i=f,o=i&&i.commits.get(t.sha);return void 0!==o&&void 0!==o.previousSha||(o=(i=yield e.getLogForRepo(t.repoPath,{maxCount:e.config.advanced.maxQuickHistory,ref:t.sha}))&&i.commits.get(t.sha))&&(o.nextSha=t.nextSha),void 0===o||void 0===o.previousSha?l.KeyNoopCommand:new a.KeyCommandQuickPickItem(n.Commands.ShowQuickCommitDetails,[o.previousUri,{repoLog:i,sha:o.previousSha,goBackCommand:h}])})),_=(()=>o.__awaiter(this,void 0,void 0,function*(){let i=f,o=i&&i.commits.get(t.sha);if(void 0===o||void 0===o.nextSha){i=void 0,o=void 0;const r=yield e.getLogForRepo(t.repoPath,{maxCount:1,reverse:!0,ref:t.sha}),n=r&&s.Iterables.first(r.commits.values());void 0!==n&&n.sha!==t.sha&&((o=t).nextSha=n.sha)}return void 0===o||void 0===o.nextSha?l.KeyNoopCommand:new a.KeyCommandQuickPickItem(n.Commands.ShowQuickCommitDetails,[o.nextUri,{repoLog:i,sha:o.nextSha,goBackCommand:h}])}))):(w=void 0===t.previousSha?void 0:new a.KeyCommandQuickPickItem(n.Commands.ShowQuickCommitDetails,[t.previousUri,{repoLog:f,sha:t.previousSha,goBackCommand:h}]),_=void 0===t.nextSha?void 0:new a.KeyCommandQuickPickItem(n.Commands.ShowQuickCommitDetails,[t.nextUri,{repoLog:f,sha:t.nextSha,goBackCommand:h}])));const b=yield l.Keyboard.instance.beginScope({left:h,",":w,".":_}),S=yield r.window.showQuickPick(v,{matchOnDescription:!0,matchOnDetail:!0,placeHolder:`${t.shortSha} ${s.Strings.pad(c.GlyphChars.Dot,1,1)} ${t.author?`${t.author}, `:""}${t.fromNow()} ${s.Strings.pad(c.GlyphChars.Dot,1,1)} ${t.message}`,ignoreFocusOut:a.getQuickPickIgnoreFocusOut(),onDidSelectItem:e=>{b.setKeyCommand("right",e),"function"==typeof e.onDidSelect&&e.onDidSelect()}});return yield b.dispose(),S})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(11),a=i(16),c=i(4),h=i(3),l=i(14),d=i(21),u=i(7);class m extends a.CommandQuickPickItem{constructor(e,t,i){super(i||{label:"$(git-pull-request) Apply Changes",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} $(file-text) ${u.basename(e.fileName)} in ${c.GlyphChars.Space}$(git-commit) ${e.shortSha}`},void 0,void 0),this.commit=e,this.git=t}execute(){return o.__awaiter(this,void 0,void 0,function*(){const e=this.commit.toGitUri();return yield this.git.checkoutFile(e),n.openEditor(e,{preserveFocus:!0,preview:!1})})}}t.ApplyCommitFileChangesCommandQuickPickItem=m;class g extends a.OpenFileCommandQuickPickItem{constructor(e,t){super(r.Uri.file(u.resolve(e.repoPath,e.fileName)),t||{label:"$(file-symlink-file) Open File",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} ${u.basename(e.fileName)}`})}}t.OpenCommitFileCommandQuickPickItem=g;class p extends a.OpenFileCommandQuickPickItem{constructor(e,t){let i,o;"D"===e.status?(o=h.GitUri.toRevisionUri(e.previousFileSha,e.previousUri.fsPath,e.repoPath),i=`${s.Strings.pad(c.GlyphChars.Dash,2,3)} ${u.basename(e.fileName)} in ${c.GlyphChars.Space}$(git-commit) ${e.previousShortSha} (deleted in ${c.GlyphChars.Space}$(git-commit) ${e.shortSha})`):(o=h.GitUri.toRevisionUri(e.sha,e.uri.fsPath,e.repoPath),i=`${s.Strings.pad(c.GlyphChars.Dash,2,3)} ${u.basename(e.fileName)} in ${c.GlyphChars.Space}$(git-commit) ${e.shortSha}`),super(o,t||{label:"$(file-symlink-file) Open Revision",description:i})}}t.OpenCommitFileRevisionCommandQuickPickItem=p;t.CommitFileDetailsQuickPick=class{static show(e,t,i,h,f,v){return o.__awaiter(this,void 0,void 0,function*(){const C=[],y=t.isStash,w=t.workingFileName&&u.basename(t.workingFileName)||u.basename(t.fileName),_=t.isUncommitted;if(_){const i=yield e.getLogCommit(void 0,t.uri.fsPath,{previous:!0});if(void 0===i)return;t=i}yield t.resolvePreviousFileSha(e),y&&C.push(new m(t,e)),t.previousFileShortSha&&C.push(new a.CommandQuickPickItem({label:"$(git-compare) Open Changes",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} $(git-commit) ${t.previousFileShortSha} ${c.GlyphChars.Space} $(git-compare) ${c.GlyphChars.Space} $(git-commit) ${t.shortSha}`},n.Commands.DiffWithPrevious,[t.uri,{commit:t}])),t.workingFileName&&C.push(new a.CommandQuickPickItem({label:"$(git-compare) Open Changes with Working Tree",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} $(git-commit) ${t.shortSha} ${c.GlyphChars.Space} $(git-compare) ${c.GlyphChars.Space} $(file-text) ${w}`},n.Commands.DiffWithWorking,[r.Uri.file(u.resolve(t.repoPath,t.workingFileName)),{commit:t}])),t.workingFileName&&"D"!==t.status&&C.push(new g(t)),C.push(new p(t));const b=(yield e.getRemotes(t.repoPath)).filter(e=>void 0!==e.provider);if(b.length){if(t.workingFileName&&"D"!==t.status){const i=yield e.getBranch(t.repoPath);C.push(new d.OpenRemotesCommandQuickPickItem(b,{type:"file",fileName:t.workingFileName,branch:i.name},f))}y||C.push(new d.OpenRemotesCommandQuickPickItem(b,{type:"revision",fileName:t.fileName,commit:t},f))}y||(C.push(new m(t,e)),C.push(new a.CommandQuickPickItem({label:"$(clippy) Copy Commit ID to Clipboard",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} ${t.shortSha}`},n.Commands.CopyShaToClipboard,[i,{sha:t.sha}])),C.push(new a.CommandQuickPickItem({label:"$(clippy) Copy Commit Message to Clipboard",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} ${t.message}`},n.Commands.CopyMessageToClipboard,[i,{message:t.message,sha:t.sha}])),C.push(new a.CommandQuickPickItem({label:"$(git-commit) Show Commit Details",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} $(git-commit) ${t.shortSha}`},n.Commands.ShowQuickCommitDetails,[t.toGitUri(),{commit:t,sha:t.sha,goBackCommand:f}]))),t.workingFileName&&C.push(new a.CommandQuickPickItem({label:"$(history) Show File History",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} of ${u.basename(t.fileName)}`},n.Commands.ShowQuickFileHistory,[r.Uri.file(u.resolve(t.repoPath,t.workingFileName)),{fileLog:v,goBackCommand:f}])),y||C.push(new a.CommandQuickPickItem({label:`$(history) Show ${t.workingFileName?"Previous ":""}File History`,description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} of ${u.basename(t.fileName)} ${s.Strings.pad(c.GlyphChars.Dot,1,1)} from ${c.GlyphChars.Space}$(git-commit) ${t.shortSha}`},n.Commands.ShowQuickFileHistory,[t.toGitUri(),{goBackCommand:f}])),h&&C.splice(0,0,h);let S=void 0,x=void 0;y||(void 0===v||v.truncated||void 0!==v.sha?(S=(()=>o.__awaiter(this,void 0,void 0,function*(){let o=v,r=o&&o.commits.get(t.sha);if(void 0===r||void 0===r.previousSha){if(void 0===(o=yield e.getLogForFile(t.repoPath,i.fsPath,{maxCount:e.config.advanced.maxQuickHistory,ref:t.sha})))return l.KeyNoopCommand;void 0===(r=o&&o.commits.get(t.sha))&&t.isMerge&&(r=s.Iterables.first(o.commits.values())),r&&(r.nextSha=t.nextSha,r.nextFileName=t.nextFileName)}return void 0===r||void 0===r.previousSha?l.KeyNoopCommand:new a.KeyCommandQuickPickItem(n.Commands.ShowQuickCommitFileDetails,[r.previousUri,{fileLog:o,sha:r.previousSha,goBackCommand:h}])})),x=(()=>o.__awaiter(this,void 0,void 0,function*(){let o=v,s=o&&o.commits.get(t.sha);if(void 0===s||void 0===s.nextSha){o=void 0,s=void 0;const r=yield e.findNextCommit(t.repoPath,i.fsPath,t.sha);void 0!==r&&r.sha!==t.sha&&((s=t).nextSha=r.sha,s.nextFileName=r.originalFileName||r.fileName)}return void 0===s||void 0===s.nextSha?l.KeyNoopCommand:new a.KeyCommandQuickPickItem(n.Commands.ShowQuickCommitFileDetails,[s.nextUri,{fileLog:o,sha:s.nextSha,goBackCommand:h}])}))):(S=void 0===t.previousSha?void 0:new a.KeyCommandQuickPickItem(n.Commands.ShowQuickCommitFileDetails,[t.previousUri,{fileLog:v,sha:t.previousSha,goBackCommand:h}]),x=void 0===t.nextSha?void 0:new a.KeyCommandQuickPickItem(n.Commands.ShowQuickCommitFileDetails,[t.nextUri,{fileLog:v,sha:t.nextSha,goBackCommand:h}])));const P=yield l.Keyboard.instance.beginScope({left:h,",":S,".":x}),k=yield r.window.showQuickPick(C,{matchOnDescription:!0,placeHolder:`${t.getFormattedPath()} ${s.Strings.pad(c.GlyphChars.Dot,1,1)} ${_?`Uncommitted ${c.GlyphChars.ArrowRightHollow} `:""}${t.shortSha} ${s.Strings.pad(c.GlyphChars.Dot,1,1)} ${t.author}, ${t.fromNow()} ${s.Strings.pad(c.GlyphChars.Dot,1,1)} ${t.message}`,ignoreFocusOut:a.getQuickPickIgnoreFocusOut(),onDidSelectItem:e=>{P.setKeyCommand("right",e)}});return yield P.dispose(),k})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(14),a=i(12);t.CommitsQuickPick=class{static showProgress(e){return a.showQuickPickProgress(e,{left:n.KeyNoopCommand,",":n.KeyNoopCommand,".":n.KeyNoopCommand})}static show(e,t,i,c,h){return o.__awaiter(this,void 0,void 0,function*(){const e=t&&[...s.Iterables.map(t.commits.values(),e=>new a.CommitQuickPickItem(e))]||[new a.MessageQuickPickItem("No results found")];if(void 0!==h.showInResultsExplorerCommand&&e.splice(0,0,h.showInResultsExplorerCommand),void 0!==h.showAllCommand&&e.splice(0,0,h.showAllCommand),void 0!==h.goBackCommand&&e.splice(0,0,h.goBackCommand),c.token.isCancellationRequested)return;const o=yield n.Keyboard.instance.beginScope({left:h.goBackCommand});c.cancel();const l=yield r.window.showQuickPick(e,{matchOnDescription:!0,placeHolder:i,ignoreFocusOut:a.getQuickPickIgnoreFocusOut()});return yield o.dispose(),l})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(11),a=i(16),c=i(4),h=i(3),l=i(14),d=i(21);t.BranchHistoryQuickPick=class{static showProgress(e){return a.showQuickPickProgress(`${e} history ${c.GlyphChars.Dash} search by commit message, filename, or commit id`,{left:l.KeyNoopCommand,",":l.KeyNoopCommand,".":l.KeyNoopCommand})}static show(e,t,i,u,m,g,p){return o.__awaiter(this,void 0,void 0,function*(){const o=Array.from(s.Iterables.map(t.commits.values(),e=>new a.CommitQuickPickItem(e))),f=new a.CommandQuickPickItem({label:`go back ${c.GlyphChars.ArrowBack}`,description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} to ${c.GlyphChars.Space}$(git-branch) ${u} history`},n.Commands.ShowQuickBranchHistory,[i,{branch:u,log:t,maxCount:t.maxCount,goBackCommand:g}]),v=(yield e.getRemotes(i&&i.repoPath||t.repoPath)).filter(e=>void 0!==e.provider);v.length&&o.splice(0,0,new d.OpenRemotesCommandQuickPickItem(v,{type:"branch",branch:u},f)),o.splice(0,0,new a.CommandQuickPickItem({label:"$(search) Show Commit Search",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} search for commits by message, author, files, or commit id`},n.Commands.ShowCommitSearch,[h.GitUri.fromRepoPath(t.repoPath),{goBackCommand:f}]));let C=void 0;if((t.truncated||t.sha)&&(t.truncated?o.splice(0,0,new a.CommandQuickPickItem({label:"$(sync) Show All Commits",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} this may take a while`},n.Commands.ShowQuickBranchHistory,[h.GitUri.fromRepoPath(t.repoPath),{branch:u,maxCount:0,goBackCommand:g}])):o.splice(0,0,new a.CommandQuickPickItem({label:"$(history) Show Branch History",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} shows ${c.GlyphChars.Space}$(git-branch) ${u} history`},n.Commands.ShowQuickBranchHistory,[h.GitUri.fromRepoPath(t.repoPath),{branch:u,goBackCommand:f}])),p&&o.splice(0,0,p),t.truncated)){const e=new a.CommandQuickPickItem({label:"$(arrow-right) Show Next Commits",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} shows ${t.maxCount} newer commits`},n.Commands.ShowQuickBranchHistory,[i,{branch:u,maxCount:t.maxCount,nextPageCommand:p}]),r=s.Iterables.last(t.commits.values());null!=r&&(C=new a.CommandQuickPickItem({label:"$(arrow-left) Show Previous Commits",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} shows ${t.maxCount} older commits`},n.Commands.ShowQuickBranchHistory,[new h.GitUri(i||r.uri,r),{branch:u,maxCount:t.maxCount,goBackCommand:g,nextPageCommand:e}]),o.splice(0,0,C))}if(g&&o.splice(0,0,g),m.token.isCancellationRequested)return;const y=yield l.Keyboard.instance.beginScope({left:g,",":C,".":p});m.cancel();const w=yield r.window.showQuickPick(o,{matchOnDescription:!0,matchOnDetail:!0,placeHolder:`${u} history ${c.GlyphChars.Dash} search by commit message, filename, or commit id`,ignoreFocusOut:a.getQuickPickIgnoreFocusOut()});return yield y.dispose(),w})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(11),a=i(16),c=i(4),h=i(14),l=i(21),d=i(7);t.FileHistoryQuickPick=class{static showProgress(e){return a.showQuickPickProgress(e,{left:h.KeyNoopCommand,",":h.KeyNoopCommand,".":h.KeyNoopCommand})}static show(e,t,i,u,m={}){return o.__awaiter(this,void 0,void 0,function*(){m=Object.assign({pickerOnly:!1},m);const o=Array.from(s.Iterables.map(t.commits.values(),e=>new a.CommitQuickPickItem(e)));let g=0;if(m.pickerOnly&&(g++,o.splice(0,0,new a.ShowBranchesAndTagsQuickPickItem(t.repoPath,u,e,m.currentCommand))),void 0!==m.showInResultsExplorerCommand&&(g++,o.splice(0,0,m.showInResultsExplorerCommand)),t.truncated||t.sha){if(void 0!==m.showAllCommand)g++,o.splice(0,0,m.showAllCommand);else if(!m.pickerOnly){const h=yield e.findWorkingFileName(t.repoPath,d.relative(t.repoPath,i.fsPath));h&&(g++,o.splice(0,0,new a.CommandQuickPickItem({label:"$(history) Show File History",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} of ${d.basename(h)}`},n.Commands.ShowQuickFileHistory,[r.Uri.file(d.resolve(t.repoPath,h)),{goBackCommand:new a.CommandQuickPickItem({label:`go back ${c.GlyphChars.ArrowBack}`,description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} to history of ${c.GlyphChars.Space}$(file-text) ${d.basename(i.fsPath)}${i.sha?` from ${c.GlyphChars.Space}$(git-commit) ${i.shortSha}`:""}`},n.Commands.ShowQuickFileHistory,[i,{log:t,maxCount:t.maxCount,range:t.range,goBackCommand:m.goBackCommand}])}])))}void 0!==m.nextPageCommand&&(g++,o.splice(0,0,m.nextPageCommand)),void 0!==m.previousPageCommand&&(g++,o.splice(0,0,m.previousPageCommand))}if(!m.pickerOnly){const r=yield e.getBranch(i.repoPath),h=new a.CommandQuickPickItem({label:`go back ${c.GlyphChars.ArrowBack}`,description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} to history of ${c.GlyphChars.Space}$(file-text) ${d.basename(i.fsPath)}${i.sha?` from ${c.GlyphChars.Space}$(git-commit) ${i.shortSha}`:""}`},n.Commands.ShowQuickFileHistory,[i,{log:t,maxCount:t.maxCount,range:t.range}]);void 0===m.goBackCommand&&o.splice(g++,0,new a.CommandQuickPickItem({label:"$(history) Show Branch History",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} shows  ${c.GlyphChars.Space}$(git-branch) ${r.name} history`},n.Commands.ShowQuickCurrentBranchHistory,[void 0,{goBackCommand:h}]));const u=(yield e.getRemotes(i.repoPath)).filter(e=>void 0!==e.provider);if(u.length){const e=void 0!==i.sha?{type:"revision",branch:r.name,fileName:i.getRelativePath(),sha:i.sha}:{type:"file",branch:r.name,fileName:i.getRelativePath()};o.splice(g++,0,new l.OpenRemotesCommandQuickPickItem(u,e,h))}m.goBackCommand&&o.splice(0,0,m.goBackCommand)}if(void 0!==m.progressCancellation&&m.progressCancellation.token.isCancellationRequested)return;const p=yield h.Keyboard.instance.beginScope({left:m.goBackCommand,",":m.previousPageCommand,".":m.nextPageCommand});m.progressCancellation&&m.progressCancellation.cancel();const f=yield r.window.showQuickPick(o,{matchOnDescription:!0,matchOnDetail:!0,placeHolder:u,ignoreFocusOut:a.getQuickPickIgnoreFocusOut()});return yield p.dispose(),f})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(12);class a{constructor(e){this.repository=e,this.label=e.name,this.description=e.path}get repoPath(){return this.repository.path}}t.RepositoryQuickPickItem=a;t.RepositoriesQuickPick=class{static show(e,t,i){return o.__awaiter(this,void 0,void 0,function*(){const o=[...s.Iterables.map(yield e.getRepositories(),e=>new a(e))];return void 0!==i&&o.splice(0,0,i),yield r.window.showQuickPick(o,{placeHolder:t,ignoreFocusOut:n.getQuickPickIgnoreFocusOut()})})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(11),a=i(16),c=i(4),h=i(3),l=i(14),d=i(7);class u extends a.OpenFileCommandQuickPickItem{constructor(e,t,i){const o=e.getOcticon(),r=e.getFormattedDirectory(!0);super(e.uri,i||{label:`${e.staged?"$(check)":c.GlyphChars.Space.repeat(3)}${s.Strings.pad(o,2,2)} ${d.basename(e.fileName)}`,description:r}),this.status=e,void 0!==e.indexStatus?this.commit=new h.GitLogCommit(h.GitCommitType.File,e.repoPath,h.GitService.stagedUncommittedSha,"You",void 0,new Date,"",e.fileName,[e],e.status,e.originalFileName,"HEAD",e.fileName):this.commit=new h.GitLogCommit(h.GitCommitType.File,e.repoPath,h.GitService.uncommittedSha,"You",void 0,new Date,"",e.fileName,[e],e.status,e.originalFileName,void 0!==t?h.GitService.stagedUncommittedSha:"HEAD",e.fileName)}onDidPressKey(e){return r.commands.executeCommand(n.Commands.DiffWithPrevious,h.GitUri.fromFileStatus(this.status,this.status.repoPath),{commit:this.commit,line:0,showOptions:{preserveFocus:!0,preview:!1}})}}t.OpenStatusFileCommandQuickPickItem=u;class m extends a.CommandQuickPickItem{constructor(e,t){const i=e.map(e=>e.uri);super(t||{label:"$(file-symlink-file) Open Changed Files",description:""},n.Commands.OpenChangedFiles,[void 0,{uris:i}])}}t.OpenStatusFilesCommandQuickPickItem=m;t.RepoStatusQuickPick=class{static computeStatus(e){let t=0,i=0,o=0,s=0,r=0,n=0;const a=[],c=[];for(const h of e){switch(h.indexStatus){case"A":case"?":t++,a.push(h);break;case"D":r++;break;case void 0:break;default:o++,a.push(h)}switch(h.workTreeStatus){case"A":case"?":i++,c.push(h);break;case"D":n++;break;case void 0:break;default:s++,c.push(h)}}const h=t+o+r,l=i+s+n;return{staged:h,stagedStatus:h>0?`+${t} ~${o} -${r}`:"",stagedAddsAndChanges:a,unstaged:l,unstagedStatus:l>0?`+${i} ~${s} -${n}`:"",unstagedAddsAndChanges:c}}static show(e,t){return o.__awaiter(this,void 0,void 0,function*(){const i=[...s.Iterables.flatMap(e.files,e=>void 0!==e.workTreeStatus&&void 0!==e.indexStatus?[new u(e.with({indexStatus:null}),e.indexStatus),new u(e.with({workTreeStatus:null}))]:[new u(e)])];i.sort((e,t)=>(e.status.staged?-1:1)-(t.status.staged?-1:1)||e.status.fileName.localeCompare(t.status.fileName));const o=new a.CommandQuickPickItem({label:`go back ${c.GlyphChars.ArrowBack}`,description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} to ${c.GlyphChars.Space}$(git-branch) ${e.branch} status`},n.Commands.ShowQuickRepoStatus,[void 0,{goBackCommand:t}]),d=this.computeStatus(e.files);if(d.staged>0){let o=0;const s=d.unstaged>0?e.files.findIndex(e=>!e.staged):-1;s>-1&&(i.splice(s,0,new a.CommandQuickPickItem({label:"Unstaged Files",description:d.unstagedStatus},n.Commands.ShowQuickRepoStatus,[void 0,{goBackCommand:t}])),i.splice(s,0,new m(d.stagedAddsAndChanges,{label:`${c.GlyphChars.Space.repeat(4)} $(file-symlink-file) Open Staged Files`,description:""})),i.push(new m(d.unstagedAddsAndChanges,{label:`${c.GlyphChars.Space.repeat(4)} $(file-symlink-file) Open Unstaged Files`,description:""}))),i.splice(o++,0,new a.CommandQuickPickItem({label:"Staged Files",description:d.stagedStatus},n.Commands.ShowQuickRepoStatus,[void 0,{goBackCommand:t}]))}else e.files.some(e=>!e.staged)&&i.splice(0,0,new a.CommandQuickPickItem({label:"Unstaged Files",description:d.unstagedStatus},n.Commands.ShowQuickRepoStatus,[void 0,{goBackCommand:t}]));e.files.length?(i.push(new m(d.stagedAddsAndChanges.concat(d.unstagedAddsAndChanges))),i.push(new a.CommandQuickPickItem({label:"$(x) Close Unchanged Files",description:""},n.Commands.CloseUnchangedFiles))):i.push(new a.CommandQuickPickItem({label:"No changes in the working tree",description:""},n.Commands.ShowQuickRepoStatus,[void 0,{goBackCommand:t}])),i.splice(0,0,new a.CommandQuickPickItem({label:"$(inbox) Show Stashed Changes",description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} shows stashed changes in the repository`},n.Commands.ShowQuickStashList,[h.GitUri.fromRepoPath(e.repoPath),{goBackCommand:o}])),e.upstream&&e.state.ahead&&i.splice(0,0,new a.CommandQuickPickItem({label:`$(cloud-upload)${c.GlyphChars.Space} ${e.state.ahead} Commit${e.state.ahead>1?"s":""} ahead of ${c.GlyphChars.Space}$(git-branch) ${e.upstream}`,description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} shows commits in ${c.GlyphChars.Space}$(git-branch) ${e.branch} but not ${c.GlyphChars.Space}$(git-branch) ${e.upstream}`},n.Commands.ShowQuickBranchHistory,[h.GitUri.fromRepoPath(e.repoPath,`${e.upstream}..${e.branch}`),{branch:e.branch,maxCount:0,goBackCommand:o}])),e.upstream&&e.state.behind&&i.splice(0,0,new a.CommandQuickPickItem({label:`$(cloud-download)${c.GlyphChars.Space} ${e.state.behind} Commit${e.state.behind>1?"s":""} behind ${c.GlyphChars.Space}$(git-branch) ${e.upstream}`,description:`${s.Strings.pad(c.GlyphChars.Dash,2,3)} shows commits in ${c.GlyphChars.Space}$(git-branch) ${e.upstream} but not ${c.GlyphChars.Space}$(git-branch) ${e.branch}${e.sha?` (since ${c.GlyphChars.Space}$(git-commit) ${h.GitService.shortenSha(e.sha)})`:""}`},n.Commands.ShowQuickBranchHistory,[h.GitUri.fromRepoPath(e.repoPath,`${e.branch}..${e.upstream}`),{branch:e.upstream,maxCount:0,goBackCommand:o}])),!e.upstream||e.state.ahead||e.state.behind||i.splice(0,0,new a.CommandQuickPickItem({label:`$(git-branch) ${e.branch} is up-to-date with ${c.GlyphChars.Space}$(git-branch) ${e.upstream}`,description:""},n.Commands.ShowQuickRepoStatus,[void 0,{goBackCommand:t}])),t&&i.splice(0,0,t);const g=yield l.Keyboard.instance.beginScope({left:t}),p=yield r.window.showQuickPick(i,{matchOnDescription:!0,placeHolder:`status of ${e.branch}${e.upstream?` ${s.Strings.pad(c.GlyphChars.ArrowLeftRight,1,1)} ${e.upstream}`:""}`,ignoreFocusOut:a.getQuickPickIgnoreFocusOut(),onDidSelectItem:e=>{g.setKeyCommand("right",e)}});return yield g.dispose(),p})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(11),a=i(4),c=i(14),h=i(12);t.StashListQuickPick=class{static showProgress(e){const t="apply"===e?`Apply stashed changes to your working tree${a.GlyphChars.Ellipsis}`:`stashed changes ${a.GlyphChars.Dash} search by message, filename, or commit id`;return h.showQuickPickProgress(t,{left:c.KeyNoopCommand,",":c.KeyNoopCommand,".":c.KeyNoopCommand})}static show(e,t,i,l,d,u){return o.__awaiter(this,void 0,void 0,function*(){const e=t&&Array.from(s.Iterables.map(t.commits.values(),e=>new h.CommitQuickPickItem(e)))||[];if("list"===i&&e.splice(0,0,new h.CommandQuickPickItem({label:"$(plus) Stash Changes",description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} stashes all changes`},n.Commands.StashSave,[{goBackCommand:u}])),d&&e.splice(0,0,d),l.token.isCancellationRequested)return;const o=yield c.Keyboard.instance.beginScope({left:d});l.cancel();const m=yield r.window.showQuickPick(e,{matchOnDescription:!0,placeHolder:"apply"===i?`Apply stashed changes to your working tree${a.GlyphChars.Ellipsis}`:`stashed changes ${a.GlyphChars.Dash} search by message, filename, or commit id`,ignoreFocusOut:h.getQuickPickIgnoreFocusOut()});return yield o.dispose(),m})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(3),a=i(5),c=i(10);t.DiffLineWithPreviousCommand=class extends r.ActiveEditorCommand{constructor(e){super(r.Commands.DiffLineWithPrevious),this.git=e}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=r.getCommandUri(t,e)))return;const o=yield n.GitUri.fromUri(t,this.git);if(void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line),void 0===i.commit||n.GitService.isUncommitted(i.commit.sha)){if(void 0!==e&&void 0!==e.document&&e.document.isDirty)return;const t=i.line;if(t<0)return;try{const e=yield this.git.getBlameForLine(o,t);if(void 0===e)return c.Messages.showFileNotUnderSourceControlWarningMessage("Unable to open compare");if(i.commit=e.commit,i.commit.isUncommitted){const e=yield this.git.getStatusForFile(o.repoPath,o.fsPath);void 0!==e&&void 0!==e.indexStatus&&(i.commit=i.commit.with({sha:n.GitService.stagedUncommittedSha}))}}catch(e){return a.Logger.error(e,"DiffLineWithPreviousCommand",`getBlameForLine(${t})`),s.window.showErrorMessage("Unable to open compare. See output channel for more details")}}const h={repoPath:i.commit.repoPath,lhs:{sha:void 0!==i.commit.previousSha?i.commit.previousSha:n.GitService.deletedSha,uri:i.commit.previousUri},rhs:{sha:i.commit.sha,uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return s.commands.executeCommand(r.Commands.DiffWith,h)})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(3),a=i(10),c=i(5);t.DiffLineWithWorkingCommand=class extends r.ActiveEditorCommand{constructor(e){super(r.Commands.DiffLineWithWorking),this.git=e}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=r.getCommandUri(t,e)))return;const o=yield n.GitUri.fromUri(t,this.git);if(void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line),void 0===i.commit||n.GitService.isUncommitted(i.commit.sha)){if(void 0!==e&&void 0!==e.document&&e.document.isDirty)return;const t=i.line;if(t<0)return;try{const e=yield this.git.getBlameForLine(o,t);if(void 0===e)return a.Messages.showFileNotUnderSourceControlWarningMessage("Unable to open compare");if(i.commit=e.commit,i.commit.isUncommitted){const t=yield this.git.getStatusForFile(o.repoPath,o.fsPath);i.commit=i.commit.with({sha:void 0!==t&&void 0!==t.indexStatus?n.GitService.stagedUncommittedSha:i.commit.previousSha,fileName:i.commit.previousFileName,originalFileName:null,previousSha:null,previousFileName:null}),i.line=e.line.line+1}}catch(e){return c.Logger.error(e,"DiffLineWithWorkingCommand",`getBlameForLine(${t})`),s.window.showErrorMessage("Unable to open compare. See output channel for more details")}}const h={repoPath:i.commit.repoPath,lhs:{sha:i.commit.sha,uri:i.commit.uri},rhs:{sha:"",uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return s.commands.executeCommand(r.Commands.DiffWith,h)})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(4),a=i(3),c=i(5),h=i(7);t.DiffWithCommand=class extends r.ActiveEditorCommand{constructor(e){super(r.Commands.DiffWith),this.git=e}static getMarkdownCommandArgs(e,t){let i;if(e instanceof a.GitCommit){const o=e;i=void 0===t?o.isUncommitted?{repoPath:o.repoPath,lhs:{sha:"HEAD",uri:o.uri},rhs:{sha:"",uri:o.uri}}:{repoPath:o.repoPath,lhs:{sha:void 0!==o.previousSha?o.previousSha:a.GitService.deletedSha,uri:o.previousUri},rhs:{sha:o.sha,uri:o.uri}}:{repoPath:o.repoPath,lhs:{sha:o.sha,uri:o.uri},rhs:{sha:t.sha,uri:t.uri}}}else i=e;return super.getMarkdownCommandArgsCore(r.Commands.DiffWith,i)}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0!==(i=Object.assign({},i)).repoPath&&void 0!==i.lhs&&void 0!==i.rhs)try{a.GitService.isResolveRequired(i.lhs.sha)&&(i.lhs.sha=yield this.git.resolveReference(i.repoPath,i.lhs.sha,i.lhs.uri)),a.GitService.isResolveRequired(i.rhs.sha)&&(i.rhs.sha=yield this.git.resolveReference(i.repoPath,i.rhs.sha,i.rhs.uri));const[e,t]=yield Promise.all([this.git.getVersionedFile(i.repoPath,i.lhs.uri.fsPath,i.lhs.sha),this.git.getVersionedFile(i.repoPath,i.rhs.uri.fsPath,i.rhs.sha)]);void 0!==i.line&&0!==i.line&&(void 0===i.showOptions&&(i.showOptions={}),i.showOptions.selection=new s.Range(i.line,0,i.line,0));let o="";void 0===t?o=a.GitService.isUncommitted(i.rhs.sha)?" (deleted)":"deleted in ":void 0!==e&&i.lhs.sha!==a.GitService.deletedSha||(o="added in ");let r="";if(void 0===e&&""===i.rhs.sha&&(void 0!==t?(r="not in ",o=""):r="deleted in "),void 0===i.lhs.title&&i.lhs.sha!==a.GitService.deletedSha&&(void 0!==e||""!==r)){const e=a.GitService.shortenSha(i.lhs.sha)||"";i.lhs.title=`${h.basename(i.lhs.uri.fsPath)}${""!==e?` (${r}${e})`:""}`}if(void 0===i.rhs.title&&i.rhs.sha!==a.GitService.deletedSha){const e=a.GitService.shortenSha(i.rhs.sha)||"";i.rhs.title=`${h.basename(i.rhs.uri.fsPath)}${""!==e?` (${o}${e})`:o}`}const l=void 0!==i.lhs.title&&void 0!==i.rhs.title?`${i.lhs.title} ${n.GlyphChars.ArrowLeftRight} ${i.rhs.title}`:i.lhs.title||i.rhs.title;return yield s.commands.executeCommand(n.BuiltInCommands.Diff,void 0===e?a.GitUri.toRevisionUri(a.GitService.deletedSha,i.lhs.uri.fsPath,i.repoPath):s.Uri.file(e),void 0===t?a.GitUri.toRevisionUri(a.GitService.deletedSha,i.rhs.uri.fsPath,i.repoPath):s.Uri.file(t),l,i.showOptions)}catch(e){return c.Logger.error(e,"DiffWithCommand","getVersionedFile"),s.window.showErrorMessage("Unable to open compare. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(4),a=i(3),c=i(10),h=i(12),l=i(7);t.DiffWithBranchCommand=class extends r.ActiveEditorCommand{constructor(e){super(r.Commands.DiffWithBranch),this.git=e}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=r.getCommandUri(t,e)))return;void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line);const o=yield a.GitUri.fromUri(t,this.git);if(!o.repoPath)return c.Messages.showNoRepositoryWarningMessage("Unable to open branch compare");const d=`Compare ${l.basename(o.fsPath)} with ${n.GlyphChars.Ellipsis}`,u=h.BranchesAndTagsQuickPick.showProgress(d);try{const[e,t]=yield Promise.all([this.git.getBranches(o.repoPath),this.git.getTags(o.repoPath)]);if(u.token.isCancellationRequested)return;const n=yield h.BranchesAndTagsQuickPick.show(e,t,d,{progressCancellation:u,goBackCommand:i.goBackCommand});if(void 0===n)return;if(n instanceof h.CommandQuickPickItem)return n.execute();const c=n.name;if(void 0===c)return;let m,g;const p=yield this.git.getDiffStatus(o.repoPath,"HEAD",c,{filter:"R"});if(void 0!==p){const e=a.GitService.normalizePath(l.relative(o.repoPath,o.fsPath)),t=p.find(t=>t.fileName===e);void 0!==t&&void 0!==t.originalFileName&&(m=s.Uri.file(l.join(o.repoPath,t.originalFileName)),g=`${l.basename(t.originalFileName)} (${c})`)}const f={repoPath:o.repoPath,lhs:{sha:n.remote?`remotes/${c}`:c,uri:m||o,title:g||`${l.basename(o.fsPath)} (${c})`},rhs:{sha:"",uri:o},line:i.line,showOptions:i.showOptions};return s.commands.executeCommand(r.Commands.DiffWith,f)}finally{u.dispose()}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(6),a=i(3),c=i(5),h=i(10);t.DiffWithNextCommand=class extends n.ActiveEditorCommand{constructor(e){super(n.Commands.DiffWithNext),this.git=e}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=n.getCommandUri(t,e)))return;void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line);const o=yield a.GitUri.fromUri(t,this.git);let l;if(void 0===i.commit||!(i.commit instanceof a.GitLogCommit)||void 0!==i.range)try{const e=void 0===i.commit?o.sha:i.commit.sha;if(a.GitService.isStagedUncommitted(e))return r.commands.executeCommand(n.Commands.DiffWithWorking,t);const d=yield this.git.getLogForFile(o.repoPath,o.fsPath,{maxCount:void 0!==e?void 0:2,range:i.range});if(void 0===d)return h.Messages.showFileNotUnderSourceControlWarningMessage("Unable to open compare");if(i.commit=e&&d.commits.get(e)||s.Iterables.first(d.commits.values()),void 0===o.sha&&void 0!==(l=yield this.git.getStatusForFile(o.repoPath,o.fsPath)))return r.commands.executeCommand(n.Commands.DiffWithWorking,t)}catch(e){return c.Logger.error(e,"DiffWithNextCommand",`getLogForFile(${o.repoPath}, ${o.fsPath})`),r.window.showErrorMessage("Unable to open compare. See output channel for more details")}if(void 0===i.commit.nextSha){if(void 0!==(l=l||(yield this.git.getStatusForFile(o.repoPath,o.fsPath)))&&"M"===l.indexStatus){const e={repoPath:i.commit.repoPath,lhs:{sha:i.commit.sha,uri:i.commit.uri},rhs:{sha:a.GitService.stagedUncommittedSha,uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return r.commands.executeCommand(n.Commands.DiffWith,e)}return r.commands.executeCommand(n.Commands.DiffWithWorking,t)}const d={repoPath:i.commit.repoPath,lhs:{sha:i.commit.sha,uri:i.commit.uri},rhs:{sha:i.commit.nextSha,uri:i.commit.nextUri},line:i.line,showOptions:i.showOptions};return r.commands.executeCommand(n.Commands.DiffWith,d)})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(6),a=i(3),c=i(5),h=i(10);t.DiffWithPreviousCommand=class extends n.ActiveEditorCommand{constructor(e){super(n.Commands.DiffWithPrevious),this.git=e}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=n.getCommandUri(t,e)))return;if(void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line),void 0===i.commit||!i.commit.isFile||void 0!==i.range){const e=yield a.GitUri.fromUri(t,this.git);try{let o=void 0===i.commit?e.sha:i.commit.sha;if(o===a.GitService.deletedSha)return h.Messages.showCommitHasNoPreviousCommitWarningMessage();let l=!1;a.GitService.isStagedUncommitted(o)&&(e.sha=o=void 0,l=!0);const d=yield this.git.getLogForFile(e.repoPath,e.fsPath,{maxCount:2,range:i.range,ref:o,skipMerges:!0});if(void 0===d)return h.Messages.showFileNotUnderSourceControlWarningMessage("Unable to open compare");if(i.commit=o&&d.commits.get(o)||s.Iterables.first(d.commits.values()),void 0===e.sha){const o=yield this.git.getStatusForFile(e.repoPath,e.fsPath);if(void 0!==o){if(l){const e={repoPath:i.commit.repoPath,lhs:{sha:i.commit.sha,uri:i.commit.uri},rhs:{sha:a.GitService.stagedUncommittedSha,uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return r.commands.executeCommand(n.Commands.DiffWith,e)}if(void 0!==o.indexStatus){const e={repoPath:i.commit.repoPath,lhs:{sha:a.GitService.stagedUncommittedSha,uri:i.commit.uri},rhs:{sha:"",uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return r.commands.executeCommand(n.Commands.DiffWith,e)}return r.commands.executeCommand(n.Commands.DiffWithWorking,t,{commit:i.commit,showOptions:i.showOptions})}}}catch(t){return c.Logger.error(t,"DiffWithPreviousCommand",`getLogForFile(${e.repoPath}, ${e.fsPath})`),r.window.showErrorMessage("Unable to open compare. See output channel for more details")}}const o={repoPath:i.commit.repoPath,lhs:{sha:void 0!==i.commit.previousSha?i.commit.previousSha:a.GitService.deletedSha,uri:i.commit.previousUri},rhs:{sha:i.commit.sha,uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return r.commands.executeCommand(n.Commands.DiffWith,o)})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(6),a=i(4),c=i(3),h=i(5),l=i(10),d=i(12);t.DiffWithRevisionCommand=class extends n.ActiveEditorCommand{constructor(e){super(n.Commands.DiffWithRevision),this.git=e}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=n.getCommandUri(t,e)))return;void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line);const o=yield c.GitUri.fromUri(t,this.git),u=`Compare ${o.getFormattedPath()}${o.sha?` ${s.Strings.pad(a.GlyphChars.Dot,1,1)} ${o.shortSha}`:""} with ${a.GlyphChars.Ellipsis}`,m=d.FileHistoryQuickPick.showProgress(u);try{const e=yield this.git.getLogForFile(o.repoPath,o.fsPath,{maxCount:i.maxCount,ref:o.sha});if(void 0===e)return l.Messages.showFileNotUnderSourceControlWarningMessage("Unable to open history compare");if(m.token.isCancellationRequested)return;let g=void 0;if(e.truncated){const o=new d.CommandQuickPickItem({label:"$(arrow-right) Show Next Commits",description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} shows ${e.maxCount} newer commits`},n.Commands.DiffWithRevision,[t,Object.assign({},i)]),r=s.Iterables.last(e.commits.values());null!=r&&(g=new d.CommandQuickPickItem({label:"$(arrow-left) Show Previous Commits",description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} shows ${e.maxCount} older commits`},n.Commands.DiffWithRevision,[new c.GitUri(t,r),Object.assign({},i,{nextPageCommand:o})]))}const p=yield d.FileHistoryQuickPick.show(this.git,e,o,u,{pickerOnly:!0,progressCancellation:m,currentCommand:new d.CommandQuickPickItem({label:`go back ${a.GlyphChars.ArrowBack}`,description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} to history of ${a.GlyphChars.Space}$(file-text) ${o.getFormattedPath()}${o.sha?` from ${a.GlyphChars.Space}$(git-commit) ${o.shortSha}`:""}`},n.Commands.DiffWithRevision,[t,Object.assign({},i)]),nextPageCommand:i.nextPageCommand,previousPageCommand:g,showAllCommand:void 0!==e&&e.truncated?new d.CommandQuickPickItem({label:"$(sync) Show All Commits",description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} this may take a while`},n.Commands.DiffWithRevision,[t,Object.assign({},i,{maxCount:0})]):void 0});if(void 0===p)return;let f;if(p instanceof d.ShowBranchesAndTagsQuickPickItem){const e=yield p.execute();if(void 0===e)return;if(e instanceof d.CommandQuickPickItem)return e.execute();f=e.name}else{if(p instanceof d.CommandQuickPickItem)return p.execute();f=p.commit.sha}const v={repoPath:o.repoPath,lhs:{sha:f,uri:o},rhs:{sha:"",uri:o},line:i.line,showOptions:i.showOptions};return yield r.commands.executeCommand(n.Commands.DiffWith,v)}catch(e){return h.Logger.error(e,"DiffWithRevisionCommand"),r.window.showErrorMessage("Unable to open compare. See output channel for more details")}finally{m.dispose()}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(3),a=i(5),c=i(10);t.DiffWithWorkingCommand=class extends r.ActiveEditorCommand{constructor(e){super(r.Commands.DiffWithWorking),this.git=e}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=r.getCommandUri(t,e)))return;const o=yield n.GitUri.fromUri(t,this.git);if(void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line),void 0===i.commit||n.GitService.isUncommitted(i.commit.sha)){if(void 0===o.sha)return s.window.showInformationMessage("File matches the working tree");if(n.GitService.isStagedUncommitted(o.sha)){o.sha=void 0;const e=yield this.git.getStatusForFile(o.repoPath,o.fsPath);if(void 0!==e&&void 0!==e.indexStatus){const e={repoPath:o.repoPath,lhs:{sha:n.GitService.stagedUncommittedSha,uri:o.fileUri()},rhs:{sha:"",uri:o.fileUri()},line:i.line,showOptions:i.showOptions};return s.commands.executeCommand(r.Commands.DiffWith,e)}}try{if(i.commit=yield this.git.getLogCommit(o.repoPath,o.fsPath,o.sha,{firstIfMissing:!0}),void 0===i.commit)return c.Messages.showFileNotUnderSourceControlWarningMessage("Unable to open compare")}catch(e){return a.Logger.error(e,"DiffWithWorkingCommand",`getLogCommit(${o.repoPath}, ${o.fsPath}, ${o.sha})`),s.window.showErrorMessage("Unable to open compare. See output channel for more details")}}if(void 0===(yield this.git.findWorkingFileName(o.repoPath,o.fsPath)))return;const h={repoPath:i.commit.repoPath,lhs:{sha:i.commit.sha,uri:i.commit.uri},rhs:{sha:"",uri:i.commit.uri},line:i.line,showOptions:i.showOptions};return s.commands.executeCommand(r.Commands.DiffWith,h)})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(6),a=i(4),c=i(5),h=i(10);var l;!function(e){e[e.INDEX_MODIFIED=0]="INDEX_MODIFIED",e[e.INDEX_ADDED=1]="INDEX_ADDED",e[e.INDEX_DELETED=2]="INDEX_DELETED",e[e.INDEX_RENAMED=3]="INDEX_RENAMED",e[e.INDEX_COPIED=4]="INDEX_COPIED",e[e.MODIFIED=5]="MODIFIED",e[e.DELETED=6]="DELETED",e[e.UNTRACKED=7]="UNTRACKED",e[e.IGNORED=8]="IGNORED",e[e.ADDED_BY_US=9]="ADDED_BY_US",e[e.ADDED_BY_THEM=10]="ADDED_BY_THEM",e[e.DELETED_BY_US=11]="DELETED_BY_US",e[e.DELETED_BY_THEM=12]="DELETED_BY_THEM",e[e.BOTH_ADDED=13]="BOTH_ADDED",e[e.BOTH_DELETED=14]="BOTH_DELETED",e[e.BOTH_MODIFIED=15]="BOTH_MODIFIED"}(l||(l={}));var d;!function(e){e[e.Merge=0]="Merge",e[e.Index=1]="Index",e[e.WorkingTree=2]="WorkingTree"}(d||(d={}));class u{constructor(e,t){this.uri=e,this.staged=t}}t.ExternalDiffCommand=class extends n.Command{constructor(e){super(n.Commands.ExternalDiff),this.git=e}preExecute(e,t={}){return o.__awaiter(this,void 0,void 0,function*(){return"scm-states"===e.type?(t=Object.assign({},t),t.files=e.scmResourceStates.map(e=>new u(e.resourceUri,e.resourceGroupType===d.Index)),this.execute(t)):"scm-groups"===e.type?(t=Object.assign({},t),t.files=s.Arrays.filterMap(e.scmResourceGroups[0].resourceStates,e=>this.isModified(e)?new u(e.resourceUri,e.resourceGroupType===d.Index):void 0),this.execute(t)):this.execute(t)})}isModified(e){const t=e.type;return t===l.BOTH_MODIFIED||t===l.INDEX_MODIFIED||t===l.MODIFIED}execute(e={}){return o.__awaiter(this,void 0,void 0,function*(){try{const t=yield this.git.getRepoPath(void 0);if(!t)return h.Messages.showNoRepositoryWarningMessage("Unable to open changed files");const i=yield this.git.getDiffTool(t);if(void 0===i){if(!(yield r.window.showWarningMessage("Unable to open file compare because there is no Git diff tool configured","View Git Docs")))return;return r.commands.executeCommand(a.BuiltInCommands.Open,r.Uri.parse("https://git-scm.com/docs/git-config#git-config-difftool"))}if(void 0===e.files){const i=yield this.git.getStatusForRepo(t);if(void 0===i)return r.window.showWarningMessage("Unable to open changed files");e.files=[];for(const t of i.files)"M"===t.indexStatus&&e.files.push(new u(t.uri,!0)),"M"===t.workTreeStatus&&e.files.push(new u(t.uri,!1))}for(const o of e.files)this.git.openDiffTool(t,o.uri,o.staged,i);return}catch(e){return c.Logger.error(e,"ExternalDiffCommand"),r.window.showErrorMessage("Unable to open external diff. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(6),a=i(5),c=i(10);t.OpenChangedFilesCommand=class extends n.ActiveEditorCommand{constructor(e){super(n.Commands.OpenChangedFiles),this.git=e}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){t=n.getCommandUri(t,e);try{if(void 0===i.uris){i=Object.assign({},i);const e=yield this.git.getRepoPath(t);if(!e)return c.Messages.showNoRepositoryWarningMessage("Unable to open changed files");const o=yield this.git.getStatusForRepo(e);if(void 0===o)return r.window.showWarningMessage("Unable to open changed files");i.uris=s.Arrays.filterMap(o.files,e=>"D"!==e.status?e.uri:void 0)}for(const e of i.uris)yield n.openEditor(e,{preserveFocus:!0,preview:!1});return}catch(e){return a.Logger.error(e,"OpenChangedFilesCommand"),r.window.showErrorMessage("Unable to open changed files. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(3),a=i(5);t.OpenBranchesInRemoteCommand=class extends r.ActiveEditorCommand{constructor(e){super(r.Commands.OpenBranchesInRemote),this.git=e}preExecute(e,t={}){return o.__awaiter(this,void 0,void 0,function*(){return r.isCommandViewContextWithRemote(e)&&((t=Object.assign({},t)).remote=e.node.remote.name),this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){const o=(t=r.getCommandUri(t,e))&&(yield n.GitUri.fromUri(t,this.git)),c=void 0===o?this.git.getHighlanderRepoPath():o.repoPath;if(c)try{const e=(yield this.git.getRemotes(c)).filter(e=>void 0!==e.provider);return s.commands.executeCommand(r.Commands.OpenInRemote,t,{resource:{type:"branches"},remote:i.remote,remotes:e})}catch(e){return a.Logger.error(e,"OpenBranchesInRemoteCommand"),s.window.showErrorMessage("Unable to open branches in remote provider. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(4),a=i(3),c=i(5),h=i(12);t.OpenBranchInRemoteCommand=class extends r.ActiveEditorCommand{constructor(e){super(r.Commands.OpenBranchInRemote),this.git=e}preExecute(e,t={}){return o.__awaiter(this,void 0,void 0,function*(){return r.isCommandViewContextWithBranch(e)&&((t=Object.assign({},t)).branch=e.node.branch.name,t.remote=e.node.branch.getRemote()),this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){const o=(t=r.getCommandUri(t,e))&&(yield a.GitUri.fromUri(t,this.git)),l=void 0===o?this.git.getHighlanderRepoPath():o.repoPath;if(l)try{if(void 0===i.branch){i=Object.assign({},i);const e=yield this.git.getBranches(l),t=yield h.BranchesQuickPick.show(e,`Show history for branch${n.GlyphChars.Ellipsis}`);if(void 0===t)return;if(t instanceof h.CommandQuickPickItem)return;if(i.branch=t.branch.name,void 0===i.branch)return}const e=(yield this.git.getRemotes(l)).filter(e=>void 0!==e.provider);return s.commands.executeCommand(r.Commands.OpenInRemote,t,{resource:{type:"branch",branch:i.branch},remote:i.remote,remotes:e})}catch(e){return c.Logger.error(e,"OpenBranchInRemoteCommandArgs"),s.window.showErrorMessage("Unable to open branch in remote provider. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(3),a=i(5),c=i(10);t.OpenCommitInRemoteCommand=class extends r.ActiveEditorCommand{constructor(e){super(r.Commands.OpenCommitInRemote),this.git=e}static getMarkdownCommandArgs(e){const t="string"==typeof e?{sha:e}:e;return super.getMarkdownCommandArgsCore(r.Commands.OpenCommitInRemote,t)}preExecute(e,t={}){return o.__awaiter(this,void 0,void 0,function*(){return r.isCommandViewContextWithCommit(e)?(t=Object.assign({},t),t.sha=e.node.commit.sha,this.execute(e.editor,e.node.commit.uri,t)):this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=r.getCommandUri(t,e)))return;if(void 0!==e&&void 0!==e.document&&e.document.isDirty)return;const o=yield n.GitUri.fromUri(t,this.git);if(o.repoPath)try{if(void 0===i.sha){const t=void 0===e?0:e.selection.active.line;if(t<0)return;const s=yield this.git.getBlameForLine(o,t);if(void 0===s)return c.Messages.showFileNotUnderSourceControlWarningMessage("Unable to open commit in remote provider");let r=s.commit;r.isUncommitted&&(r=r.with({sha:r.previousSha,fileName:r.previousFileName,previousSha:null,previousFileName:null})),i.sha=r.sha}const n=(yield this.git.getRemotes(o.repoPath)).filter(e=>void 0!==e.provider);return s.commands.executeCommand(r.Commands.OpenInRemote,t,{resource:{type:"commit",sha:i.sha},remotes:n})}catch(e){return a.Logger.error(e,"OpenCommitInRemoteCommand"),s.window.showErrorMessage("Unable to open commit in remote provider. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(3),a=i(5);t.OpenFileInRemoteCommand=class extends r.ActiveEditorCommand{constructor(e){super(r.Commands.OpenFileInRemote),this.git=e}preExecute(e,t={range:!0}){return o.__awaiter(this,void 0,void 0,function*(){return r.isCommandViewContextWithCommit(e)?(t=Object.assign({},t),t.range=!1,r.isCommandViewContextWithBranch(e)&&(t.branch=void 0!==e.node.branch?e.node.branch.name:void 0),this.execute(e.editor,e.node.commit.uri,t)):this.execute(e.editor,e.uri,t)})}execute(e,t,i={range:!0}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=r.getCommandUri(t,e)))return;const o=yield n.GitUri.fromUri(t,this.git);if(o.repoPath){if(void 0===i.branch){const e=yield this.git.getBranch(o.repoPath);void 0!==e&&(i.branch=e.name)}try{const n=(yield this.git.getRemotes(o.repoPath)).filter(e=>void 0!==e.provider),c=i.range&&void 0!==e?new s.Range(e.selection.start.with({line:e.selection.start.line+1}),e.selection.end.with({line:e.selection.end.line+1})):void 0;return s.commands.executeCommand(r.Commands.OpenInRemote,t,{resource:{type:void 0===o.sha?"file":"revision",branch:i.branch,fileName:o.getRelativePath(),range:c,sha:o.sha},remotes:n})}catch(e){return a.Logger.error(e,"OpenFileInRemoteCommand"),s.window.showErrorMessage("Unable to open file in remote provider. See output channel for more details")}}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(6),a=i(4),c=i(3),h=i(5),l=i(10),d=i(12);t.OpenFileRevisionCommand=class extends n.ActiveEditorCommand{constructor(e,t){super(n.Commands.OpenFileRevision),this.annotationController=e,this.git=t}static getMarkdownCommandArgs(e,t,i){let o;return o=e instanceof r.Uri?{uri:e,line:i,annotationType:t}:e,super.getMarkdownCommandArgsCore(n.Commands.OpenFileRevision,o)}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line);let o;try{if(void 0===i.uri){if(void 0===(t=n.getCommandUri(t,e)))return;const r=yield c.GitUri.fromUri(t,this.git),h=`Open ${r.getFormattedPath()}${r.sha?` ${s.Strings.pad(a.GlyphChars.Dot,1,1)} ${r.shortSha}`:""} in revision ${a.GlyphChars.Ellipsis}`;o=d.FileHistoryQuickPick.showProgress(h);const u=yield this.git.getLogForFile(r.repoPath,r.fsPath,{maxCount:i.maxCount,ref:r.sha});if(void 0===u)return l.Messages.showFileNotUnderSourceControlWarningMessage("Unable to open history compare");if(o.token.isCancellationRequested)return;let m=void 0;if(u.truncated){const e=new d.CommandQuickPickItem({label:"$(arrow-right) Show Next Commits",description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} shows ${u.maxCount} newer commits`},n.Commands.OpenFileRevision,[t,Object.assign({},i)]),o=s.Iterables.last(u.commits.values());null!=o&&(m=new d.CommandQuickPickItem({label:"$(arrow-left) Show Previous Commits",description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} shows ${u.maxCount} older commits`},n.Commands.OpenFileRevision,[new c.GitUri(t,o),Object.assign({},i,{nextPageCommand:e})]))}const g=yield d.FileHistoryQuickPick.show(this.git,u,r,h,{pickerOnly:!0,progressCancellation:o,currentCommand:new d.CommandQuickPickItem({label:`go back ${a.GlyphChars.ArrowBack}`,description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} to history of ${a.GlyphChars.Space}$(file-text) ${r.getFormattedPath()}${r.sha?` from ${a.GlyphChars.Space}$(git-commit) ${r.shortSha}`:""}`},n.Commands.OpenFileRevision,[t,Object.assign({},i)]),nextPageCommand:i.nextPageCommand,previousPageCommand:m,showAllCommand:void 0!==u&&u.truncated?new d.CommandQuickPickItem({label:"$(sync) Show All Commits",description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} this may take a while`},n.Commands.OpenFileRevision,[t,Object.assign({},i,{maxCount:0})]):void 0});if(void 0===g)return;if(g instanceof d.ShowBranchesAndTagsQuickPickItem){const e=yield g.execute();if(void 0===e)return;if(e instanceof d.CommandQuickPickItem)return e.execute();i.uri=c.GitUri.toRevisionUri(e.name,r.fsPath,r.repoPath)}else{if(g instanceof d.CommandQuickPickItem)return g.execute();i.uri=c.GitUri.toRevisionUri(g.commit.sha,g.commit.uri.fsPath,g.commit.repoPath)}}void 0!==i.line&&0!==i.line&&(void 0===i.showOptions&&(i.showOptions={}),i.showOptions.selection=new r.Range(i.line,0,i.line,0));const u=yield n.openEditor(i.uri,Object.assign({},i.showOptions,{rethrow:!0}));return void 0===i.annotationType?u:this.annotationController.showAnnotations(u,i.annotationType,i.line)}catch(e){return h.Logger.error(e,"OpenFileRevisionCommand"),r.window.showErrorMessage("Unable to open file revision. See output channel for more details")}finally{o&&o.dispose()}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(6),a=i(4),c=i(3),h=i(5),l=i(12);t.OpenInRemoteCommand=class extends n.ActiveEditorCommand{constructor(){super(n.Commands.OpenInRemote)}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0!==(i=Object.assign({},i)).remotes&&void 0!==i.resource){if(void 0!==i.remote){const e=i.remotes.filter(e=>e.name===i.remote);e.length>0&&(i.remotes=e)}try{if(1===i.remotes.length)return this.ensureRemoteBranchName(i),new l.OpenRemoteCommandQuickPickItem(i.remotes[0],i.resource).execute();let e="";switch(i.resource.type){case c.RemoteResourceType.Branch:this.ensureRemoteBranchName(i),e=`open ${i.resource.branch} branch in${a.GlyphChars.Ellipsis}`;break;case c.RemoteResourceType.Commit:e=`open commit ${c.GitService.shortenSha(i.resource.sha)} in${a.GlyphChars.Ellipsis}`;break;case c.RemoteResourceType.File:e=`open ${i.resource.fileName} in${a.GlyphChars.Ellipsis}`;break;case c.RemoteResourceType.Revision:if(void 0!==i.resource.commit&&i.resource.commit instanceof c.GitLogCommit)"D"===i.resource.commit.status?(i.resource.sha=i.resource.commit.previousSha,e=`open ${i.resource.fileName} ${s.Strings.pad(a.GlyphChars.Dot,1,1)} ${i.resource.commit.previousShortSha} in${a.GlyphChars.Ellipsis}`):(i.resource.sha=i.resource.commit.sha,e=`open ${i.resource.fileName} ${s.Strings.pad(a.GlyphChars.Dot,1,1)} ${i.resource.commit.shortSha} in${a.GlyphChars.Ellipsis}`);else{const t=void 0===i.resource.sha?"":c.GitService.shortenSha(i.resource.sha),o=t?` ${s.Strings.pad(a.GlyphChars.Dot,1,1)} ${t}`:"";e=`open ${i.resource.fileName}${o} in${a.GlyphChars.Ellipsis}`}}if(1===i.remotes.length)return new l.OpenRemoteCommandQuickPickItem(i.remotes[0],i.resource).execute();const t=yield l.RemotesQuickPick.show(i.remotes,e,i.resource,i.goBackCommand);if(void 0===t)return;return t.execute()}catch(e){return h.Logger.error(e,"OpenInRemoteCommand"),r.window.showErrorMessage("Unable to open in remote provider. See output channel for more details")}}})}ensureRemoteBranchName(e){if(void 0===e.remotes||void 0===e.resource||"branch"!==e.resource.type)return;const t=e.resource.branch.indexOf("/");if(t>=0){const i=e.resource.branch.substring(0,t),o=e.remotes.find(e=>e.name===i);void 0!==o&&(e.resource.branch=e.resource.branch.substring(t+1),e.remotes=[o])}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(3),a=i(5);t.OpenRepoInRemoteCommand=class extends r.ActiveEditorCommand{constructor(e){super(r.Commands.OpenRepoInRemote),this.git=e}preExecute(e,t={}){return o.__awaiter(this,void 0,void 0,function*(){return r.isCommandViewContextWithRemote(e)&&((t=Object.assign({},t)).remote=e.node.remote.name),this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){const o=(t=r.getCommandUri(t,e))&&(yield n.GitUri.fromUri(t,this.git)),c=void 0===o?this.git.getHighlanderRepoPath():o.repoPath;if(c)try{const e=(yield this.git.getRemotes(c)).filter(e=>void 0!==e.provider);return s.commands.executeCommand(r.Commands.OpenInRemote,t,{resource:{type:"repo"},remote:i.remote,remotes:e})}catch(e){return a.Logger.error(e,"OpenRepoInRemoteCommand"),s.window.showErrorMessage("Unable to open repository in remote provider. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(3),a=i(5);t.OpenWorkingFileCommand=class extends r.ActiveEditorCommand{constructor(e,t){super(r.Commands.OpenWorkingFile),this.annotationController=e,this.git=t}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){void 0===(i=Object.assign({},i)).line&&(i.line=void 0===e?0:e.selection.active.line);try{if(void 0===i.uri){if(void 0===(t=r.getCommandUri(t,e)))return;i.uri=yield n.GitUri.fromUri(t,this.git)}void 0!==i.line&&0!==i.line&&(void 0===i.showOptions&&(i.showOptions={}),i.showOptions.selection=new s.Range(i.line,0,i.line,0));const o=yield r.openEditor(i.uri,Object.assign({},i.showOptions,{rethrow:!0}));return void 0===i.annotationType?o:this.annotationController.showAnnotations(o,i.annotationType,i.line)}catch(e){return a.Logger.error(e,"OpenWorkingFileCommand"),s.window.showErrorMessage("Unable to open working file. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(9);t.ResetSuppressedWarningsCommand=class extends r.Command{constructor(){super(r.Commands.ResetSuppressedWarnings)}execute(){return o.__awaiter(this,void 0,void 0,function*(){yield n.configuration.update(n.configuration.name("advanced")("messages").value,void 0,s.ConfigurationTarget.Global)})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(6),a=i(4),c=i(3),h=i(5),l=i(10),d=i(12),u=/^([@~=:#])/,m=new Map([["@",c.GitRepoSearchBy.Author],["~",c.GitRepoSearchBy.Changes],["=",c.GitRepoSearchBy.ChangesOccurrences],[":",c.GitRepoSearchBy.Files],["#",c.GitRepoSearchBy.Sha]]);t.ShowCommitSearchCommand=class extends n.ActiveEditorCachedCommand{constructor(e){super(n.Commands.ShowCommitSearch),this.git=e}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){const o=void 0===(t=n.getCommandUri(t,e))?void 0:yield c.GitUri.fromUri(t,this.git),g=void 0===o?this.git.getHighlanderRepoPath():o.repoPath;if(!g)return l.Messages.showNoRepositoryWarningMessage("Unable to show commit search");i=Object.assign({},i);const p=Object.assign({},i);if(!i.search||null==i.searchBy){try{if(!i.search&&void 0!==e&&void 0!==o){const t=yield this.git.getBlameForLine(o,e.selection.active.line);void 0===t||t.commit.isUncommitted||(i.search=`#${t.commit.shortSha}`)}}catch(e){h.Logger.error(e,"ShowCommitSearchCommand","search prefetch failed")}if(i.search=yield r.window.showInputBox({value:i.search,prompt:"Please enter a search string",placeHolder:"search by message, author (use @<name>), files (use :<pattern>), or commit id (use #<sha>)"}),void 0===i.search)return void 0===i.goBackCommand?void 0:i.goBackCommand.execute();p.search=i.search;const t=u.exec(i.search);t&&t[1]?(i.searchBy=m.get(t[1]),i.search=i.search.substring(" "===i.search[1]?2:1)):c.GitService.isSha(i.search)?i.searchBy=c.GitRepoSearchBy.Sha:i.searchBy=c.GitRepoSearchBy.Message}void 0===i.searchBy&&(i.searchBy=c.GitRepoSearchBy.Message);let f=void 0;switch(i.searchBy){case c.GitRepoSearchBy.Author:f=`commits with an author matching '${i.search}'`;break;case c.GitRepoSearchBy.Changes:f=`commits with changes matching '${i.search}'`;break;case c.GitRepoSearchBy.ChangesOccurrences:f=`commits with changes (new occurrences) matching '${i.search}'`;break;case c.GitRepoSearchBy.Files:f=`commits with files matching '${i.search}'`;break;case c.GitRepoSearchBy.Message:f=`commits with a message matching '${i.search}'`;break;case c.GitRepoSearchBy.Sha:f=`commits with an id matching '${i.search}'`}const v=d.CommitsQuickPick.showProgress(f);try{const e=yield this.git.getLogForRepoSearch(g,i.search,i.searchBy,{maxCount:i.maxCount});if(v.token.isCancellationRequested)return;const o=i.goBackCommand||new d.CommandQuickPickItem({label:`go back ${a.GlyphChars.ArrowBack}`,description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} to commit search`},n.Commands.ShowCommitSearch,[t,p]),c=yield d.CommitsQuickPick.show(this.git,e,f,v,{goBackCommand:o,showAllCommand:void 0!==e&&e.truncated?new d.CommandQuickPickItem({label:"$(sync) Show All Commits",description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} this may take a while`},n.Commands.ShowCommitSearch,[t,Object.assign({},i,{maxCount:0,goBackCommand:o})]):void 0,showInResultsExplorerCommand:void 0!==e?new d.ShowCommitsSearchInResultsQuickPickItem(e,f):void 0});if(void 0===c)return;return c instanceof d.CommandQuickPickItem?c.execute():r.commands.executeCommand(n.Commands.ShowQuickCommitDetails,c.commit.toGitUri(),{sha:c.commit.sha,commit:c.commit,goBackCommand:new d.CommandQuickPickItem({label:`go back ${a.GlyphChars.ArrowBack}`,description:`${s.Strings.pad(a.GlyphChars.Dash,2,2)} to search for ${f}`},n.Commands.ShowCommitSearch,[t,i])})}catch(e){return h.Logger.error(e,"ShowCommitSearchCommand"),r.window.showErrorMessage("Unable to find commits. See output channel for more details")}finally{v.dispose()}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(9),a=i(5);t.ShowFileBlameCommand=class extends r.EditorCommand{constructor(e){super(r.Commands.ShowFileBlame),this.annotationController=e}execute(e,t,i,r={}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0!==e&&!e.document.isDirty)try{return void 0===r.type&&(r=Object.assign({},r,{type:n.configuration.get(n.configuration.name("blame")("file")("annotationType").value)})),this.annotationController.showAnnotations(e,r.type,void 0!==r.sha?r.sha:e.selection.active.line)}catch(e){return a.Logger.error(e,"ShowFileBlameCommand"),s.window.showErrorMessage("Unable to show file blame annotations. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(5);t.ShowLastQuickPickCommand=class extends r.Command{constructor(){super(r.Commands.ShowLastQuickPick)}execute(){return o.__awaiter(this,void 0,void 0,function*(){const e=r.getLastCommand();if(void 0!==e)try{return s.commands.executeCommand(e.command,...e.args)}catch(e){return n.Logger.error(e,"ShowLastQuickPickCommand"),s.window.showErrorMessage("Unable to show last quick pick. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(9),a=i(5);t.ShowLineBlameCommand=class extends r.EditorCommand{constructor(e){super(r.Commands.ShowLineBlame),this.currentLineController=e}execute(e,t,i,r={}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0!==e&&!e.document.isDirty)try{return void 0===r.type&&(r=Object.assign({},r,{type:n.configuration.get(n.configuration.name("blame")("line")("annotationType").value)})),this.currentLineController.showAnnotations(e,r.type)}catch(e){return a.Logger.error(e,"ShowLineBlameCommand"),s.window.showErrorMessage("Unable to show line blame annotations. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(6),a=i(4),c=i(3),h=i(5),l=i(10),d=i(12);t.ShowQuickBranchHistoryCommand=class extends n.ActiveEditorCachedCommand{constructor(e){super(n.Commands.ShowQuickBranchHistory),this.git=e}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){const o=(t=n.getCommandUri(t,e))&&(yield c.GitUri.fromUri(t,this.git));let u=void 0===(i=Object.assign({},i)).branch?void 0:d.BranchHistoryQuickPick.showProgress(i.branch);try{const e=void 0===o?this.git.getHighlanderRepoPath():o.repoPath;if(!e)return l.Messages.showNoRepositoryWarningMessage("Unable to show branch history");if(void 0===i.branch){const t=yield this.git.getBranches(e),o=yield d.BranchesQuickPick.show(t,`Show history for branch${a.GlyphChars.Ellipsis}`);if(void 0===o)return;if(o instanceof d.CommandQuickPickItem)return o.execute();if(i.branch=o.branch.name,void 0===i.branch)return;u=d.BranchHistoryQuickPick.showProgress(i.branch)}if(void 0===i.log&&(i.log=yield this.git.getLogForRepo(e,{maxCount:i.maxCount,ref:o&&o.sha||i.branch}),void 0===i.log))return r.window.showWarningMessage("Unable to show branch history");if(void 0!==u&&u.token.isCancellationRequested)return;const c=yield d.BranchHistoryQuickPick.show(this.git,i.log,o,i.branch,u,i.goBackCommand,i.nextPageCommand);if(void 0===c)return;if(c instanceof d.CommandQuickPickItem)return c.execute();const m=new d.CommandQuickPickItem({label:`go back ${a.GlyphChars.ArrowBack}`,description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} to ${a.GlyphChars.Space}$(git-branch) ${i.branch} history`},n.Commands.ShowQuickBranchHistory,[t,Object.assign({},i)]);return r.commands.executeCommand(n.Commands.ShowQuickCommitDetails,c.commit.toGitUri(),{sha:c.commit.sha,commit:c.commit,repoLog:i.log,goBackCommand:m})}catch(e){return h.Logger.error(e,"ShowQuickBranchHistoryCommand"),r.window.showErrorMessage("Unable to show branch history. See output channel for more details")}finally{u&&u.dispose()}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(6),a=i(4),c=i(3),h=i(5),l=i(12),d=i(10),u=i(7);t.ShowQuickCommitDetailsCommand=class extends n.ActiveEditorCachedCommand{constructor(e){super(n.Commands.ShowQuickCommitDetails),this.git=e}static getMarkdownCommandArgs(e){const t="string"==typeof e?{sha:e}:e;return super.getMarkdownCommandArgsCore(n.Commands.ShowQuickCommitDetails,t)}preExecute(e,t={}){return o.__awaiter(this,void 0,void 0,function*(){return"view"===e.type&&((t=Object.assign({},t)).sha=e.node.uri.sha,n.isCommandViewContextWithCommit(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=n.getCommandUri(t,e)))return;const o=yield c.GitUri.fromUri(t,this.git);let m=o.repoPath,g=u.relative(m||"",o.fsPath);if(void 0===(i=Object.assign({},i)).sha){if(void 0===e)return;const t=e.selection.active.line;if(t<0)return;try{const e=yield this.git.getBlameForLine(o,t);if(void 0===e)return d.Messages.showFileNotUnderSourceControlWarningMessage("Unable to show commit details");if(e.commit.isUncommitted)return d.Messages.showLineUncommittedWarningMessage("Unable to show commit details");i.sha=e.commit.sha,m=e.commit.repoPath,g=e.commit.fileName,i.commit=e.commit}catch(e){return h.Logger.error(e,"ShowQuickCommitDetailsCommand",`getBlameForLine(${t})`),r.window.showErrorMessage("Unable to show commit details. See output channel for more details")}}try{if((void 0===i.commit||i.commit.isFile)&&(void 0!==i.repoLog&&(i.commit=i.repoLog.commits.get(i.sha),void 0===i.commit&&(i.repoLog=void 0)),void 0===i.repoLog)){const e=yield this.git.getLogForRepo(m,{maxCount:2,ref:i.sha});if(void 0===e)return d.Messages.showCommitNotFoundWarningMessage("Unable to show commit details");i.commit=e.commits.get(i.sha)}if(void 0===i.commit)return d.Messages.showCommitNotFoundWarningMessage("Unable to show commit details");void 0===i.commit.workingFileName&&(i.commit.workingFileName=g),void 0===i.goBackCommand&&(i.goBackCommand=new l.CommandQuickPickItem({label:`go back ${a.GlyphChars.ArrowBack}`,description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} to branch history`},n.Commands.ShowQuickCurrentBranchHistory,[i.commit.toGitUri()]));const e=new l.CommandQuickPickItem({label:`go back ${a.GlyphChars.ArrowBack}`,description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} to details of ${a.GlyphChars.Space}$(git-commit) ${i.commit.shortSha}`},n.Commands.ShowQuickCommitDetails,[i.commit.toGitUri(),i]),o=yield l.CommitDetailsQuickPick.show(this.git,i.commit,t,i.goBackCommand,e,i.repoLog);if(void 0===o)return;return o instanceof l.CommitWithFileStatusQuickPickItem?r.commands.executeCommand(n.Commands.ShowQuickCommitFileDetails,o.commit.toGitUri(),{commit:o.commit,sha:o.sha,goBackCommand:e}):o.execute()}catch(e){return h.Logger.error(e,"ShowQuickCommitDetailsCommand"),r.window.showErrorMessage("Unable to show commit details. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(6),a=i(4),c=i(3),h=i(5),l=i(12),d=i(10),u=i(7);t.ShowQuickCommitFileDetailsCommand=class extends n.ActiveEditorCachedCommand{constructor(e){super(n.Commands.ShowQuickCommitFileDetails),this.git=e}static getMarkdownCommandArgs(e){const t="string"==typeof e?{sha:e}:e;return super.getMarkdownCommandArgsCore(n.Commands.ShowQuickCommitFileDetails,t)}preExecute(e,t={}){return o.__awaiter(this,void 0,void 0,function*(){return"view"===e.type&&((t=Object.assign({},t)).sha=e.node.uri.sha,n.isCommandViewContextWithCommit(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)})}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=n.getCommandUri(t,e)))return;let o=i.commit&&i.commit.workingFileName;const m=yield c.GitUri.fromUri(t,this.git);if(void 0===(i=Object.assign({},i)).sha){if(void 0===e)return;const t=e.selection.active.line;if(t<0)return;try{const e=yield this.git.getBlameForLine(m,t);if(void 0===e)return d.Messages.showFileNotUnderSourceControlWarningMessage("Unable to show commit file details");if(e.commit.isUncommitted)return d.Messages.showLineUncommittedWarningMessage("Unable to show commit file details");i.sha=e.commit.sha,i.commit=e.commit,o=u.relative(i.commit.repoPath,m.fsPath)}catch(e){return h.Logger.error(e,"ShowQuickCommitFileDetailsCommand",`getBlameForLine(${t})`),r.window.showErrorMessage("Unable to show commit file details. See output channel for more details")}}try{if((void 0===i.commit||!i.commit.isFile)&&(void 0!==i.commit&&(o=void 0),void 0!==i.fileLog&&(i.commit=i.fileLog.commits.get(i.sha),void 0===i.commit&&(i.fileLog=void 0)),void 0===i.fileLog&&(i.commit=yield this.git.getLogCommit(void 0===i.commit?m.repoPath:i.commit.repoPath,m.fsPath,i.sha,{previous:!0}),void 0===i.commit)))return d.Messages.showCommitNotFoundWarningMessage("Unable to show commit file details");if(void 0===i.commit)return d.Messages.showCommitNotFoundWarningMessage("Unable to show commit file details");i.commit.workingFileName=o,i.commit.workingFileName=yield this.git.findWorkingFileName(i.commit);const e=c.GitService.shortenSha(i.sha);void 0===i.goBackCommand&&(i.goBackCommand=new l.CommandQuickPickItem({label:`go back ${a.GlyphChars.ArrowBack}`,description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} to details of ${a.GlyphChars.Space}$(git-commit) ${e}`},n.Commands.ShowQuickCommitDetails,[i.commit.toGitUri(),{commit:i.commit,sha:i.sha}]));const g=new l.CommandQuickPickItem({label:`go back ${a.GlyphChars.ArrowBack}`,description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} to details of ${a.GlyphChars.Space}$(file-text) ${u.basename(i.commit.fileName)} in ${a.GlyphChars.Space}$(git-commit) ${e}`},n.Commands.ShowQuickCommitFileDetails,[i.commit.toGitUri(),i]),p=yield l.CommitFileDetailsQuickPick.show(this.git,i.commit,t,i.goBackCommand,g,i.fileLog);if(void 0===p)return;if(p instanceof l.CommandQuickPickItem)return p.execute();return}catch(e){return h.Logger.error(e,"ShowQuickCommitFileDetailsCommand"),r.window.showErrorMessage("Unable to show commit file details. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(5),a=i(10);t.ShowQuickCurrentBranchHistoryCommand=class extends r.ActiveEditorCachedCommand{constructor(e){super(r.Commands.ShowQuickCurrentBranchHistory),this.git=e}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){t=r.getCommandUri(t,e);try{const e=yield this.git.getRepoPath(t);if(!e)return a.Messages.showNoRepositoryWarningMessage("Unable to show branch history");const o=yield this.git.getBranch(e);if(void 0===o)return;return s.commands.executeCommand(r.Commands.ShowQuickBranchHistory,t,{branch:o.name,goBackCommand:i.goBackCommand})}catch(e){return n.Logger.error(e,"ShowQuickCurrentBranchHistoryCommand"),s.window.showErrorMessage("Unable to show branch history. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(6),a=i(4),c=i(3),h=i(5),l=i(12),d=i(10),u=i(7);t.ShowQuickFileHistoryCommand=class extends n.ActiveEditorCachedCommand{constructor(e){super(n.Commands.ShowQuickFileHistory),this.git=e}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===(t=n.getCommandUri(t,e)))return r.commands.executeCommand(n.Commands.ShowQuickCurrentBranchHistory);const o=yield c.GitUri.fromUri(t,this.git);i=Object.assign({},i);const m=`${o.getFormattedPath()}${o.sha?` ${s.Strings.pad(a.GlyphChars.Dot,1,1)} ${o.shortSha}`:""}`,g=l.FileHistoryQuickPick.showProgress(m);try{if(void 0===i.log&&(i.log=yield this.git.getLogForFile(o.repoPath,o.fsPath,{maxCount:i.maxCount,range:i.range,ref:o.sha}),void 0===i.log))return d.Messages.showFileNotUnderSourceControlWarningMessage("Unable to show file history");if(g.token.isCancellationRequested)return;let e=void 0;if(i.log.truncated){const r=new l.CommandQuickPickItem({label:"$(arrow-right) Show Next Commits",description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} shows ${i.log.maxCount} newer commits`},n.Commands.ShowQuickFileHistory,[o,Object.assign({},i,{log:void 0})]),h=s.Iterables.last(i.log.commits.values());null!=h&&(e=new l.CommandQuickPickItem({label:"$(arrow-left) Show Previous Commits",description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} shows ${i.log.maxCount} older commits`},n.Commands.ShowQuickFileHistory,[new c.GitUri(t,h),Object.assign({},i,{log:void 0,nextPageCommand:r})]))}const p=yield l.FileHistoryQuickPick.show(this.git,i.log,o,m,{progressCancellation:g,goBackCommand:i.goBackCommand,nextPageCommand:i.nextPageCommand,previousPageCommand:e,showAllCommand:void 0!==i.log&&i.log.truncated?new l.CommandQuickPickItem({label:"$(sync) Show All Commits",description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} this may take a while`},n.Commands.ShowQuickFileHistory,[t,Object.assign({},i,{log:void 0,maxCount:0})]):void 0,showInResultsExplorerCommand:void 0!==i.log?new l.ShowCommitsInResultsQuickPickItem(i.log,{label:m,resultsType:{singular:"commit",plural:"commits"}}):void 0});if(void 0===p)return;if(p instanceof l.CommandQuickPickItem)return p.execute();const f=new l.CommandQuickPickItem({label:`go back ${a.GlyphChars.ArrowBack}`,description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} to history of ${a.GlyphChars.Space}$(file-text) ${u.basename(p.commit.fileName)}${o.sha?` from ${a.GlyphChars.Space}$(git-commit) ${o.shortSha}`:""}`},n.Commands.ShowQuickFileHistory,[t,i]);return r.commands.executeCommand(n.Commands.ShowQuickCommitFileDetails,p.commit.toGitUri(),{commit:p.commit,fileLog:i.log,sha:p.commit.sha,goBackCommand:f})}catch(e){return h.Logger.error(e,"ShowQuickFileHistoryCommand"),r.window.showErrorMessage("Unable to show file history. See output channel for more details")}finally{g.dispose()}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(5),a=i(10),c=i(12);t.ShowQuickRepoStatusCommand=class extends r.ActiveEditorCachedCommand{constructor(e){super(r.Commands.ShowQuickRepoStatus),this.git=e}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){t=r.getCommandUri(t,e);try{const e=yield this.git.getRepoPath(t);if(!e)return a.Messages.showNoRepositoryWarningMessage("Unable to show repository status");const o=yield this.git.getStatusForRepo(e);if(void 0===o)return s.window.showWarningMessage("Unable to show repository status");const r=yield c.RepoStatusQuickPick.show(o,i.goBackCommand);if(void 0===r)return;if(r instanceof c.CommandQuickPickItem)return r.execute();return}catch(e){return n.Logger.error(e,"ShowQuickRepoStatusCommand"),s.window.showErrorMessage("Unable to show repository status. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(6),a=i(4),c=i(5),h=i(10),l=i(12);t.ShowQuickStashListCommand=class extends n.ActiveEditorCachedCommand{constructor(e){super(n.Commands.ShowQuickStashList),this.git=e}execute(e,t,i={}){return o.__awaiter(this,void 0,void 0,function*(){t=n.getCommandUri(t,e);const o=l.StashListQuickPick.showProgress("list");try{const e=yield this.git.getRepoPath(t);if(!e)return h.Messages.showNoRepositoryWarningMessage("Unable to show stashed changes");const d=yield this.git.getStashList(e);if(void 0===d)return r.window.showWarningMessage("Unable to show stashed changes");if(o.token.isCancellationRequested)return;const u=new l.CommandQuickPickItem({label:`go back ${a.GlyphChars.ArrowBack}`,description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} to stashed changes`},n.Commands.ShowQuickStashList,[t,{goBackCommand:i.goBackCommand}]),m=yield l.StashListQuickPick.show(this.git,d,"list",o,i.goBackCommand,u);if(void 0===m)return;return m instanceof l.CommandQuickPickItem?m.execute():r.commands.executeCommand(n.Commands.ShowQuickCommitDetails,m.commit.toGitUri(),{commit:m.commit,sha:m.commit.sha,goBackCommand:u})}catch(e){return c.Logger.error(e,"ShowQuickStashListCommand"),r.window.showErrorMessage("Unable to show stashed changes. See output channel for more details")}finally{o.dispose()}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(6),a=i(4),c=i(5),h=i(12);t.StashApplyCommand=class extends n.Command{constructor(e){super(n.Commands.StashApply),this.git=e}preExecute(e,t={confirm:!0,deleteAfter:!1}){return o.__awaiter(this,void 0,void 0,function*(){return n.isCommandViewContextWithCommit(e)?(t=Object.assign({},t),t.stashItem=e.node.commit,this.execute(t)):this.execute(t)})}execute(e={confirm:!0,deleteAfter:!1}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===(e=Object.assign({},e)).stashItem||void 0===e.stashItem.stashName){let t,i=yield this.git.getActiveRepoPath();if(!i){const o=yield h.RepositoriesQuickPick.show(this.git,`Apply stashed changes from which repository${a.GlyphChars.Ellipsis}`,e.goBackCommand);if(o instanceof h.CommandQuickPickItem)return o.execute();if(void 0===o)return void 0===e.goBackCommand?void 0:e.goBackCommand.execute();t=new h.CommandQuickPickItem({label:`go back ${a.GlyphChars.ArrowBack}`,description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} to pick another repository`},n.Commands.StashApply,[e]),i=o.repoPath}const o=h.StashListQuickPick.showProgress("apply");try{const c=yield this.git.getStashList(i);if(void 0===c)return r.window.showInformationMessage("There are no stashed changes");if(o.token.isCancellationRequested)return;const l=new h.CommandQuickPickItem({label:`go back ${a.GlyphChars.ArrowBack}`,description:`${s.Strings.pad(a.GlyphChars.Dash,2,3)} to apply stashed changes`},n.Commands.StashApply,[e]),d=yield h.StashListQuickPick.show(this.git,c,"apply",o,t||e.goBackCommand,l);if(d instanceof h.CommandQuickPickItem)return d.execute();if(void 0===d)return void 0===e.goBackCommand?void 0:e.goBackCommand.execute();e.goBackCommand=l,e.stashItem=d.commit}finally{o.dispose()}}try{if(e.confirm){const t=e.stashItem.message.length>80?`${e.stashItem.message.substring(0,80)}${a.GlyphChars.Ellipsis}`:e.stashItem.message,i=yield r.window.showWarningMessage(`Apply stashed changes '${t}' to your working tree?`,{title:"Yes, delete after applying"},{title:"Yes"},{title:"No",isCloseAffordance:!0});if(void 0===i||"No"===i.title)return void 0===e.goBackCommand?void 0:e.goBackCommand.execute();e.deleteAfter="Yes"!==i.title}return yield this.git.stashApply(e.stashItem.repoPath,e.stashItem.stashName,e.deleteAfter)}catch(e){return c.Logger.error(e,"StashApplyCommand"),e.message.includes("Your local changes to the following files would be overwritten by merge")?r.window.showWarningMessage("Unable to apply stash. Your working tree changes would be overwritten."):e.message.includes("Auto-merging")&&e.message.includes("CONFLICT")?r.window.showInformationMessage("Stash applied with conflicts"):r.window.showErrorMessage("Unable to apply stash. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(4),a=i(5);t.StashDeleteCommand=class extends r.Command{constructor(e){super(r.Commands.StashDelete),this.git=e}preExecute(e,t={confirm:!0}){return o.__awaiter(this,void 0,void 0,function*(){return r.isCommandViewContextWithCommit(e)?(t=Object.assign({},t),t.stashItem=e.node.commit,this.execute(t)):this.execute(t)})}execute(e={confirm:!0}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0!==(e=Object.assign({},e)).stashItem&&void 0!==e.stashItem.stashName&&void 0!==e.stashItem.repoPath){void 0===e.confirm&&(e.confirm=!0);try{if(e.confirm){const t=e.stashItem.message.length>80?`${e.stashItem.message.substring(0,80)}${n.GlyphChars.Ellipsis}`:e.stashItem.message,i=yield s.window.showWarningMessage(`Delete stashed changes '${t}'?`,{title:"Yes"},{title:"No",isCloseAffordance:!0});if(void 0===i||"Yes"!==i.title)return void 0===e.goBackCommand?void 0:e.goBackCommand.execute()}return yield this.git.stashDelete(e.stashItem.repoPath,e.stashItem.stashName)}catch(e){return a.Logger.error(e,"StashDeleteCommand"),s.window.showErrorMessage("Unable to delete stash. See output channel for more details")}}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(5),a=i(12),c=i(4);t.StashSaveCommand=class extends r.Command{constructor(e){super(r.Commands.StashSave),this.git=e}preExecute(e,t={}){return o.__awaiter(this,void 0,void 0,function*(){return"scm-states"===e.type?(t=Object.assign({},t),t.uris=e.scmResourceStates.map(e=>e.resourceUri),this.execute(t)):"scm-groups"===e.type?(t=Object.assign({},t),t.uris=e.scmResourceGroups.reduce((e,t)=>e.concat(t.resourceStates.map(e=>e.resourceUri)),[]),this.execute(t)):this.execute(t)})}execute(e={}){return o.__awaiter(this,void 0,void 0,function*(){let t=yield this.git.getHighlanderRepoPath();if(!t){const i=yield a.RepositoriesQuickPick.show(this.git,`Stash changes for which repository${c.GlyphChars.Ellipsis}`,e.goBackCommand);if(i instanceof a.CommandQuickPickItem)return i.execute();if(void 0===i)return void 0===e.goBackCommand?void 0:e.goBackCommand.execute();t=i.repoPath}try{return null==e.message&&(e=Object.assign({},e),e.message=yield s.window.showInputBox({prompt:"Please provide a stash message",placeHolder:"Stash message"}),void 0===e.message)?void 0===e.goBackCommand?void 0:e.goBackCommand.execute():yield this.git.stashSave(t,e.message,e.uris)}catch(e){return n.Logger.error(e,"StashSaveCommand"),s.window.showErrorMessage("Unable to save stash. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(6);t.ToggleCodeLensCommand=class extends o.EditorCommand{constructor(e){super(o.Commands.ToggleCodeLens),this.codeLensController=e}execute(e,t){return this.codeLensController.toggleCodeLens(e)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(18),a=i(9),c=i(5);t.ToggleFileBlameCommand=class extends r.EditorCommand{constructor(e){super(r.Commands.ToggleFileBlame),this.annotationController=e}execute(e,t,i,r={}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0!==e&&!e.document.isDirty){if(void 0!==i&&!n.UriComparer.equals(i,e.document.uri)){const t=s.window.visibleTextEditors.find(e=>n.UriComparer.equals(i,e.document.uri));void 0===t||t.document.isDirty||(e=t)}try{return void 0===r.type&&(r=Object.assign({},r,{type:a.configuration.get(a.configuration.name("blame")("file")("annotationType").value)})),this.annotationController.toggleAnnotations(e,r.type,void 0!==r.sha?r.sha:e.selection.active.line)}catch(e){return c.Logger.error(e,"ToggleFileBlameCommand"),s.window.showErrorMessage("Unable to toggle file blame annotations. See output channel for more details")}}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(17),n=i(6),a=i(18),c=i(5);t.ToggleFileRecentChangesCommand=class extends n.EditorCommand{constructor(e){super(n.Commands.ToggleFileRecentChanges),this.annotationController=e}execute(e,t,i){return o.__awaiter(this,void 0,void 0,function*(){if(void 0!==e&&!e.document.isDirty){if(void 0!==i&&!a.UriComparer.equals(i,e.document.uri)){const t=s.window.visibleTextEditors.find(e=>a.UriComparer.equals(i,e.document.uri));void 0===t||t.document.isDirty||(e=t)}try{return this.annotationController.toggleAnnotations(e,r.FileAnnotationType.RecentChanges)}catch(e){return c.Logger.error(e,"ToggleFileRecentChangesCommand"),s.window.showErrorMessage("Unable to toggle recent file changes annotations. See output channel for more details")}}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(6),n=i(9),a=i(5);t.ToggleLineBlameCommand=class extends r.EditorCommand{constructor(e){super(r.Commands.ToggleLineBlame),this.currentLineController=e}execute(e,t,i,r={}){return o.__awaiter(this,void 0,void 0,function*(){if(void 0!==e&&!e.document.isDirty)try{return void 0===r.type&&(r=Object.assign({},r,{type:n.configuration.get(n.configuration.name("blame")("line")("annotationType").value)})),this.currentLineController.toggleAnnotations(e,r.type)}catch(e){return a.Logger.error(e,"ToggleLineBlameCommand"),s.window.showErrorMessage("Unable to toggle line blame annotations. See output channel for more details")}})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(20),a=i(8),c=i(3);t.CommitsNode=class extends a.ExplorerNode{constructor(e,t,i){super(c.GitUri.fromRepoPath(e)),this.repoPath=e,this.logFn=t,this.explorer=i,this.supportsPaging=!0}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){const e=yield this.logFn(this.maxCount);if(void 0===e)return[];const t=[...s.Iterables.map(e.commits.values(),e=>new n.CommitNode(e,this.explorer))];return e.truncated&&t.push(new a.ShowAllNode("Show All Commits",this,this.explorer)),t})}getTreeItem(){return o.__awaiter(this,void 0,void 0,function*(){const e=new r.TreeItem("Commits",r.TreeItemCollapsibleState.Collapsed);return e.contextValue=a.ResourceType.Commits,e})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(57),a=i(4),c=i(8),h=i(3),l=i(58);t.ComparisionResultsNode=class extends c.ExplorerNode{constructor(e,t,i,o){super(h.GitUri.fromRepoPath(e)),this.ref1=t,this.ref2=i,this.explorer=o}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){return this.resetChildren(),this.children=[new n.CommitsResultsNode(this.uri.repoPath,e=>{const t=void 0!==e?e.count:0,i=void 0!==e&&e.truncated;return 1===t?"1 commit":`${0===t?"No":`${t}${i?"+":""}`} commits`},e=>this.explorer.git.getLogForRepo(this.uri.repoPath,{maxCount:e,ref:`${this.ref1}...${this.ref2}`}),this.explorer),new l.StatusFilesResultsNode(this.uri.repoPath,this.ref1,this.ref2,e=>{const t=void 0!==e?e.length:0;return 1===t?"1 file changed":`${0===t?"No":t} files changed`},()=>this.explorer.git.getDiffStatus(this.uri.repoPath,this.ref1,this.ref2),this.explorer)],this.children})}getTreeItem(){return o.__awaiter(this,void 0,void 0,function*(){const e=yield this.explorer.git.getRepository(this.uri.repoPath),t=new r.TreeItem(`Comparing ${h.GitService.shortenSha(this.ref1)} to ${h.GitService.shortenSha(this.ref2)} ${s.Strings.pad(a.GlyphChars.Dash,1,1)} ${e&&e.formattedName||this.uri.repoPath}`,r.TreeItemCollapsibleState.Expanded);return t.contextValue=c.ResourceType.ComparisonResults,t})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(8),n=i(60);t.HistoryNode=class extends r.ExplorerNode{constructor(e,t,i){super(e),this.repo=t,this.explorer=i}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){return this.resetChildren(),this.children=[new n.FileHistoryNode(this.uri,this.repo,this.explorer)],this.children})}getTreeItem(){const e=new s.TreeItem(`${this.uri.getFormattedPath()}`,s.TreeItemCollapsibleState.Expanded);return e.contextValue=r.ResourceType.History,e.iconPath={dark:this.explorer.context.asAbsolutePath("images/dark/icon-history.svg"),light:this.explorer.context.asAbsolutePath("images/light/icon-history.svg")},e}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(42),n=i(8),a=i(3),c=i(30);t.RepositoriesNode=class extends n.ExplorerNode{constructor(e,t){super(void 0),this.repositories=e,this.explorer=t}getChildren(){return o.__awaiter(this,void 0,void 0,function*(){return this.resetChildren(),this.children=this.repositories.sort((e,t)=>e.index-t.index).map(e=>new c.RepositoryNode(a.GitUri.fromRepoPath(e.path),e,this.explorer)),this.children.length>1&&this.children.splice(0,0,new r.ActiveRepositoryNode(this.explorer)),this.children})}getTreeItem(){const e=new s.TreeItem("Repositories",s.TreeItemCollapsibleState.Expanded);return e.contextValue=n.ResourceType.Repositories,e}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(17),a=i(23),c=i(61),h=i(4),l=i(5);t.GutterBlameAnnotationProvider=class extends c.BlameAnnotationProviderBase{provideAnnotation(e,t){return o.__awaiter(this,void 0,void 0,function*(){this.annotationType=n.FileAnnotationType.Gutter;const t=yield this.getBlame();if(void 0===t)return!1;const i=process.hrtime(),o=this._config.annotations.file.gutter,c=s.Strings.getTokensFromTemplate(o.format).reduce((e,t)=>(e[t.key]=t.options,e),{}),d={dateFormat:null===o.dateFormat?this._config.defaultDateFormat:o.dateFormat,tokenOptions:c},u=Date.now(),m=this._config.annotations.file.gutter.separateLines,g=a.Annotations.gutterRenderOptions(m,o.heatmap,o.format,d);this._decorations=[];const p=Object.create(null);let f,v,C,y=!1;for(const e of t.lines){const i=e.line;C!==e.sha?(y=!1,C=e.sha,void 0===(v=p[e.sha])?void 0!==(f=t.commits.get(e.sha))&&(v=a.Annotations.gutter(f,o.format,d,g),o.heatmap.enabled&&a.Annotations.applyHeatmap(v,f.date,u),v.range=new r.Range(i,0,i,0),this._decorations.push(v),p[e.sha]=v):(v=Object.assign({},v,{range:new r.Range(i,0,i,0)}),this._decorations.push(v))):(v=Object.assign({},v),o.compact&&!y&&(v.renderOptions={before:Object.assign({},v.renderOptions.before,{contentText:h.GlyphChars.Space.repeat(s.Strings.width(v.renderOptions.before.contentText))})},m&&(v.renderOptions.before.textDecoration="none"),y=!0),v.range=new r.Range(i,0,i,0),this._decorations.push(v))}this._decorations.length&&this.editor.setDecorations(this.decoration,this._decorations);const w=process.hrtime(i);return l.Logger.log(`${1e3*w[0]+Math.floor(w[1]/1e6)} ms to compute gutter blame annotations`),this.registerHoverProviders(o.hover),this.selection(e,t),!0})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(17),n=i(23),a=i(61),c=i(5);t.HoverBlameAnnotationProvider=class extends a.BlameAnnotationProviderBase{provideAnnotation(e){return o.__awaiter(this,void 0,void 0,function*(){this.annotationType=r.FileAnnotationType.Hover;const t=this._config.annotations.file.hover,i=yield this.getBlame();if(void 0===i)return!1;if(t.heatmap.enabled){const e=process.hrtime(),o=Date.now(),r=n.Annotations.hoverRenderOptions(t.heatmap);this._decorations=[];const a=Object.create(null);let h,l;for(const e of i.lines){const t=e.line;void 0===(l=a[e.sha])?void 0!==(h=i.commits.get(e.sha))&&((l=n.Annotations.hover(h,r,o)).range=new s.Range(t,0,t,0),this._decorations.push(l),a[e.sha]=l):(l=Object.assign({},l,{range:new s.Range(t,0,t,0)}),this._decorations.push(l))}this._decorations.length&&this.editor.setDecorations(this.decoration,this._decorations);const d=process.hrtime(e);c.Logger.log(`${1e3*d[0]+Math.floor(d[1]/1e6)} ms to compute hover blame annotations`)}return this.registerHoverProviders(t),this.selection(e,i),!0})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(23),n=i(17),a=i(24),c=i(5);t.RecentChangesAnnotationProvider=class extends a.AnnotationProviderBase{constructor(e,t,i,o,s,r){super(e,t,i,o),this.git=s,this.uri=r}provideAnnotation(e){return o.__awaiter(this,void 0,void 0,function*(){this.annotationType=n.FileAnnotationType.RecentChanges;const e=yield this.git.getLogCommit(this.uri.repoPath,this.uri.fsPath,{previous:!0});if(void 0===e)return!1;const t=yield this.git.getDiffForFile(this.uri,e.previousSha);if(void 0===t)return!1;const i=process.hrtime(),o=this._config.annotations.file.recentChanges,a=this._config.defaultDateFormat;this._decorations=[];for(const i of t.chunks){let t=i.currentPosition.start-2;for(const n of i.lines){if(void 0===n.line)continue;if(t++,"unchanged"===n.state)continue;const i=this.editor.document.validateRange(new s.Range(new s.Position(t,0),new s.Position(t,r.endOfLineIndex)));o.hover.details&&this._decorations.push({hoverMessage:r.Annotations.getHoverMessage(e,a,yield this.git.hasRemote(e.repoPath),this._config.blame.file.annotationType),range:i});let c=void 0;o.hover.changes&&(c=r.Annotations.getHoverDiffMessage(e,this.uri,n)),this._decorations.push({hoverMessage:c,range:i})}}this.editor.setDecorations(this.highlightDecoration,this._decorations);const h=process.hrtime(i);return c.Logger.log(`${1e3*h[0]+Math.floor(h[1]/1e6)} ms to compute recent changes annotations`),!0})}selection(e){return o.__awaiter(this,void 0,void 0,function*(){})}validate(){return o.__awaiter(this,void 0,void 0,function*(){return!0})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(1),s=i(9),r=i(4),n=i(160),a=i(3),c=i(5);t.CodeLensController=class extends o.Disposable{constructor(e,t,i){super(()=>this.dispose()),this.context=e,this.git=t,this.gitContextTracker=i,this._disposable=o.Disposable.from(s.configuration.onDidChange(this.onConfigurationChanged,this),this.gitContextTracker.onDidChangeBlameability(this.onBlameabilityChanged,this)),this.onConfigurationChanged(s.configuration.initializingChangeEvent)}dispose(){this._providerDisposable&&this._providerDisposable.dispose(),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){const t=s.configuration.initializing(e),i=s.configuration.name("codeLens").value;if(t||s.configuration.changed(e,i,null)){t||c.Logger.log("CodeLens config changed; resetting CodeLens provider");const e=s.configuration.get(i);e.enabled&&(e.recentChange.enabled||e.authors.enabled)?void 0!==this._provider?this._provider.reset():(this._provider=new n.GitCodeLensProvider(this.context,this.git),this._providerDisposable=o.languages.registerCodeLensProvider(n.GitCodeLensProvider.selector,this._provider)):(void 0!==this._providerDisposable&&(this._providerDisposable.dispose(),this._providerDisposable=void 0),this._provider=void 0),this._canToggle=e.recentChange.enabled||e.authors.enabled,r.setCommandContext(r.CommandContext.CanToggleCodeLens,this._canToggle)}}onBlameabilityChanged(e){void 0!==this._provider&&e.blameable&&e.reason!==a.BlameabilityChangeReason.EditorChanged&&(c.Logger.log("Blameability changed; resetting CodeLens provider"),this._provider.reset())}toggleCodeLens(e){if(this._canToggle){if(c.Logger.log("toggleCodeLens()"),void 0!==this._providerDisposable)return this._providerDisposable.dispose(),void(this._providerDisposable=void 0);this._providerDisposable=o.languages.registerCodeLensProvider(n.GitCodeLensProvider.selector,new n.GitCodeLensProvider(this.context,this.git))}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(11),a=i(9),c=i(4),h=i(3),l=i(5);class d extends r.CodeLens{constructor(e,t,i,o,s,r,n,a){super(r,a),this.symbolKind=e,this.uri=t,this.blame=i,this.blameRange=o,this.isFullRange=s,this.desiredCommand=n}getBlame(){return this.blame&&this.blame()}}t.GitRecentChangeCodeLens=d;class u extends r.CodeLens{constructor(e,t,i,o,s,r,n){super(r),this.symbolKind=e,this.uri=t,this.blame=i,this.blameRange=o,this.isFullRange=s,this.desiredCommand=n}getBlame(){return this.blame()}}t.GitAuthorsCodeLens=u;class m{constructor(e,t){this.git=t,this._onDidChangeCodeLenses=new r.EventEmitter}get onDidChangeCodeLenses(){return this._onDidChangeCodeLenses.event}reset(){this._onDidChangeCodeLenses.fire()}provideCodeLenses(e,t){return o.__awaiter(this,void 0,void 0,function*(){if(!(yield this.git.isTracked(e.uri.fsPath)))return[];const i=e.isDirty,o=a.configuration.get(a.configuration.name("codeLens").value,e.uri);this._debug=o.debug;let n=o.perLanguageLocations&&o.perLanguageLocations.find(t=>void 0!==t.language&&t.language.toLowerCase()===e.languageId);null==n&&(n={language:void 0,locations:o.locations,customSymbols:o.customLocationSymbols}),n.customSymbols=null!=n.customSymbols?n.customSymbols=n.customSymbols.map(e=>e.toLowerCase()):[];const m=[];let g,p,f;if(i)1===n.locations.length&&n.locations.includes(a.CodeLensLocations.Document)||(f=yield r.commands.executeCommand(c.BuiltInCommands.ExecuteDocumentSymbolProvider,e.uri));else{if(g=yield h.GitUri.fromUri(e.uri,this.git),t.isCancellationRequested)return m;if(1===n.locations.length&&n.locations.includes(a.CodeLensLocations.Document)?p=yield this.git.getBlameForFile(g):[p,f]=yield Promise.all([this.git.getBlameForFile(g),r.commands.executeCommand(c.BuiltInCommands.ExecuteDocumentSymbolProvider,e.uri)]),void 0===p||0===p.lines.length)return m}if(t.isCancellationRequested)return m;const v=s.Functions.once(()=>e.validateRange(new r.Range(0,1e6,1e6,1e6))),C=i?{title:this.getDirtyTitle(o)}:void 0;if(void 0!==f&&(l.Logger.log("GitCodeLensProvider.provideCodeLenses:",`${f.length} symbol(s) found`),f.forEach(t=>this.provideCodeLens(m,e,t,n,v,p,g,o,i,C))),(n.locations.includes(a.CodeLensLocations.Document)||n.customSymbols.includes("file"))&&!n.customSymbols.includes("!file")&&!m.find(e=>0===e.range.start.line&&0===e.range.end.line)){const e=v();let t=void 0;(i||o.recentChange.enabled)&&(i||(t=s.Functions.once(()=>this.git.getBlameForRangeSync(p,g,e))),m.push(new d(r.SymbolKind.File,g,t,e,!0,new r.Range(0,0,0,e.start.character),o.recentChange.command,C))),!i&&o.authors.enabled&&(void 0===t&&(t=s.Functions.once(()=>this.git.getBlameForRangeSync(p,g,e))),m.push(new u(r.SymbolKind.File,g,t,e,!0,new r.Range(0,1,0,e.start.character),o.authors.command)))}return m})}validateSymbolAndGetBlameRange(e,t,i){let o,s=!1;const n=r.SymbolKind[e.kind].toLowerCase();switch(e.kind){case r.SymbolKind.File:(t.locations.includes(a.CodeLensLocations.Containers)||t.customSymbols.includes(n))&&(s=!t.customSymbols.includes(`!${n}`)),s&&(o=i());break;case r.SymbolKind.Package:(t.locations.includes(a.CodeLensLocations.Containers)||t.customSymbols.includes(n))&&(s=!t.customSymbols.includes(`!${n}`)),s&&0===e.location.range.start.line&&0===e.location.range.end.line&&(o=i());break;case r.SymbolKind.Class:case r.SymbolKind.Interface:case r.SymbolKind.Module:case r.SymbolKind.Namespace:case r.SymbolKind.Struct:(t.locations.includes(a.CodeLensLocations.Containers)||t.customSymbols.includes(n))&&(s=!t.customSymbols.includes(`!${n}`));break;case r.SymbolKind.Constructor:case r.SymbolKind.Enum:case r.SymbolKind.Function:case r.SymbolKind.Method:(t.locations.includes(a.CodeLensLocations.Blocks)||t.customSymbols.includes(n))&&(s=!t.customSymbols.includes(`!${n}`));break;default:t.customSymbols.includes(n)&&(s=!t.customSymbols.includes(`!${n}`))}return s?o||e.location.range:void 0}provideCodeLens(e,t,i,o,n,a,c,h,l,m){const g=this.validateSymbolAndGetBlameRange(i,o,n);if(void 0===g)return;const p=t.lineAt(i.location.range.start);if(e.length&&e[e.length-1].range.start.line===p.lineNumber)return;let f,v=0;if((l||h.recentChange.enabled)&&(l||(f=s.Functions.once(()=>this.git.getBlameForRangeSync(a,c,g))),e.push(new d(i.kind,c,f,g,!1,p.range.with(new r.Position(p.range.start.line,v)),h.recentChange.command,m)),v++),h.authors.enabled){let o=!g.isSingleLine;if(!o&&"csharp"===t.languageId)switch(i.kind){case r.SymbolKind.File:break;case r.SymbolKind.Package:case r.SymbolKind.Module:case r.SymbolKind.Namespace:case r.SymbolKind.Class:case r.SymbolKind.Interface:case r.SymbolKind.Constructor:case r.SymbolKind.Method:case r.SymbolKind.Function:case r.SymbolKind.Enum:o=!0}o&&!l&&(void 0===f&&(f=s.Functions.once(()=>this.git.getBlameForRangeSync(a,c,g))),e.push(new u(i.kind,c,f,g,!1,p.range.with(new r.Position(p.range.start.line,v)),h.authors.command)))}}resolveCodeLens(e,t){return e instanceof d?this.resolveGitRecentChangeCodeLens(e,t):e instanceof u?this.resolveGitAuthorsCodeLens(e,t):Promise.reject(void 0)}resolveGitRecentChangeCodeLens(e,t){const i=e.getBlame();if(void 0===i)return e;const o=s.Iterables.first(i.commits.values());let n=`${o.author}, ${o.fromNow()}`;switch(this._debug&&(n+=` [${r.SymbolKind[e.symbolKind]}(${e.range.start.character}-${e.range.end.character}), Lines (${e.blameRange.start.line+1}-${e.blameRange.end.line+1}), Commit (${o.shortSha})]`),e.desiredCommand){case a.CodeLensCommand.DiffWithPrevious:return this.applyDiffWithPreviousCommand(n,e,i,o);case a.CodeLensCommand.ShowQuickCommitDetails:return this.applyShowQuickCommitDetailsCommand(n,e,i,o);case a.CodeLensCommand.ShowQuickCommitFileDetails:return this.applyShowQuickCommitFileDetailsCommand(n,e,i,o);case a.CodeLensCommand.ShowQuickCurrentBranchHistory:return this.applyShowQuickCurrentBranchHistoryCommand(n,e,i,o);case a.CodeLensCommand.ShowQuickFileHistory:return this.applyShowQuickFileHistoryCommand(n,e,i,o);case a.CodeLensCommand.ToggleFileBlame:return this.applyToggleFileBlameCommand(n,e,i);default:return e}}resolveGitAuthorsCodeLens(e,t){const i=e.getBlame();if(void 0===i)return e;const o=i.authors.size;let n=`${o} ${o>1?"authors":"author"} (${s.Iterables.first(i.authors.values()).name}${o>1?" and others":""})`;switch(this._debug&&(n+=` [${r.SymbolKind[e.symbolKind]}(${e.range.start.character}-${e.range.end.character}), Lines (${e.blameRange.start.line+1}-${e.blameRange.end.line+1}), Authors (${s.Iterables.join(s.Iterables.map(i.authors.values(),e=>e.name),", ")})]`),e.desiredCommand){case a.CodeLensCommand.DiffWithPrevious:return this.applyDiffWithPreviousCommand(n,e,i);case a.CodeLensCommand.ShowQuickCommitDetails:return this.applyShowQuickCommitDetailsCommand(n,e,i);case a.CodeLensCommand.ShowQuickCommitFileDetails:return this.applyShowQuickCommitFileDetailsCommand(n,e,i);case a.CodeLensCommand.ShowQuickCurrentBranchHistory:return this.applyShowQuickCurrentBranchHistoryCommand(n,e,i);case a.CodeLensCommand.ShowQuickFileHistory:return this.applyShowQuickFileHistoryCommand(n,e,i);case a.CodeLensCommand.ToggleFileBlame:return this.applyToggleFileBlameCommand(n,e,i);default:return e}}applyDiffWithPreviousCommand(e,t,i,o){if(void 0===o){const e=i.allLines[t.range.start.line];o=i.commits.get(e.sha)}return t.command={title:e,command:n.Commands.DiffWithPrevious,arguments:[r.Uri.file(t.uri.fsPath),{commit:o,range:t.isFullRange?void 0:t.blameRange}]},t}applyShowQuickCommitDetailsCommand(e,t,i,o){return t.command={title:e,command:void 0!==o&&o.isUncommitted?"":a.CodeLensCommand.ShowQuickCommitDetails,arguments:[r.Uri.file(t.uri.fsPath),{commit:o,sha:void 0===o?void 0:o.sha}]},t}applyShowQuickCommitFileDetailsCommand(e,t,i,o){return t.command={title:e,command:void 0!==o&&o.isUncommitted?"":a.CodeLensCommand.ShowQuickCommitFileDetails,arguments:[r.Uri.file(t.uri.fsPath),{commit:o,sha:void 0===o?void 0:o.sha}]},t}applyShowQuickCurrentBranchHistoryCommand(e,t,i,o){return t.command={title:e,command:a.CodeLensCommand.ShowQuickCurrentBranchHistory,arguments:[r.Uri.file(t.uri.fsPath)]},t}applyShowQuickFileHistoryCommand(e,t,i,o){return t.command={title:e,command:a.CodeLensCommand.ShowQuickFileHistory,arguments:[r.Uri.file(t.uri.fsPath),{range:t.isFullRange?void 0:t.blameRange}]},t}applyToggleFileBlameCommand(e,t,i){return t.command={title:e,command:n.Commands.ToggleFileBlame,arguments:[r.Uri.file(t.uri.fsPath)]},t}getDirtyTitle(e){return e.recentChange.enabled&&e.authors.enabled?a.configuration.get(a.configuration.name("strings")("codeLens")("unsavedChanges")("recentChangeAndAuthors").value):e.recentChange.enabled?a.configuration.get(a.configuration.name("strings")("codeLens")("unsavedChanges")("recentChangeOnly").value):a.configuration.get(a.configuration.name("strings")("codeLens")("unsavedChanges")("authorsOnly").value)}}m.selector=[{scheme:c.DocumentSchemes.File},{scheme:c.DocumentSchemes.Git},{scheme:c.DocumentSchemes.GitLensGit}],t.GitCodeLensProvider=m},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(17),a=i(23),c=i(11),h=i(18),l=i(9),d=i(4),u=i(3),m=r.window.createTextEditorDecorationType({after:{margin:"0 0 0 3em",textDecoration:"none"},rangeBehavior:r.DecorationRangeBehavior.ClosedClosed});var g;!function(e){e.Trailing="trailing",e.Hover="hover"}(g=t.LineAnnotationType||(t.LineAnnotationType={}));t.CurrentLineController=class extends r.Disposable{constructor(e,t,i,o){super(()=>this.dispose()),this.git=t,this.gitContextTracker=i,this.annotationController=o,this._currentLine={line:-1},this._isAnnotating=!1,this._updateBlameDebounced=s.Functions.debounce(this.updateBlame,250),this._disposable=r.Disposable.from(l.configuration.onDidChange(this.onConfigurationChanged,this),o.onDidToggleAnnotations(this.onFileAnnotationsToggled,this),r.debug.onDidStartDebugSession(this.onDebugSessionStarted,this)),this.onConfigurationChanged(l.configuration.initializingChangeEvent)}dispose(){this.clearAnnotations(this._editor,!0),this.unregisterHoverProviders(),this._trackCurrentLineDisposable&&this._trackCurrentLineDisposable.dispose(),this._statusBarItem&&this._statusBarItem.dispose(),this._debugSessionEndDisposable&&this._debugSessionEndDisposable.dispose(),this._disposable&&this._disposable.dispose()}onConfigurationChanged(e){const t=l.configuration.initializing(e),i=l.configuration.get();let o=!1;if((t||l.configuration.changed(e,l.configuration.name("blame")("line").value))&&(o=!0,this._blameLineAnnotationState=void 0),(t||l.configuration.changed(e,l.configuration.name("annotations")("line")("trailing").value)||l.configuration.changed(e,l.configuration.name("annotations")("line")("hover").value))&&(o=!0),t||l.configuration.changed(e,l.configuration.name("statusBar").value))if(o=!0,i.statusBar.enabled){const e="left"!==i.statusBar.alignment?r.StatusBarAlignment.Right:r.StatusBarAlignment.Left;void 0!==this._statusBarItem&&this._statusBarItem.alignment!==e&&(this._statusBarItem.dispose(),this._statusBarItem=void 0),this._statusBarItem=this._statusBarItem||r.window.createStatusBarItem(e,e===r.StatusBarAlignment.Right?1e3:0),this._statusBarItem.command=i.statusBar.command}else void 0!==this._statusBarItem&&(this._statusBarItem.dispose(),this._statusBarItem=void 0);this._config=i,o&&(i.statusBar.enabled||i.blame.line.enabled||void 0!==this._blameLineAnnotationState&&this._blameLineAnnotationState.enabled?this._trackCurrentLineDisposable=this._trackCurrentLineDisposable||r.Disposable.from(r.window.onDidChangeActiveTextEditor(s.Functions.debounce(this.onActiveTextEditorChanged,50),this),r.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this),this.gitContextTracker.onDidChangeBlameability(this.onBlameabilityChanged,this)):void 0!==this._trackCurrentLineDisposable&&(this._trackCurrentLineDisposable.dispose(),this._trackCurrentLineDisposable=void 0),this.refresh(r.window.activeTextEditor))}onActiveTextEditorChanged(e){this._editor!==e&&(void 0===e||d.isTextEditor(e))&&this.refresh(e)}onBlameabilityChanged(e){if(h.TextEditorComparer.equals(this._editor,e.editor))if(this._blameable||e.blameable){if(this._blameable=e.blameable,!e.blameable||void 0===this._editor)return this._updateBlameDebounced.cancel(),void this.updateBlame(this._currentLine.line,e.editor);this._updateBlameDebounced(this._editor.selection.active.line,this._editor)}else this._updateBlameDebounced.cancel()}onDebugSessionStarted(){const e=this.getLineAnnotationState();e.enabled&&(this._debugSessionEndDisposable=r.debug.onDidTerminateDebugSession(this.onDebugSessionEnded,this),this.toggleAnnotations(r.window.activeTextEditor,e.annotationType,"debugging"))}onDebugSessionEnded(){this._debugSessionEndDisposable&&this._debugSessionEndDisposable.dispose(),this._debugSessionEndDisposable=void 0,void 0===this._blameLineAnnotationState||this._blameLineAnnotationState.enabled||"debugging"!==this._blameLineAnnotationState.reason||this.toggleAnnotations(r.window.activeTextEditor,this._blameLineAnnotationState.annotationType)}onFileAnnotationsToggled(){this.refresh(r.window.activeTextEditor)}onTextEditorSelectionChanged(e){return o.__awaiter(this,void 0,void 0,function*(){if(!this._blameable||!h.TextEditorComparer.equals(this._editor,e.textEditor))return;const t=e.selections[0].active.line;t!==this._currentLine.line&&(this._currentLine.line=t,this._currentLine.commit=void 0,this._currentLine.logCommit=void 0,void 0===this._uri&&void 0!==e.textEditor&&(this._uri=yield u.GitUri.fromUri(e.textEditor.document.uri,this.git)),this.clearAnnotations(e.textEditor),this._updateBlameDebounced(t,e.textEditor))})}getLineAnnotationState(){return void 0!==this._blameLineAnnotationState?this._blameLineAnnotationState:this._config.blame.line}isEditorBlameable(e){return void 0!==e&&void 0!==e.document&&!!this.git.isTrackable(e.document.uri)&&(!e.document.isUntitled||e.document.uri.scheme!==d.DocumentSchemes.File)&&this.git.isEditorBlameable(e)}updateBlame(e,t){return o.__awaiter(this,void 0,void 0,function*(){this._currentLine.line=e,this._currentLine.commit=void 0,this._currentLine.logCommit=void 0;let i=void 0,o=void 0;if(this._blameable&&e>=0){const t=yield this.git.getBlameForLine(this._uri,e);this._blameable&&(o=void 0===t?void 0:t.line,i=void 0===t?void 0:t.commit)}this._currentLine.commit=i,void 0!==i&&void 0!==o?this.show(i,o,t,e):this.clear(t)})}clear(e){return o.__awaiter(this,void 0,void 0,function*(){this.unregisterHoverProviders(),this.clearAnnotations(e,!0),this._statusBarItem&&this._statusBarItem.hide()})}clearAnnotations(e,t=!1){void 0!==e&&(this._isAnnotating||t)&&(e.setDecorations(m,[]),this._isAnnotating=!1)}refresh(e){return o.__awaiter(this,void 0,void 0,function*(){if(this._currentLine.line=-1,void 0===e&&void 0===this._editor)return;if(this.clearAnnotations(this._editor),this._blameable=this.isEditorBlameable(e),!this._blameable||void 0===e)return this.updateBlame(this._currentLine.line,e),void(this._editor=void 0);this._editor=e,this._uri=yield u.GitUri.fromUri(e.document.uri,this.git);const t=this._config.advanced.caching.maxLines;this._config.advanced.caching.enabled&&(t<=0||e.document.lineCount<=t)&&this.git.getBlameForFile(this._uri);const i=this.getLineAnnotationState();if(i.enabled&&this._blameable){const e=this._config.annotations.line;this.registerHoverProviders(i.annotationType===g.Trailing?e.trailing.hover:e.hover)}else this.unregisterHoverProviders();this._updateBlameDebounced(e.selection.active.line,e)})}show(e,t,i,s){return o.__awaiter(this,void 0,void 0,function*(){void 0!==i.document&&(this.updateStatusBar(e),this.updateTrailingAnnotation(e,t,i,s))})}showAnnotations(e,t,i="user"){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return;const o=this.getLineAnnotationState();o.enabled&&o.annotationType===t||(this._blameLineAnnotationState={enabled:!0,annotationType:t,reason:i},this.clearAnnotations(e),yield this.updateBlame(e.selection.active.line,e))})}toggleAnnotations(e,t,i="user"){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===e)return;const o=this.getLineAnnotationState();this._blameLineAnnotationState={enabled:!o.enabled,annotationType:t,reason:i},this.clearAnnotations(e),yield this.updateBlame(e.selection.active.line,e)})}updateStatusBar(e){const t=this._config.statusBar;if(t.enabled&&void 0!==this._statusBarItem){switch(this._statusBarItem.text=`$(git-commit) ${u.CommitFormatter.fromTemplate(t.format,e,{truncateMessageAtNewLine:!0,dateFormat:null===t.dateFormat?this._config.defaultDateFormat:t.dateFormat})}`,t.command){case l.StatusBarCommand.ToggleFileBlame:this._statusBarItem.tooltip="Toggle Blame Annotations";break;case l.StatusBarCommand.DiffWithPrevious:this._statusBarItem.command=c.Commands.DiffLineWithPrevious,this._statusBarItem.tooltip="Compare Line Revision with Previous";break;case l.StatusBarCommand.DiffWithWorking:this._statusBarItem.command=c.Commands.DiffLineWithWorking,this._statusBarItem.tooltip="Compare Line Revision with Working";break;case l.StatusBarCommand.ToggleCodeLens:this._statusBarItem.tooltip="Toggle Git CodeLens";break;case l.StatusBarCommand.ShowQuickCommitDetails:this._statusBarItem.tooltip="Show Commit Details";break;case l.StatusBarCommand.ShowQuickCommitFileDetails:this._statusBarItem.tooltip="Show Line Commit Details";break;case l.StatusBarCommand.ShowQuickFileHistory:this._statusBarItem.tooltip="Show File History";break;case l.StatusBarCommand.ShowQuickCurrentBranchHistory:this._statusBarItem.tooltip="Show Branch History"}this._statusBarItem.show()}}updateTrailingAnnotation(e,t,i,s){return o.__awaiter(this,void 0,void 0,function*(){const o=this.getLineAnnotationState();if(!o.enabled||o.annotationType!==g.Trailing||!d.isTextEditor(i))return;s=void 0===s?t.line:s;const n=this._config.annotations.line.trailing,c=a.Annotations.trailing(e,n.format,null===n.dateFormat?this._config.defaultDateFormat:n.dateFormat);c.range=i.document.validateRange(new r.Range(s,a.endOfLineIndex,s,a.endOfLineIndex)),i.setDecorations(m,[c]),this._isAnnotating=!0})}registerHoverProviders(e){if(this.unregisterHoverProviders(),void 0===this._editor)return;if(!e.details&&!e.changes)return;const t=[];e.changes&&t.push(r.languages.registerHoverProvider({pattern:this._editor.document.uri.fsPath},{provideHover:this.provideChangesHover.bind(this)})),e.details&&t.push(r.languages.registerHoverProvider({pattern:this._editor.document.uri.fsPath},{provideHover:this.provideDetailsHover.bind(this)})),this._hoverProviderDisposable=r.Disposable.from(...t)}unregisterHoverProviders(){void 0!==this._hoverProviderDisposable&&(this._hoverProviderDisposable.dispose(),this._hoverProviderDisposable=void 0)}provideDetailsHover(e,t,i){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===this._editor||this._editor.document!==e)return;if(this._currentLine.line!==t.line)return;const i=this._currentLine.commit;if(void 0===i)return;const o=this.annotationController.getAnnotationType(this._editor);if(o===n.FileAnnotationType.Gutter&&this._config.annotations.file.gutter.hover.details||o===n.FileAnnotationType.Hover&&this._config.annotations.file.hover.details)return;const s=this.getLineAnnotationState(),c=s.annotationType===g.Hover||s.annotationType===g.Trailing&&this._config.annotations.line.trailing.hover.wholeLine||o===n.FileAnnotationType.Hover||o===n.FileAnnotationType.Gutter&&this._config.annotations.file.gutter.hover.wholeLine,h=e.validateRange(new r.Range(t.line,c?0:a.endOfLineIndex,t.line,a.endOfLineIndex));if(!c&&h.start.character!==t.character)return;let l=this._currentLine.logCommit;void 0!==l||i.isUncommitted||void 0!==(l=yield this.git.getLogCommit(i.repoPath,i.uri.fsPath,i.sha))&&(l.previousSha=i.previousSha,l.previousFileName=i.previousFileName,this._currentLine.logCommit=l);const d=a.Annotations.getHoverMessage(l||i,this._config.defaultDateFormat,yield this.git.hasRemote(i.repoPath),this._config.blame.file.annotationType);return new r.Hover(d,h)})}provideChangesHover(e,t,i){return o.__awaiter(this,void 0,void 0,function*(){if(void 0===this._editor||this._editor.document!==e)return;if(this._currentLine.line!==t.line)return;const i=this._currentLine.commit;if(void 0===i)return;const o=this.annotationController.getAnnotationType(this._editor);if(o===n.FileAnnotationType.Gutter&&this._config.annotations.file.gutter.hover.changes||o===n.FileAnnotationType.Hover&&this._config.annotations.file.hover.changes)return;const s=this.getLineAnnotationState(),c=s.annotationType===g.Hover||s.annotationType===g.Trailing&&this._config.annotations.line.trailing.hover.wholeLine||o===n.FileAnnotationType.Hover||o===n.FileAnnotationType.Gutter&&this._config.annotations.file.gutter.hover.wholeLine,h=e.validateRange(new r.Range(t.line,c?0:a.endOfLineIndex,t.line,a.endOfLineIndex));if(!c&&h.start.character!==t.character)return;const l=yield a.Annotations.changesHover(i,t.line,this._uri,this.git);return new r.Hover(l.hoverMessage,h)})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(2),r=i(1),n=i(4),a=i(25),c=i(19),h=i(11),l=i(3),d=i(32);t.ExplorerCommands=class extends r.Disposable{constructor(e,t){super(()=>this.dispose()),this.context=e,this.git=t,r.commands.registerCommand("gitlens.explorers.openChanges",this.openChanges,this),r.commands.registerCommand("gitlens.explorers.openChangesWithWorking",this.openChangesWithWorking,this),r.commands.registerCommand("gitlens.explorers.openFile",this.openFile,this),r.commands.registerCommand("gitlens.explorers.openFileRevision",this.openFileRevision,this),r.commands.registerCommand("gitlens.explorers.openFileRevisionInRemote",this.openFileRevisionInRemote,this),r.commands.registerCommand("gitlens.explorers.openChangedFiles",this.openChangedFiles,this),r.commands.registerCommand("gitlens.explorers.openChangedFileChanges",this.openChangedFileChanges,this),r.commands.registerCommand("gitlens.explorers.openChangedFileChangesWithWorking",this.openChangedFileChangesWithWorking,this),r.commands.registerCommand("gitlens.explorers.openChangedFileRevisions",this.openChangedFileRevisions,this),r.commands.registerCommand("gitlens.explorers.applyChanges",this.applyChanges,this),r.commands.registerCommand("gitlens.explorers.compareWithSelected",this.compareWithSelected,this),r.commands.registerCommand("gitlens.explorers.selectForCompare",this.selectForCompare,this),r.commands.registerCommand("gitlens.explorers.terminalCheckoutBranch",this.terminalCheckoutBranch,this),r.commands.registerCommand("gitlens.explorers.terminalCreateBranch",this.terminalCreateBranch,this),r.commands.registerCommand("gitlens.explorers.terminalDeleteBranch",this.terminalDeleteBranch,this),r.commands.registerCommand("gitlens.explorers.terminalRebaseBranchToRemote",this.terminalRebaseBranchToRemote,this),r.commands.registerCommand("gitlens.explorers.terminalSquashBranchIntoCommit",this.terminalSquashBranchIntoCommit,this),r.commands.registerCommand("gitlens.explorers.terminalRebaseCommit",this.terminalRebaseCommit,this),r.commands.registerCommand("gitlens.explorers.terminalResetCommit",this.terminalResetCommit,this),r.commands.registerCommand("gitlens.explorers.terminalRemoveRemote",this.terminalRemoveRemote,this)}dispose(){this._disposable&&this._disposable.dispose()}applyChanges(e){return o.__awaiter(this,void 0,void 0,function*(){return yield this.git.checkoutFile(e.uri),this.openFile(e)})}compareWithSelected(e){return o.__awaiter(this,void 0,void 0,function*(){void 0!==this._selection&&e instanceof c.ExplorerRefNode&&this._selection.repoPath===e.repoPath&&d.ResultsExplorer.instance.showComparisonInResults(this._selection.repoPath,this._selection.ref,e.ref)})}selectForCompare(e){return o.__awaiter(this,void 0,void 0,function*(){e instanceof c.ExplorerRefNode&&(this._selection={ref:e.ref,repoPath:e.repoPath},n.setCommandContext(n.CommandContext.ExplorersCanCompare,!0))})}openChanges(e){const t=e.getCommand();if(void 0===t||void 0===t.arguments)return;const[i,o]=t.arguments;return o.showOptions.preview=!1,r.commands.executeCommand(t.command,i,o)}openChangesWithWorking(e){const t={commit:e.commit,showOptions:{preserveFocus:!0,preview:!1}};return r.commands.executeCommand(h.Commands.DiffWithWorking,e.commit.toGitUri(),t)}openFile(e){return h.openEditor(e.uri,{preserveFocus:!0,preview:!1})}openFileRevision(e,t={showOptions:{preserveFocus:!0,preview:!1}}){const i=t.uri||("D"===e.commit.status?l.GitUri.toRevisionUri(e.commit.previousSha,e.commit.previousUri.fsPath,e.commit.repoPath):l.GitUri.toRevisionUri(e.uri));return h.openEditor(i,t.showOptions||{preserveFocus:!0,preview:!1})}openChangedFileChanges(e,t={preserveFocus:!1,preview:!1}){return o.__awaiter(this,void 0,void 0,function*(){const i=e.commit.repoPath,o=e.commit.fileStatuses.map(e=>l.GitUri.fromFileStatus(e,i));for(const s of o)yield this.openDiffWith(i,{uri:s,sha:void 0!==e.commit.previousSha?e.commit.previousSha:l.GitService.deletedSha},{uri:s,sha:e.commit.sha},t)})}openChangedFileChangesWithWorking(e,t={preserveFocus:!1,preview:!1}){return o.__awaiter(this,void 0,void 0,function*(){const i=e.commit.repoPath,o=s.Arrays.filterMap(e.commit.fileStatuses,e=>"D"!==e.status?l.GitUri.fromFileStatus(e,i):void 0);for(const s of o)yield this.openDiffWith(i,{uri:s,sha:e.commit.sha},{uri:s,sha:""},t)})}openChangedFiles(e,t={preserveFocus:!1,preview:!1}){return o.__awaiter(this,void 0,void 0,function*(){const i=e.commit.repoPath,o=s.Arrays.filterMap(e.commit.fileStatuses,e=>l.GitUri.fromFileStatus(e,i));for(const e of o)yield h.openEditor(e,t)})}openChangedFileRevisions(e,t={preserveFocus:!1,preview:!1}){return o.__awaiter(this,void 0,void 0,function*(){const i=s.Arrays.filterMap(e.commit.fileStatuses,t=>l.GitUri.toRevisionUri("D"===t.status?e.commit.previousFileSha:e.commit.sha,t,e.commit.repoPath));for(const e of i)yield h.openEditor(e,t)})}openDiffWith(e,t,i,s={preserveFocus:!1,preview:!1}){return o.__awaiter(this,void 0,void 0,function*(){const o={repoPath:e,lhs:t,rhs:i,showOptions:s};return r.commands.executeCommand(h.Commands.DiffWith,o)})}openFileRevisionInRemote(e){return o.__awaiter(this,void 0,void 0,function*(){return r.commands.executeCommand(h.Commands.OpenFileInRemote,e.commit.toGitUri("D"===e.commit.status),{range:!1})})}terminalCheckoutBranch(e){return o.__awaiter(this,void 0,void 0,function*(){if(!(e instanceof a.BranchNode))return;const t=`checkout ${e.branch.name}`;this.sendTerminalCommand(t,e.branch.repoPath)})}terminalCreateBranch(e){return o.__awaiter(this,void 0,void 0,function*(){if(!(e instanceof a.BranchNode))return;const t=yield r.window.showInputBox({prompt:"Please provide a branch name (Press 'Enter' to confirm or 'Escape' to cancel)",placeHolder:"Branch name",value:e.branch.remote?e.branch.getName():void 0});if(void 0===t||""===t)return;const i=`branch ${e.branch.remote?"-t ":""}${t} ${e.branch.name}`;this.sendTerminalCommand(i,e.branch.repoPath)})}terminalDeleteBranch(e){if(!(e instanceof a.BranchNode))return;const t=e.branch.remote?`push ${e.branch.remote} :${e.branch.name}`:`branch -d ${e.branch.name}`;this.sendTerminalCommand(t,e.branch.repoPath)}terminalRebaseBranchToRemote(e){if(e instanceof a.BranchNode){if(!e.branch.current||!e.branch.tracking)return;const t=`rebase -i ${e.branch.tracking}`;this.sendTerminalCommand(t,e.branch.repoPath)}else if(e instanceof c.StatusUpstreamNode){const t=`rebase -i ${e.status.upstream}`;this.sendTerminalCommand(t,e.status.repoPath)}}terminalSquashBranchIntoCommit(e){if(!(e instanceof a.BranchNode))return;const t=`merge --squash ${e.branch.name}`;this.sendTerminalCommand(t,e.branch.repoPath)}terminalRebaseCommit(e){if(!(e instanceof c.CommitNode))return;const t=`rebase -i ${e.commit.sha}^`;this.sendTerminalCommand(t,e.commit.repoPath)}terminalResetCommit(e){if(!(e instanceof c.CommitNode))return;const t=`reset --soft ${e.commit.sha}^`;this.sendTerminalCommand(t,e.commit.repoPath)}terminalRemoveRemote(e){if(!(e instanceof c.RemoteNode))return;const t=`remote remove ${e.remote.name}`;this.sendTerminalCommand(t,e.remote.repoPath)}ensureTerminal(){return void 0===this._terminal&&(this._terminal=r.window.createTerminal(n.ExtensionTerminalName),this._disposable=r.window.onDidCloseTerminal(e=>{e.name===n.ExtensionTerminalName&&(this._terminal=void 0,this._disposable.dispose(),this._disposable=void 0)},this),this.context.subscriptions.push(this._disposable)),this._terminal}sendTerminalCommand(e,t){const i=this.ensureTerminal();i.show(!1),i.sendText(`git -C ${t} ${e}`,!1)}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(4),n=i(3),a=i(5),c=i(7);class h{constructor(e,t){this.git=t}provideTextDocumentContent(e,t){return o.__awaiter(this,void 0,void 0,function*(){const t=n.GitUri.fromRevisionUri(e);if(!t.repoPath||t.sha===n.GitService.deletedSha)return"";try{return yield this.git.getVersionedFileText(t.repoPath,t.fsPath,t.sha||"HEAD")}catch(e){return a.Logger.error(e,"GitContentProvider","getVersionedFileText"),void s.window.showErrorMessage(`Unable to show Git revision ${n.GitService.shortenSha(t.sha)} of '${c.relative(t.repoPath,t.fsPath)}'`)}})}}h.scheme=r.DocumentSchemes.GitLensGit,t.GitContentProvider=h},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(0),s=i(1),r=i(11),n=i(4),a=i(3);class c extends s.CodeLens{constructor(e,t,i){super(i),this.fileName=e,this.commit=t}}t.GitDiffWithWorkingCodeLens=c;class h extends s.CodeLens{constructor(e,t,i){super(i),this.fileName=e,this.commit=t}}t.GitDiffWithPreviousCodeLens=h;class l{constructor(e,t){this.git=t}provideCodeLenses(e,t){return o.__awaiter(this,void 0,void 0,function*(){const t=a.GitUri.fromRevisionUri(e.uri),i=[],o=yield this.git.getLogCommit(t.repoPath,t.fsPath,t.sha,{firstIfMissing:!0,previous:!0});return void 0===o?i:(o.previousSha&&i.push(new h(o.previousUri.fsPath,o,new s.Range(0,0,0,1))),i.push(new c(o.uri.fsPath,o,new s.Range(0,1,0,2))),i)})}resolveCodeLens(e,t){return e instanceof c?this._resolveDiffWithWorkingTreeCodeLens(e,t):e instanceof h?this._resolveGitDiffWithPreviousCodeLens(e,t):Promise.reject(void 0)}_resolveDiffWithWorkingTreeCodeLens(e,t){return e.command={title:`Compare Revision (${e.commit.shortSha}) with Working`,command:r.Commands.DiffWithWorking,arguments:[s.Uri.file(e.fileName),{commit:e.commit,line:e.range.start.line}]},Promise.resolve(e)}_resolveGitDiffWithPreviousCodeLens(e,t){return e.command={title:`Compare Revision (${e.commit.shortSha}) with Previous (${e.commit.previousShortSha})`,command:r.Commands.DiffWithPrevious,arguments:[s.Uri.file(e.fileName),{commit:e.commit,line:e.range.start.line}]},Promise.resolve(e)}}l.selector={scheme:n.DocumentSchemes.GitLensGit},t.GitRevisionCodeLensProvider=l}]);